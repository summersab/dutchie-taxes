import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  ISODate: any;
  ISODateTime: any;
  JSON: any;
  JSONObject: any;
};













export type GqlAccount = {
  __typename?: 'Account';
  accountAlias: Scalars['String'];
  accountGuid: Scalars['String'];
  availableBalance: Scalars['Float'];
  bankName: Scalars['String'];
  lastDigits: Scalars['String'];
};

export type GqlAccountBalance = {
  __typename?: 'AccountBalance';
  accountBalanceCents: Scalars['Int'];
  accountBalanceCurrency: Scalars['String'];
  createdAt?: Maybe<GqlGoogleProtobufTimestamp>;
  insufficient: Scalars['Boolean'];
  multiplier: Scalars['Float'];
  orderTotalCents: Scalars['Int'];
  orderTotalCurrency: Scalars['String'];
  pendingTransactionTotalCents?: Maybe<Scalars['Int']>;
  phase: Scalars['String'];
};

export type GqlAccountDetailsInput = {
  accountAlias?: Maybe<Scalars['String']>;
  accountNumber: Scalars['String'];
  accountOwners?: Maybe<Array<Scalars['String']>>;
  accountType: Scalars['String'];
  bankName: Scalars['String'];
  currency: Scalars['String'];
  routingNumber: Scalars['String'];
};

export type GqlAchBatch = {
  __typename?: 'AchBatch';
  effectiveDate?: Maybe<GqlGoogleProtobufTimestamp>;
  estimatedSettledAt?: Maybe<GqlGoogleProtobufTimestamp>;
  failedAt?: Maybe<GqlGoogleProtobufTimestamp>;
  fileName: Scalars['String'];
  generatedAt?: Maybe<GqlGoogleProtobufTimestamp>;
  id: Scalars['String'];
  processedAt?: Maybe<GqlGoogleProtobufTimestamp>;
  status: Scalars['String'];
  submittedAt?: Maybe<GqlGoogleProtobufTimestamp>;
};

export type GqlAchEntry = {
  __typename?: 'AchEntry';
  achFileId?: Maybe<Scalars['String']>;
  bankAccountId?: Maybe<Scalars['String']>;
  createdAt?: Maybe<GqlGoogleProtobufTimestamp>;
  id?: Maybe<Scalars['String']>;
  identificationNumber?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  secCode?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  sourceType?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  submittedAt?: Maybe<GqlGoogleProtobufTimestamp>;
  traceNumber?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<GqlGoogleProtobufTimestamp>;
};

export type GqlAchEntryV2 = {
  __typename?: 'AchEntryV2';
  achFileId?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  batchFileId?: Maybe<Scalars['String']>;
  createdAt?: Maybe<GqlGoogleProtobufTimestamp>;
  effectiveAt?: Maybe<GqlGoogleProtobufTimestamp>;
  failedAt?: Maybe<GqlGoogleProtobufTimestamp>;
  id?: Maybe<Scalars['String']>;
  identificationNumber?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  retailerName?: Maybe<Scalars['String']>;
  secCode?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  sourceType?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  submittedAt?: Maybe<GqlGoogleProtobufTimestamp>;
  traceNumber?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<GqlGoogleProtobufTimestamp>;
};

export type GqlAchRawBatchFile = {
  __typename?: 'AchRawBatchFile';
  fileString: Scalars['String'];
};

export type GqlAchReturn = {
  __typename?: 'AchReturn';
  achEntryId?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  originalTraceNumber?: Maybe<Scalars['String']>;
  returnTraceNumber?: Maybe<Scalars['String']>;
};

export type GqlAchReturnDetailReport = {
  __typename?: 'AchReturnDetailReport';
  achReturnDetailReport?: Maybe<Array<Maybe<GqlAchReturnDetailReportRow>>>;
};

export type GqlAchReturnDetailReportResponse = {
  __typename?: 'AchReturnDetailReportResponse';
  data?: Maybe<GqlAchReturnDetailReport>;
};

export type GqlAchReturnDetailReportRow = {
  __typename?: 'AchReturnDetailReportRow';
  companyName?: Maybe<Scalars['String']>;
  date?: Maybe<GqlGoogleProtobufTimestamp>;
  returnCode?: Maybe<Scalars['String']>;
  returnCodeCount?: Maybe<Scalars['Int']>;
  totalReturns?: Maybe<Scalars['Int']>;
};

export type GqlAchReturnFileUploadResult = {
  __typename?: 'AchReturnFileUploadResult';
  error?: Maybe<GqlErrorMessage>;
  identificationNumber: Scalars['String'];
  markedAsReturned: Scalars['Boolean'];
};

export type GqlAchReturnResponse = {
  __typename?: 'AchReturnResponse';
  createdAt?: Maybe<GqlGoogleProtobufTimestamp>;
  discretionaryData?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  identificationNumber?: Maybe<Scalars['String']>;
  originalAchEntry: Scalars['String'];
  rdfiIdentification?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  secCode?: Maybe<Scalars['String']>;
  transactionCode?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<GqlGoogleProtobufTimestamp>;
};

export type GqlAchReturnV2 = {
  __typename?: 'AchReturnV2';
  achEntryId?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<GqlGoogleProtobufTimestamp>;
  id?: Maybe<Scalars['String']>;
  originalTraceNumber?: Maybe<Scalars['String']>;
  originalTransactionDate?: Maybe<GqlGoogleProtobufTimestamp>;
  receiverName?: Maybe<Scalars['String']>;
  retailerName?: Maybe<Scalars['String']>;
  returnTraceNumber?: Maybe<Scalars['String']>;
  returnedAt?: Maybe<GqlGoogleProtobufTimestamp>;
  updatedAt?: Maybe<GqlGoogleProtobufTimestamp>;
};

export type GqlAchReturnV4 = {
  __typename?: 'AchReturnV4';
  achEntryId?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<GqlGoogleProtobufTimestamp>;
  fileName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  originalTraceNumber?: Maybe<Scalars['String']>;
  originalTransactionDate?: Maybe<GqlGoogleProtobufTimestamp>;
  receiverName?: Maybe<Scalars['String']>;
  retailerName?: Maybe<Scalars['String']>;
  returnCode?: Maybe<Scalars['String']>;
  returnTraceNumber?: Maybe<Scalars['String']>;
  returnedAt?: Maybe<GqlGoogleProtobufTimestamp>;
  updatedAt?: Maybe<GqlGoogleProtobufTimestamp>;
};

export type GqlAchReturnV5 = {
  __typename?: 'AchReturnV5';
  amount?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<GqlGoogleProtobufTimestamp>;
  fileName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  originalTraceNumber?: Maybe<Scalars['String']>;
  originalTransactionDate?: Maybe<GqlGoogleProtobufTimestamp>;
  receiverName?: Maybe<Scalars['String']>;
  retailerName?: Maybe<Scalars['String']>;
  returnCode?: Maybe<Scalars['String']>;
  returnTraceNumber?: Maybe<Scalars['String']>;
  returnedAt?: Maybe<GqlGoogleProtobufTimestamp>;
  returnedSourceId?: Maybe<Scalars['String']>;
  returnedSourceType?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<GqlGoogleProtobufTimestamp>;
};

export type GqlAchReversal = {
  __typename?: 'AchReversal';
  achEntryId: Scalars['String'];
  amount?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<GqlGoogleProtobufTimestamp>;
  id: Scalars['String'];
  identificationNumber?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  retailerName?: Maybe<Scalars['String']>;
  returnedAt?: Maybe<GqlGoogleProtobufTimestamp>;
  state?: Maybe<Scalars['String']>;
  successfulAt?: Maybe<GqlGoogleProtobufTimestamp>;
  traceNumber?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<GqlGoogleProtobufTimestamp>;
};

export type GqlActionEstimates = {
  __typename?: 'ActionEstimates';
  delivery?: Maybe<GqlActionEstimatesValues>;
  pickup?: Maybe<GqlActionEstimatesValues>;
};

export type GqlActionEstimatesValues = {
  __typename?: 'ActionEstimatesValues';
  deliveryTimeInMinutes?: Maybe<Scalars['Float']>;
  rangeInMinutes?: Maybe<Scalars['Int']>;
  readyInMinutes?: Maybe<Scalars['Float']>;
};

export type GqlActivateBankAccountResponse = {
  __typename?: 'ActivateBankAccountResponse';
  success?: Maybe<Scalars['Boolean']>;
};

export type GqlActiveDispenariesResult = {
  __typename?: 'ActiveDispenariesResult';
  dispensaries?: Maybe<Array<Maybe<GqlActiveDispensaries>>>;
  meta?: Maybe<GqlActiveDispensariesMeta>;
};

export type GqlActiveDispensaries = {
  __typename?: 'ActiveDispensaries';
  _id?: Maybe<Scalars['String']>;
  devices?: Maybe<Array<Maybe<GqlDevices>>>;
  integration?: Maybe<GqlActiveDispensariesIntegration>;
  profile?: Maybe<GqlActiveDispensariesProfile>;
};

export type GqlActiveDispensariesIntegration = {
  __typename?: 'ActiveDispensariesIntegration';
  adapter?: Maybe<Scalars['String']>;
  /** @deprecated Use ISO field */
  lastSyncAt?: Maybe<Scalars['String']>;
  lastSyncAtISO?: Maybe<Scalars['ISODateTime']>;
};

export type GqlActiveDispensariesMeta = {
  __typename?: 'ActiveDispensariesMeta';
  accountExecutives?: Maybe<Array<Maybe<GqlDispensaryAccountManagers>>>;
  allStates?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerSuccessManagers?: Maybe<Array<Maybe<GqlDispensaryAccountManagers>>>;
};

export type GqlActiveDispensariesProfile = {
  __typename?: 'ActiveDispensariesProfile';
  cName?: Maybe<Scalars['String']>;
  chain?: Maybe<Scalars['String']>;
  connectedProductPercentage?: Maybe<Scalars['Float']>;
  embeddedPageViews?: Maybe<Scalars['Int']>;
  hideFromCCT?: Maybe<Scalars['Boolean']>;
  lastThirtyDaysSales?: Maybe<Scalars['Float']>;
  menuScore?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type GqlAdminOrderListType = {
  __typename?: 'AdminOrderListType';
  orders?: Maybe<Array<Maybe<GqlAdminOrderType>>>;
  queryInfo?: Maybe<GqlQueryInfoType>;
};

export type GqlAdminOrderType = {
  __typename?: 'AdminOrderType';
  _id: Scalars['String'];
  createdAt?: Maybe<Scalars['ISODateTime']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  customerName?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  delivery?: Maybe<Scalars['Boolean']>;
  deliveryEstimate?: Maybe<Scalars['String']>;
  deliveryInfo?: Maybe<GqlOrders_DeliveryInfo>;
  deliveryOption?: Maybe<Scalars['Boolean']>;
  dispensaryId?: Maybe<Scalars['String']>;
  dispensaryName?: Maybe<Scalars['String']>;
  dispoTimezone?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Float']>;
  durationEstimates?: Maybe<GqlDurationEstimates>;
  effectiveStatus?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fleetManagementTask?: Maybe<GqlOrders_FleetManagementTask>;
  hypur?: Maybe<GqlHypurDetails>;
  isAfterHoursOrder?: Maybe<Scalars['Boolean']>;
  isAnonymous?: Maybe<Scalars['Boolean']>;
  isKioskOrder?: Maybe<Scalars['Boolean']>;
  isScheduledOrder?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  moneris?: Maybe<Array<Maybe<GqlMonerisDetails>>>;
  onfleetTask?: Maybe<GqlOrders_FleetManagementTask>;
  orderId?: Maybe<Scalars['String']>;
  orderNumber?: Maybe<Scalars['String']>;
  orderType?: Maybe<Scalars['String']>;
  payments?: Maybe<Array<Maybe<GqlPaymentDetails>>>;
  paysafe?: Maybe<GqlPaysafeDetails>;
  pos?: Maybe<GqlOrders_Pos>;
  reopened?: Maybe<Scalars['Boolean']>;
  reservation?: Maybe<GqlOrderReservation>;
  status?: Maybe<Scalars['String']>;
  totalCost?: Maybe<Scalars['Float']>;
};

export type GqlAgeVerification = {
  __typename?: 'AgeVerification';
  isAgeVerified: Scalars['Boolean'];
};

export type GqlAnalyticsInput = {
  chainId?: Maybe<Scalars['String']>;
  clientTimezone?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  endDate: Scalars['String'];
  prevEndDate?: Maybe<Scalars['String']>;
  prevStartDate?: Maybe<Scalars['String']>;
  startDate: Scalars['String'];
};

export type GqlAnalyticsMeta = {
  __typename?: 'AnalyticsMeta';
  count?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type GqlAnalyticsOrdersByDate = {
  __typename?: 'AnalyticsOrdersByDate';
  date?: Maybe<Scalars['String']>;
  totalOrders?: Maybe<Scalars['Int']>;
  totalSales?: Maybe<Scalars['Float']>;
};

export type GqlAnalyticsPagination = {
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};

export type GqlAnalyticsSort = {
  sortBy?: Maybe<Scalars['String']>;
  sortDirection?: Maybe<Scalars['Int']>;
};

export type GqlApplicableCategoryInput = {
  category?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
};

export type GqlApplicationRule = {
  __typename?: 'ApplicationRule';
  applicationType?: Maybe<ApplicationType>;
  comparisonOperator?: Maybe<ComparisonOperators>;
  quantity?: Maybe<Scalars['Int']>;
};

export type GqlApplicationRuleInput = {
  applicationType?: Maybe<ApplicationType>;
  comparisonOperator?: Maybe<ComparisonOperators>;
  quantity?: Maybe<Scalars['Int']>;
};

export enum ApplicationScope {
  all = 'ALL',
  each = 'EACH'
}

export enum ApplicationType {
  quantity = 'QUANTITY',
  totalQuantity = 'TOTAL_QUANTITY'
}

export type GqlAssessment = {
  __typename?: 'Assessment';
  createdAt: GqlGoogleProtobufTimestamp;
  decision: Scalars['String'];
  externalId: Scalars['String'];
  externalType: Scalars['String'];
  score: Scalars['Float'];
  transactionId: Scalars['String'];
  transactionType: Scalars['String'];
};

export enum AuthRoles {
  chain = 'chain',
  dispensaryAdmin = 'dispensaryAdmin',
  super = 'super',
  terminal = 'terminal'
}

export type GqlBankAccount = {
  __typename?: 'BankAccount';
  bankAccount?: Maybe<GqlBankDetails>;
  billingAddress?: Maybe<GqlBillingAddress>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  entityId?: Maybe<Scalars['String']>;
  entityType?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlBankAccounts = {
  __typename?: 'BankAccounts';
  bankAccounts?: Maybe<Array<GqlBankAccount>>;
};

export type GqlBankDetails = {
  __typename?: 'BankDetails';
  accountAlias?: Maybe<Scalars['String']>;
  bankName: Scalars['String'];
  lastDigits: Scalars['String'];
  linked?: Maybe<Scalars['Boolean']>;
  ownerName?: Maybe<Array<Scalars['String']>>;
};

export type GqlBaseOrderingSettings = {
  enableASAPOrdering?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrdering?: Maybe<Scalars['Boolean']>;
  enableScheduledOrdering?: Maybe<Scalars['Boolean']>;
  paymentTypes?: Maybe<GqlPaymentTypesConfig>;
  /** @deprecated replaced by v2 to remove slots from type - RTL 8/9/21 */
  scheduledOrderingConfig?: Maybe<GqlReservationOptionsForOrderType>;
  scheduledOrderingConfigV2?: Maybe<GqlScheduledOrderingConfigV2>;
};

export type GqlBasicAnalyticsInput = {
  chainId?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  endDate: Scalars['String'];
  prevEndDate?: Maybe<Scalars['String']>;
  prevStartDate?: Maybe<Scalars['String']>;
  startDate: Scalars['String'];
};

export type GqlBasicSettingsInput = {
  enableASAPOrdering?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrdering?: Maybe<Scalars['Boolean']>;
  enableScheduledOrdering?: Maybe<Scalars['Boolean']>;
  orderMinimum?: Maybe<GqlOrderMinimumInput>;
  paymentTypes?: Maybe<GqlDispensaryUpdatePaymentTypeConfig>;
  scheduledOrderingConfig?: Maybe<GqlReservationOptionsForOrderTypeInput>;
};

export type GqlBillingAddress = {
  __typename?: 'BillingAddress';
  city: Scalars['String'];
  country: Scalars['String'];
  createdAt?: Maybe<GqlGoogleProtobufTimestamp>;
  id: Scalars['String'];
  latitude?: Maybe<Scalars['Float']>;
  line1: Scalars['String'];
  line2?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['Float']>;
  postalCode: Scalars['String'];
  state: Scalars['String'];
  status: Scalars['String'];
};

export type GqlBillingAddressInput = {
  city: Scalars['String'];
  country: Scalars['String'];
  latitude?: Maybe<Scalars['Float']>;
  line1: Scalars['String'];
  line2?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['Float']>;
  postalCode: Scalars['String'];
  state: Scalars['String'];
  status: Scalars['String'];
};

export enum BillingPeriod {
  annual = 'annual',
  monthly = 'monthly',
  quarterly = 'quarterly'
}

export type GqlBillingSubscription = {
  __typename?: 'BillingSubscription';
  chargebeePlan: GqlChargebeePlan;
  chargebeeSubscription?: Maybe<GqlChargebeeSubscription>;
  chargebeeSubscriptionId?: Maybe<Scalars['String']>;
  dispensaryBilling?: Maybe<GqlDispensaryBilling>;
  dispensaryBillingId?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  manualPayments?: Maybe<Scalars['Boolean']>;
};

export type GqlBogoConditionItem = {
  __typename?: 'BogoConditionItem';
  _id?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  categoryName?: Maybe<Scalars['String']>;
  productGroup?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  selectedCategoriesAndSubcategories?: Maybe<Array<Maybe<Scalars['String']>>>;
  weight?: Maybe<Scalars['String']>;
  weightOperator?: Maybe<ComparisonOperators>;
};

export type GqlBogoConditionItemInput = {
  _id?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  categoryName?: Maybe<Scalars['String']>;
  productGroup?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  selectedCategoriesAndSubcategories?: Maybe<Array<Maybe<Scalars['String']>>>;
  weight?: Maybe<Scalars['String']>;
  weightOperator?: Maybe<ComparisonOperators>;
};

export type GqlBogoRewardItem = {
  __typename?: 'BogoRewardItem';
  _id?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  categoryName?: Maybe<Scalars['String']>;
  dollarDiscount?: Maybe<Scalars['String']>;
  percentDiscount?: Maybe<Scalars['String']>;
  productGroup?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  selectedCategoriesAndSubcategories?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetPrice?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
};

export type GqlBogoRewardItemInput = {
  _id?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  categoryName?: Maybe<Scalars['String']>;
  dollarDiscount?: Maybe<Scalars['String']>;
  percentDiscount?: Maybe<Scalars['String']>;
  productGroup?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  selectedCategoriesAndSubcategories?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetPrice?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
};

export type GqlBrand = {
  __typename?: 'Brand';
  /** @deprecated Use id */
  _id: Scalars['ID'];
  aliasList: Array<Maybe<Scalars['String']>>;
  brandCollisions?: Maybe<Array<Maybe<GqlBrandCollision>>>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  creatorUserId?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  dispensary?: Maybe<GqlDispensaries>;
  dispensaryId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  imageUrl?: Maybe<Scalars['String']>;
  isGlobal: Scalars['Boolean'];
  libraryProductsCount: Scalars['Int'];
  name: Scalars['String'];
  parentBrand?: Maybe<GqlBrand>;
  parentBrandId?: Maybe<Scalars['ID']>;
  productsCount: Scalars['Int'];
  regions?: Maybe<Array<Scalars['String']>>;
  source?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISODateTime']>;
};

export type GqlBrandCollision = {
  __typename?: 'BrandCollision';
  createdAt?: Maybe<Scalars['ISODateTime']>;
  firstBrand: GqlBrand;
  id: Scalars['ID'];
  isAllowed: Scalars['Boolean'];
  secondBrand: GqlBrand;
};

export type GqlBrandList = {
  __typename?: 'BrandList';
  brands: Array<Maybe<GqlBrand>>;
  queryInfo?: Maybe<GqlQueryInfoType>;
};

export enum BrandMergeHistoriesSortByEnum {
  createdAt = 'createdAt',
  revertedAt = 'revertedAt'
}

export type GqlBrandMergeHistory = {
  __typename?: 'BrandMergeHistory';
  createdAt: Scalars['ISODateTime'];
  destinationBrand: GqlBrand;
  destinationBrandId: Scalars['ID'];
  id: Scalars['ID'];
  revertedAt?: Maybe<Scalars['ISODateTime']>;
  sourceBrand: GqlBrand;
  sourceBrandId: Scalars['ID'];
  user?: Maybe<GqlUsers>;
  userId: Scalars['ID'];
};

export type GqlBrandMergeHistoryList = {
  __typename?: 'BrandMergeHistoryList';
  brandMergeHistories: Array<Maybe<GqlBrandMergeHistory>>;
  queryInfo?: Maybe<GqlQueryInfoType>;
};

export enum BrandPortalProductSearchApprovalStatusFilterEnum {
  approved = 'approved',
  draft = 'draft',
  inReview = 'in_review',
  pending = 'pending',
  rejected = 'rejected'
}

export type GqlBrandPortalProductSearchResponse = {
  __typename?: 'BrandPortalProductSearchResponse';
  libraryProducts?: Maybe<Array<Maybe<GqlBrandPortalProductSearchResult>>>;
  meta?: Maybe<GqlQueryInfoType>;
};

export type GqlBrandPortalProductSearchResult = {
  __typename?: 'BrandPortalProductSearchResult';
  approvalStatus?: Maybe<Scalars['String']>;
  brand?: Maybe<GqlBrand>;
  brandId: Scalars['ID'];
  category: Scalars['String'];
  complianceRegionId: Scalars['ID'];
  createdAt: Scalars['ISODateTime'];
  id: Scalars['ID'];
  menuScore?: Maybe<Scalars['Float']>;
  modelName: Scalars['String'];
  name: Scalars['String'];
};

export enum BrandPortalProductSearchSortByEnum {
  createdAt = 'createdAt',
  name = 'name'
}

export enum BrandSortByEnum {
  description = 'description',
  dispensary = 'dispensary',
  imageUrl = 'imageUrl',
  name = 'name',
  productsCount = 'productsCount',
  score = 'score',
  updatedAt = 'updatedAt'
}

export type GqlBrandSummary = {
  __typename?: 'BrandSummary';
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  centsChange?: Maybe<Scalars['Float']>;
  dispensaryId?: Maybe<Scalars['String']>;
  numProducts?: Maybe<Scalars['Int']>;
  percentChange?: Maybe<Scalars['Float']>;
  percentSales?: Maybe<Scalars['Float']>;
  totalSalesCents?: Maybe<Scalars['Float']>;
};

export type GqlBrandUser = {
  __typename?: 'BrandUser';
  authorizedBrandIds: Array<Scalars['String']>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  emails: Array<GqlUserEmails>;
  id: Scalars['ID'];
  profile?: Maybe<GqlBrandUserProfile>;
};

export type GqlBrandUserAccount = {
  __typename?: 'BrandUserAccount';
  accessToken?: Maybe<Scalars['String']>;
  emails: Array<GqlUserEmails>;
  id: Scalars['ID'];
  profile?: Maybe<GqlBrandUserProfile>;
};

export type GqlBrandUserList = {
  __typename?: 'BrandUserList';
  brandUsers: Array<GqlBrandUser>;
  meta?: Maybe<GqlMeta>;
};

export type GqlBrandUserPermissions = {
  __typename?: 'BrandUserPermissions';
  manageBrandGroup: Scalars['Boolean'];
  manageBrands: Scalars['Boolean'];
};

export type GqlBrandUserProfile = {
  __typename?: 'BrandUserProfile';
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  parentBrand: GqlBrand;
  parentBrandId: Scalars['ID'];
  permissions?: Maybe<GqlBrandUserPermissions>;
  phone?: Maybe<Scalars['String']>;
};

export enum BrandUsersSortBy {
  createdAt = 'created_at'
}

export type GqlBrandsSummaryInput = {
  brand?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  chainId?: Maybe<Scalars['String']>;
  clientTimezone?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['String']>;
  prevEndDate?: Maybe<Scalars['String']>;
  prevStartDate?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['String']>;
};

export type GqlBucket = {
  __typename?: 'Bucket';
  checkedOutAt?: Maybe<Scalars['ISODateTime']>;
  checkedOutBy?: Maybe<GqlUsers>;
  completedReviewsCount?: Maybe<Scalars['Int']>;
  createdAt: Scalars['ISODateTime'];
  createdBy?: Maybe<GqlUsers>;
  filters?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  products: Array<Maybe<GqlProducts>>;
  productsCount: Scalars['Int'];
  teamName: Scalars['String'];
  updatedAt: Scalars['ISODateTime'];
};

export type GqlBucketProduct = {
  __typename?: 'BucketProduct';
  bucketId?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  oldProductData?: Maybe<GqlOldProductData>;
  product?: Maybe<GqlProducts>;
  productId?: Maybe<Scalars['ID']>;
  review?: Maybe<Scalars['String']>;
  reviewedAt?: Maybe<Scalars['String']>;
  reviewedBy?: Maybe<Scalars['ID']>;
  reviewedByUser?: Maybe<GqlUsers>;
  updatedAt?: Maybe<Scalars['String']>;
  verified?: Maybe<Scalars['Boolean']>;
};

export type GqlBucketV2 = {
  __typename?: 'BucketV2';
  checkedOutAt?: Maybe<Scalars['ISODateTime']>;
  checkedOutBy?: Maybe<GqlUsers>;
  completedReviewsCount?: Maybe<Scalars['Int']>;
  createdAt: Scalars['ISODateTime'];
  createdBy?: Maybe<GqlUsers>;
  filters?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  productIds: Array<Maybe<Scalars['String']>>;
  productsCount: Scalars['Int'];
  teamName: Scalars['String'];
  updatedAt: Scalars['ISODateTime'];
};

export type GqlBulkLibraryProductStatusUpdateMeta = {
  __typename?: 'BulkLibraryProductStatusUpdateMeta';
  status?: Maybe<Scalars['String']>;
};

export type GqlBulkLibraryProductStatusUpdateResponse = {
  __typename?: 'BulkLibraryProductStatusUpdateResponse';
  meta?: Maybe<GqlBulkLibraryProductStatusUpdateMeta>;
};

export type GqlBulkLibraryProductUpdateMeta = {
  __typename?: 'BulkLibraryProductUpdateMeta';
  jobId?: Maybe<Scalars['String']>;
  statusPath?: Maybe<Scalars['String']>;
};

export type GqlBulkLibraryProductUpdateResponse = {
  __typename?: 'BulkLibraryProductUpdateResponse';
  meta?: Maybe<GqlBulkLibraryProductUpdateMeta>;
};

export type GqlBulkLibraryProductUpdates = {
  brandId?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlBulkLibraryProductUploadError = {
  __typename?: 'BulkLibraryProductUploadError';
  message: Scalars['String'];
  row: Scalars['Int'];
};

export enum BulkLibraryProductUploadJobStatus {
  complete = 'complete',
  error = 'error',
  pending = 'pending',
  processing = 'processing'
}

export type GqlBulkLibraryProductUploadMetadata = {
  __typename?: 'BulkLibraryProductUploadMetadata';
  errorCount?: Maybe<Scalars['Int']>;
  successCount?: Maybe<Scalars['Int']>;
};

export type GqlBulkLibraryProductUploadResponse = {
  __typename?: 'BulkLibraryProductUploadResponse';
  jobStatusId: Scalars['ID'];
};

export type GqlBulkLibraryProductUploadStatusResponse = {
  __typename?: 'BulkLibraryProductUploadStatusResponse';
  errors?: Maybe<Array<GqlBulkLibraryProductUploadError>>;
  id: Scalars['ID'];
  metadata?: Maybe<GqlBulkLibraryProductUploadMetadata>;
  status: BulkLibraryProductUploadJobStatus;
  userId: Scalars['ID'];
};

/** Individual Product with buying data for delivery/pickup */
export type GqlBuyingOption = {
  __typename?: 'BuyingOption';
  delivery?: Maybe<GqlDurationEstimateRange>;
  distance?: Maybe<Scalars['String']>;
  pickup?: Maybe<GqlDurationEstimateRange>;
  product: GqlProducts;
};

export enum CacheControlScope {
  private = 'PRIVATE',
  public = 'PUBLIC'
}

export type GqlCampaignSummary = {
  __typename?: 'CampaignSummary';
  averageOrderValue?: Maybe<Scalars['Float']>;
  averageOrderValueChangePercentage?: Maybe<Scalars['Float']>;
  conversionPercentage?: Maybe<Scalars['Float']>;
  conversionPercentageUnitChange?: Maybe<Scalars['Float']>;
  totalSales?: Maybe<Scalars['Float']>;
  utmCampaign?: Maybe<Scalars['String']>;
  utmMedium?: Maybe<Scalars['String']>;
  utmSource?: Maybe<Scalars['String']>;
};

export type GqlCannabinoid = {
  __typename?: 'Cannabinoid';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
};

/** Major type of cannabis for a product */
export enum CannabisType {
  highCbd = 'HIGH_CBD',
  hybrid = 'HYBRID',
  indica = 'INDICA',
  nA = 'N_A',
  sativa = 'SATIVA',
  seed = 'SEED'
}

export type GqlCardInfo = {
  __typename?: 'CardInfo';
  brand?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
};

export type GqlCartSummary = {
  __typename?: 'CartSummary';
  createdAt: Scalars['ISODateTime'];
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  lastName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  valueInCents: Scalars['Float'];
};

export enum Categories {
  accessories = 'ACCESSORIES',
  apparel = 'APPAREL',
  cbd = 'CBD',
  clones = 'CLONES',
  concentrate = 'CONCENTRATE',
  edible = 'EDIBLE',
  flower = 'FLOWER',
  /** Pain - should really be PRE-ROLLS */
  prerolls = 'PREROLLS',
  seeds = 'SEEDS',
  tincture = 'TINCTURE',
  topicals = 'TOPICALS',
  vaporizers = 'VAPORIZERS'
}

export type GqlCategoryLineItem = {
  __typename?: 'CategoryLineItem';
  categoryOption?: Maybe<Scalars['String']>;
  percentOfTotal?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  productType?: Maybe<Scalars['String']>;
  totalSales?: Maybe<Scalars['Float']>;
};

export type GqlCategoryPhoto = {
  __typename?: 'CategoryPhoto';
  category?: Maybe<Scalars['String']>;
  src?: Maybe<Scalars['String']>;
};

export type GqlCategorySubcategories = {
  __typename?: 'CategorySubcategories';
  category: Scalars['String'];
  subcategories: Array<Scalars['String']>;
};

export type GqlCategorySummary = {
  __typename?: 'CategorySummary';
  category?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
};

export type GqlChain = {
  __typename?: 'Chain';
  chainId?: Maybe<Scalars['String']>;
  dispensaryCount?: Maybe<Scalars['Int']>;
  dispensaryIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastThirtyDaysSales?: Maybe<Scalars['Float']>;
};

export type GqlChainDropdownOption = {
  __typename?: 'ChainDropdownOption';
  key?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlChainFilterInput = {
  searchStr?: Maybe<Scalars['String']>;
};

export type GqlChainList = {
  __typename?: 'ChainList';
  chains?: Maybe<Array<Maybe<GqlChain>>>;
  queryInfo?: Maybe<GqlQueryInfoType>;
};

export type GqlChainPaginationInput = {
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};

export type GqlChainSortInput = {
  sortBy: Scalars['String'];
  sortDirection: Scalars['String'];
};

export type GqlChangeHistoryObject = {
  __typename?: 'ChangeHistoryObject';
  date?: Maybe<Scalars['String']>;
  totalSales?: Maybe<Scalars['Float']>;
};

export enum ChangeRequestActionType {
  createBrand = 'create_brand',
  createProduct = 'create_product',
  deleteProduct = 'delete_product',
  updateBrand = 'update_brand',
  updateProduct = 'update_product'
}

export enum ChannelSources {
  embedded = 'EMBEDDED',
  kiosk = 'KIOSK',
  main = 'MAIN',
  retailerMobile = 'RETAILER_MOBILE'
}

export type GqlChargeBeeHostedPage = {
  __typename?: 'ChargeBeeHostedPage';
  createdAt?: Maybe<Scalars['String']>;
  embed?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  object?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type GqlChargebeeCard = {
  __typename?: 'ChargebeeCard';
  brand?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
};

export type GqlChargebeeContact = {
  __typename?: 'ChargebeeContact';
  email?: Maybe<Scalars['String']>;
  sendBillingEmail?: Maybe<Scalars['Boolean']>;
};

export type GqlChargebeeCustomer = {
  __typename?: 'ChargebeeCustomer';
  company?: Maybe<Scalars['String']>;
  contacts?: Maybe<Array<Maybe<GqlChargebeeContact>>>;
  id?: Maybe<Scalars['ID']>;
  locationCount?: Maybe<Scalars['Int']>;
};

export type GqlChargebeeDownload = {
  __typename?: 'ChargebeeDownload';
  downloadUrl: Scalars['String'];
  object: Scalars['String'];
  validTill: Scalars['Int'];
};

export type GqlChargebeeLineItem = {
  __typename?: 'ChargebeeLineItem';
  amount?: Maybe<Scalars['Int']>;
  dateFrom?: Maybe<Scalars['Int']>;
  dateTo?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
};

export type GqlChargebeePaymentSource = {
  __typename?: 'ChargebeePaymentSource';
  card?: Maybe<GqlChargebeeCard>;
  customerId?: Maybe<Scalars['String']>;
  gateway?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlChargebeePlan = {
  __typename?: 'ChargebeePlan';
  period: Scalars['Int'];
  periodUnit: Scalars['String'];
};

export type GqlChargebeeSubscription = {
  __typename?: 'ChargebeeSubscription';
  activatedAt?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Int']>;
  currentTermEnd?: Maybe<Scalars['Int']>;
  currentTermStart?: Maybe<Scalars['Int']>;
  invoices?: Maybe<Array<Maybe<GqlInvoice>>>;
  nextBillingAt?: Maybe<Scalars['Int']>;
  planAmount?: Maybe<Scalars['Int']>;
  startedAt?: Maybe<Scalars['Int']>;
  status: Scalars['String'];
  trialEnd?: Maybe<Scalars['Int']>;
  trialStart?: Maybe<Scalars['Int']>;
};

export type GqlChargebeeSubscriptionV2 = {
  __typename?: 'ChargebeeSubscriptionV2';
  activatedAt?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Int']>;
  currentTermEnd?: Maybe<Scalars['Int']>;
  currentTermStart?: Maybe<Scalars['Int']>;
  invoices?: Maybe<Array<GqlInvoice>>;
  nextBillingAt?: Maybe<Scalars['Int']>;
  planAmount?: Maybe<Scalars['Int']>;
  planId?: Maybe<Scalars['String']>;
  retailerId?: Maybe<Scalars['ID']>;
  startedAt?: Maybe<Scalars['Int']>;
  status: Scalars['String'];
  trialEnd?: Maybe<Scalars['Int']>;
  trialStart?: Maybe<Scalars['Int']>;
};

export type GqlChaseHostedProfileCredentials = GqlCheckoutCredentialsBase & {
  __typename?: 'ChaseHostedProfileCredentials';
  adapter: Scalars['String'];
  uID: Scalars['String'];
};

export type GqlCheckout = {
  __typename?: 'Checkout';
  address?: Maybe<GqlCheckoutAddress>;
  dispensaryId: Scalars['String'];
  id: Scalars['ID'];
  items: Array<GqlCheckoutItem>;
  orderType: Scalars['String'];
  pricingType: Scalars['String'];
};

export type GqlCheckoutAddress = {
  __typename?: 'CheckoutAddress';
  city?: Maybe<Scalars['String']>;
  deliverable: Scalars['Boolean'];
  formatted?: Maybe<Scalars['String']>;
  geometry?: Maybe<GqlCheckoutAddressGeometry>;
  state?: Maybe<Scalars['String']>;
  street1?: Maybe<Scalars['String']>;
  street2?: Maybe<Scalars['String']>;
  valid: Scalars['Boolean'];
  zip?: Maybe<Scalars['String']>;
};

export type GqlCheckoutAddressGeometry = {
  __typename?: 'CheckoutAddressGeometry';
  coordinates?: Maybe<Array<Scalars['Float']>>;
  type?: Maybe<Scalars['String']>;
};

export type GqlCheckoutCredentialsBase = {
  adapter: Scalars['String'];
};

export type GqlCheckoutItem = {
  __typename?: 'CheckoutItem';
  checkoutId: Scalars['String'];
  id: Scalars['ID'];
  option: Scalars['String'];
  product?: Maybe<GqlProducts>;
  productId: Scalars['String'];
  quantity: Scalars['Int'];
};

export type GqlColorSettings = {
  __typename?: 'ColorSettings';
  linkColor?: Maybe<Scalars['String']>;
  navBarColor?: Maybe<Scalars['String']>;
};

export type GqlColorSettingsInputV2 = {
  linkColor: LinkColor;
  navBarColor: NavBarColor;
};

export type GqlColorSettingsV2 = {
  __typename?: 'ColorSettingsV2';
  linkColor: LinkColor;
  navBarColor: NavBarColor;
};

export enum ComparisonOperators {
  between = 'between',
  equalTo = 'equalTo',
  greaterThan = 'greaterThan',
  greaterThanEqualTo = 'greaterThanEqualTo',
  lessThan = 'lessThan',
  lessThanEqualTo = 'lessThanEqualTo'
}

export type GqlComplianceCategoryLimits = {
  __typename?: 'ComplianceCategoryLimits';
  category: Scalars['String'];
  med?: Maybe<Scalars['Float']>;
  rec?: Maybe<Scalars['Float']>;
};

export type GqlComplianceConfig = {
  __typename?: 'ComplianceConfig';
  defaultWeights: Array<GqlComplianceDefaultWeight>;
  deliveryAvailable: Scalars['Boolean'];
  id: Scalars['ID'];
  isolatedMenus: Scalars['Boolean'];
  limitedStateReciprocity: Scalars['Boolean'];
  limits: GqlComplianceLimits;
  medCardLimitedReciprocity: Array<Scalars['String']>;
  medCardReciprocity: Scalars['Boolean'];
  medSubjectToExciseTax: Scalars['Boolean'];
  minAgeMed: Scalars['Int'];
  minAgeRec: Scalars['Int'];
  oneDeliveryPerDispoPerDay: Scalars['Boolean'];
  outOfStateLimits?: Maybe<GqlComplianceLimits>;
  residentialDeliveryOnly: Scalars['Boolean'];
  restrictions: GqlComplianceRestrictions;
};

export type GqlComplianceDefaultWeight = {
  __typename?: 'ComplianceDefaultWeight';
  category: Scalars['String'];
  value: Scalars['Float'];
};

export type GqlComplianceLimits = {
  __typename?: 'ComplianceLimits';
  categoryLimits: Array<GqlComplianceCategoryLimits>;
  liquidEdibleCategories: Array<Scalars['String']>;
  liquidEdibleSubcategories: Array<Scalars['String']>;
  medUsesEquivalencyCalculator?: Maybe<Scalars['Boolean']>;
  message?: Maybe<Scalars['String']>;
  multipliers: Array<GqlComplianceMultiplier>;
  typeMaps: Array<GqlComplianceTypeMap>;
  usesEquivalencyCalculator?: Maybe<Scalars['Boolean']>;
};

export type GqlComplianceMultiplier = {
  __typename?: 'ComplianceMultiplier';
  category: Scalars['String'];
  med?: Maybe<Scalars['Float']>;
  rec?: Maybe<Scalars['Float']>;
};

export type GqlComplianceRestrictions = {
  __typename?: 'ComplianceRestrictions';
  effects: Array<Scalars['String']>;
};

export type GqlComplianceTypeMap = {
  __typename?: 'ComplianceTypeMap';
  categories: Array<Scalars['String']>;
  category: Scalars['String'];
  excludeCategories: Array<Scalars['String']>;
  excludeSubcategories: Array<Scalars['String']>;
  subcategories: Array<Scalars['String']>;
};

export enum ConditionType {
  item = 'ITEM',
  quantity = 'QUANTITY',
  spend = 'SPEND',
  weight = 'WEIGHT'
}

export type GqlConnectProductPreviewResponse = {
  __typename?: 'ConnectProductPreviewResponse';
  previewProduct: GqlPreviewProduct;
};

export type GqlConsumerDispensaryIntegrations = {
  __typename?: 'ConsumerDispensaryIntegrations';
  alpineiq?: Maybe<GqlDispensaries_Integrations>;
  fyllo?: Maybe<GqlDispensaries_Integrations>;
  springbig?: Maybe<GqlDispensaries_Integrations>;
  sprout?: Maybe<GqlDispensaries_Integrations>;
};

export type GqlConsumerStreamCredentials = {
  __typename?: 'ConsumerStreamCredentials';
  id?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

export type GqlConsumerUser = {
  __typename?: 'ConsumerUser';
  _id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  customers?: Maybe<Array<Maybe<GqlCustomers>>>;
  email?: Maybe<Scalars['String']>;
  profile?: Maybe<GqlConsumerUserProfile>;
};

export type GqlContactCrmProperty = GqlCrmProperty & {
  __typename?: 'ContactCrmProperty';
  id?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlContactType = {
  __typename?: 'ContactType';
  email?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
};

export type GqlContactUs = {
  __typename?: 'ContactUs';
  companyName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type GqlContentChangeRequestAttributes = {
  __typename?: 'ContentChangeRequestAttributes';
  brandId?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  cbdContent?: Maybe<GqlContentChangeRequestPotency>;
  connectedCount?: Maybe<Scalars['Int']>;
  description: Scalars['String'];
  effects?: Maybe<Scalars['JSON']>;
  image?: Maybe<Scalars['String']>;
  medicalOnly?: Maybe<Scalars['Boolean']>;
  menu_score?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  recOnly?: Maybe<Scalars['Boolean']>;
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  thcContent?: Maybe<GqlContentChangeRequestPotency>;
};

export type GqlContentChangeRequestComputedAttributes = {
  __typename?: 'ContentChangeRequestComputedAttributes';
  actionType?: Maybe<ChangeRequestActionType>;
  approvalStatus?: Maybe<Scalars['String']>;
  authorId?: Maybe<Scalars['ID']>;
  brandId?: Maybe<Scalars['ID']>;
  brandName?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  complianceRegionId?: Maybe<Scalars['String']>;
  connectedCount?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  reviewerId?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['Float']>;
  state?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
};

export type GqlContentChangeRequestFilters = {
  brandIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<Scalars['String']>;
  search?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type GqlContentChangeRequestMeta = {
  __typename?: 'ContentChangeRequestMeta';
  filters?: Maybe<GqlContentChangeRequestMetaFilters>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type GqlContentChangeRequestMetaFilterNumber = {
  __typename?: 'ContentChangeRequestMetaFilterNumber';
  label?: Maybe<Scalars['Float']>;
  value?: Maybe<Scalars['Float']>;
};

export type GqlContentChangeRequestMetaFilterText = {
  __typename?: 'ContentChangeRequestMetaFilterText';
  label?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlContentChangeRequestMetaFilters = {
  __typename?: 'ContentChangeRequestMetaFilters';
  approvalStatus?: Maybe<Array<Maybe<GqlContentChangeRequestMetaFilterText>>>;
  brand?: Maybe<Array<Maybe<GqlContentChangeRequestMetaFilterText>>>;
  score?: Maybe<Array<Maybe<GqlContentChangeRequestMetaFilterNumber>>>;
  state?: Maybe<Array<Maybe<GqlContentChangeRequestMetaFilterText>>>;
};

export type GqlContentChangeRequestPotency = {
  __typename?: 'ContentChangeRequestPotency';
  range?: Maybe<Array<Maybe<Scalars['Float']>>>;
  unit?: Maybe<Scalars['String']>;
};

export type GqlContentChangeRequestSort = {
  sortBy: ContentChangeRequestSortByEnum;
  sortDirection: StringSortDirections;
};

export enum ContentChangeRequestSortByEnum {
  approvalStatus = 'approvalStatus',
  brandName = 'brandName',
  category = 'category',
  connectedCount = 'connectedCount',
  createdAt = 'createdAt',
  createdBy = 'createdBy',
  description = 'description',
  name = 'name',
  productName = 'productName',
  score = 'score',
  state = 'state'
}

export type GqlContentChangeRequests = {
  __typename?: 'ContentChangeRequests';
  contentChangeRequests?: Maybe<Array<Maybe<GqlSerializableContentChangeRequest>>>;
  meta?: Maybe<GqlContentChangeRequestMeta>;
};

export type GqlContentStatistics = {
  __typename?: 'ContentStatistics';
  connectedPercentage?: Maybe<Scalars['Float']>;
  menuScore?: Maybe<Scalars['Float']>;
};

export type GqlCopyLibraryProductErrors = {
  __typename?: 'CopyLibraryProductErrors';
  errors?: Maybe<Scalars['String']>;
  state_library_id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlCopyLibraryProductMeta = {
  __typename?: 'CopyLibraryProductMeta';
  errors?: Maybe<Array<Maybe<GqlCopyLibraryProductErrors>>>;
  totalCount?: Maybe<Scalars['Int']>;
};

export type GqlCopyLibraryProductResponse = {
  __typename?: 'CopyLibraryProductResponse';
  libraryProducts?: Maybe<Array<Maybe<GqlLibraryProduct>>>;
  meta?: Maybe<GqlCopyLibraryProductMeta>;
};

export type GqlCouponList = {
  __typename?: 'CouponList';
  coupons?: Maybe<Array<Maybe<GqlCoupons>>>;
  queryInfo?: Maybe<GqlQueryInfoType>;
};

export type GqlCouponSummary = {
  __typename?: 'CouponSummary';
  averageOrderValue?: Maybe<Scalars['Float']>;
  averageOrderValueChangePercentage?: Maybe<Scalars['Float']>;
  averageUsageChangePercentage?: Maybe<Scalars['Float']>;
  couponId?: Maybe<Scalars['String']>;
  couponName?: Maybe<Scalars['String']>;
  currentUsage?: Maybe<Scalars['Int']>;
  discount?: Maybe<Scalars['String']>;
  prevTotalSales?: Maybe<Scalars['Float']>;
  prevUsage?: Maybe<Scalars['Int']>;
  revenue?: Maybe<Scalars['Float']>;
};

export type GqlCouponValidationResponse = {
  __typename?: 'CouponValidationResponse';
  coupon?: Maybe<GqlCoupons>;
  isValid?: Maybe<Scalars['Boolean']>;
  message?: Maybe<Scalars['String']>;
};

export type GqlCoupons = {
  __typename?: 'Coupons';
  _id: Scalars['String'];
  active?: Maybe<Scalars['Boolean']>;
  addedDate?: Maybe<Scalars['String']>;
  /** @deprecated Replaced by percentDiscount || fixedDiscountInCents */
  amount?: Maybe<Scalars['String']>;
  applicableCategories?: Maybe<Array<Maybe<GqlCouponApplicableCategory>>>;
  code?: Maybe<Scalars['String']>;
  dispensary?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  expDate?: Maybe<Scalars['String']>;
  fixedDiscountInCents?: Maybe<Scalars['Int']>;
  numAllowedUses?: Maybe<Scalars['Int']>;
  numUses?: Maybe<Scalars['Int']>;
  oneUsePerCustomer?: Maybe<Scalars['Boolean']>;
  percentDiscount?: Maybe<Scalars['Float']>;
  reimbursed?: Maybe<Scalars['Boolean']>;
  restrictions?: Maybe<GqlCouponRestrictions>;
  usedBy?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlCreateBankAccountResponse = {
  __typename?: 'CreateBankAccountResponse';
  bankAccount?: Maybe<GqlPaymentMethod>;
};

export type GqlCreateBillingGroupInput = {
  enterpriseId: Scalars['ID'];
  name: Scalars['String'];
  notificationEmails: Array<Scalars['String']>;
  payment: GqlPaymentMethodInput;
  retailers: Array<Maybe<Scalars['ID']>>;
};

export type GqlCreateMxEnrollmentResponse = {
  __typename?: 'CreateMxEnrollmentResponse';
  billingAddress?: Maybe<GqlBillingAddress>;
  url: Scalars['String'];
};

export type GqlCreateOrUpdateAchReturnResponse = {
  __typename?: 'CreateOrUpdateAchReturnResponse';
  achReturn: GqlAchReturnV2;
};

export type GqlCreateOrUpdateAchReturnResponseV4 = {
  __typename?: 'CreateOrUpdateAchReturnResponseV4';
  achReturn: GqlAchReturnV4;
};

export type GqlCreateOrUpdateAchReturnResponseV5 = {
  __typename?: 'CreateOrUpdateAchReturnResponseV5';
  achReturn: GqlAchReturnV5;
};

export type GqlCreateOrderError = {
  __typename?: 'CreateOrderError';
  message?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  params?: Maybe<Scalars['JSON']>;
  path?: Maybe<Scalars['String']>;
};

export type GqlCreateOrderResponse = {
  __typename?: 'CreateOrderResponse';
  errors?: Maybe<Array<Maybe<GqlCreateOrderError>>>;
  order?: Maybe<GqlOrders>;
  valid: Scalars['Boolean'];
};

export type GqlCreateRetailerEnrollmentResponse = {
  __typename?: 'CreateRetailerEnrollmentResponse';
  paymentMethod: GqlDutchiePayPaymentMethod;
};

export type GqlCrmProperties = {
  __typename?: 'CrmProperties';
  foreignProperties?: Maybe<GqlPropertyTypes>;
  localProperties?: Maybe<GqlPropertyTypes>;
};

export type GqlCrmProperty = {
  id?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlCrossingMindsAuthResponse = {
  __typename?: 'CrossingMindsAuthResponse';
  jwtToken: Scalars['String'];
  refreshToken: Scalars['String'];
};

export type GqlCurbsideArrival = {
  __typename?: 'CurbsideArrival';
  arrivalInformation?: Maybe<Scalars['String']>;
  arrivedAt?: Maybe<Scalars['ISODateTime']>;
  clearedAt?: Maybe<Scalars['ISODateTime']>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  dispensary?: Maybe<GqlDispensaries>;
  id?: Maybe<Scalars['String']>;
  order?: Maybe<GqlOrders>;
  updatedAt?: Maybe<Scalars['ISODateTime']>;
};

export type GqlCurbsidePickupInput = {
  arrivalInformationInstructions?: Maybe<Scalars['String']>;
  enableASAPOrdering?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrdering?: Maybe<Scalars['Boolean']>;
  enableCurbsideArrivals?: Maybe<Scalars['Boolean']>;
  enableScheduledOrdering?: Maybe<Scalars['Boolean']>;
  orderMinimum?: Maybe<GqlOrderMinimumInput>;
  paymentTypes?: Maybe<GqlDispensaryUpdatePaymentTypeConfig>;
  scheduledOrderingConfig?: Maybe<GqlReservationOptionsForOrderTypeInput>;
};

export type GqlCurbsidePickupOrderingSettings = GqlBaseOrderingSettings & {
  __typename?: 'CurbsidePickupOrderingSettings';
  arrivalInformationInstructions?: Maybe<Scalars['String']>;
  enableASAPOrdering?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrdering?: Maybe<Scalars['Boolean']>;
  enableCurbsideArrivals?: Maybe<Scalars['Boolean']>;
  enableScheduledOrdering?: Maybe<Scalars['Boolean']>;
  orderMinimum?: Maybe<GqlOrderMinimum>;
  paymentTypes?: Maybe<GqlPaymentTypesConfig>;
  /** @deprecated replaced by v2 to remove slots from type - RTL 8/9/21 */
  scheduledOrderingConfig?: Maybe<GqlReservationOptionsForOrderType>;
  scheduledOrderingConfigV2?: Maybe<GqlScheduledOrderingConfigV2>;
};

export type GqlCustomCategoryPhoto = {
  __typename?: 'CustomCategoryPhoto';
  category?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export enum CustomFont {
  exo = 'EXO',
  firaSans = 'FIRA_SANS',
  heebo = 'HEEBO',
  lato = 'LATO',
  matter = 'MATTER',
  merriweather = 'MERRIWEATHER',
  notoSans = 'NOTO_SANS',
  nunito = 'NUNITO',
  proximaNova = 'PROXIMA_NOVA',
  rokkitt = 'ROKKITT',
  volkhov = 'VOLKHOV',
  vollkorn = 'VOLLKORN',
  workSans = 'WORK_SANS'
}

export type GqlCustomerSubscription = {
  __typename?: 'CustomerSubscription';
  dispensaryId?: Maybe<Scalars['String']>;
  dispensaryName?: Maybe<Scalars['String']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  emailSubscription?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
};

export enum CustomerType {
  medical = 'medical',
  recreational = 'recreational'
}

export type GqlCustomerUnsubscribe = {
  __typename?: 'CustomerUnsubscribe';
  dispensary?: Maybe<GqlDispensaries>;
  subscribed?: Maybe<Scalars['Boolean']>;
};

export type GqlCustomers = {
  __typename?: 'Customers';
  _id?: Maybe<Scalars['String']>;
  ageVerified?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  dispensaryName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  /** @deprecated Field no longer supported */
  emailSubscription?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  numOrders?: Maybe<Scalars['Int']>;
  ordersTotal?: Maybe<Scalars['Float']>;
  phone?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  /** @deprecated Field no longer supported */
  subscriptions?: Maybe<Scalars['String']>;
  textNotifications?: Maybe<Scalars['Boolean']>;
  /** @deprecated Field no longer supported */
  textSubscription?: Maybe<Scalars['Boolean']>;
  userId?: Maybe<Scalars['String']>;
};

export type GqlCustomersList = {
  __typename?: 'CustomersList';
  customers?: Maybe<Array<Maybe<GqlCustomers>>>;
  meta?: Maybe<GqlMeta>;
};

export type GqlDateRange = {
  max?: Maybe<Scalars['ISODateTime']>;
  min?: Maybe<Scalars['ISODateTime']>;
};

export type GqlDealCrmProperty = GqlCrmProperty & {
  __typename?: 'DealCrmProperty';
  id?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlDeliveryFeeTiers = {
  __typename?: 'DeliveryFeeTiers';
  feeInCents?: Maybe<Scalars['Int']>;
  feeType?: Maybe<FeeTypes>;
  maximumInCents?: Maybe<Scalars['Int']>;
  minimumInCents?: Maybe<Scalars['Int']>;
  percentFee?: Maybe<Scalars['Float']>;
};

export type GqlDeliveryInput = {
  deliveryFeeTiers?: Maybe<Array<Maybe<GqlFeeTiersInput>>>;
  deliveryMode?: Maybe<DeliveryModes>;
  deliveryRadius?: Maybe<GqlDeliveryRadiusInput>;
  deliveryZipCodes?: Maybe<Array<Maybe<GqlDeliveryZipCodesInputV2>>>;
  deliveryZones?: Maybe<Array<Maybe<GqlDeliveryZonesInputV2>>>;
  enableASAPOrdering?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrdering?: Maybe<Scalars['Boolean']>;
  enableScheduledOrdering?: Maybe<Scalars['Boolean']>;
  paymentTypes?: Maybe<GqlDispensaryUpdatePaymentTypeConfig>;
  scheduledOrderingConfig?: Maybe<GqlReservationOptionsForOrderTypeInput>;
};

export enum DeliveryModes {
  cityLimits = 'cityLimits',
  drawn = 'drawn',
  radius = 'radius',
  zipCode = 'zipCode'
}

export type GqlDeliveryOrderingSettings = GqlBaseOrderingSettings & {
  __typename?: 'DeliveryOrderingSettings';
  deliveryFeeTiers?: Maybe<Array<Maybe<GqlDeliveryFeeTiers>>>;
  deliveryMode?: Maybe<DeliveryModes>;
  deliveryRadius?: Maybe<GqlDeliveryRadius>;
  deliveryZipCodes?: Maybe<Array<Maybe<GqlDeliveryZipCodes>>>;
  deliveryZones?: Maybe<Array<Maybe<GqlDeliveryZones>>>;
  enableASAPOrdering?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrdering?: Maybe<Scalars['Boolean']>;
  enableScheduledOrdering?: Maybe<Scalars['Boolean']>;
  paymentTypes?: Maybe<GqlPaymentTypesConfig>;
  /** @deprecated replaced by v2 to remove slots from type - RTL 8/9/21 */
  scheduledOrderingConfig?: Maybe<GqlReservationOptionsForOrderType>;
  scheduledOrderingConfigV2?: Maybe<GqlScheduledOrderingConfigV2>;
};

export enum DeliveryPolicy {
  destinationBased = 'destinationBased',
  originBased = 'originBased'
}

export type GqlDeliveryRadius = {
  __typename?: 'DeliveryRadius';
  orderMinimum?: Maybe<GqlOrderMinimum>;
  radiusInMiles?: Maybe<Scalars['Float']>;
};

export type GqlDeliveryRadiusInput = {
  orderMinimum?: Maybe<GqlOrderMinimumInput>;
  radiusInMiles?: Maybe<Scalars['Float']>;
};

export type GqlDeliveryZipCodes = {
  __typename?: 'DeliveryZipCodes';
  feeInCents?: Maybe<Scalars['Int']>;
  feeType?: Maybe<FeeTypes>;
  minimumInCents?: Maybe<Scalars['Int']>;
  percentFee?: Maybe<Scalars['Float']>;
  zipCode?: Maybe<Scalars['String']>;
};

export type GqlDeliveryZipCodesInputV2 = {
  feeInCents?: Maybe<Scalars['Int']>;
  feeType?: Maybe<FeeTypes>;
  minimumInCents?: Maybe<Scalars['Int']>;
  percentFee?: Maybe<Scalars['Float']>;
  zipCode?: Maybe<Scalars['String']>;
};

export type GqlDeliveryZones = {
  __typename?: 'DeliveryZones';
  area?: Maybe<GqlPolygon>;
  feeInCents?: Maybe<Scalars['Int']>;
  feeType?: Maybe<FeeTypes>;
  minimumInCents?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  percentFee?: Maybe<Scalars['Float']>;
};

export type GqlDeliveryZonesInputV2 = {
  area?: Maybe<GqlPolygonInput>;
  feeInCents?: Maybe<Scalars['Int']>;
  feeType?: Maybe<FeeTypes>;
  minimumInCents?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  percentFee?: Maybe<Scalars['Float']>;
};

export type GqlDeviceAccessCode = {
  __typename?: 'DeviceAccessCode';
  accessCode: Scalars['String'];
  channel: Scalars['String'];
  channelKey: Scalars['String'];
  id: Scalars['ID'];
};

export type GqlDeviceConnection = {
  __typename?: 'DeviceConnection';
  accessToken: Scalars['String'];
};

export type GqlDevice_Config = {
  __typename?: 'Device_config';
  getDeliveryOrders?: Maybe<Scalars['Boolean']>;
  getKioskOrders?: Maybe<Scalars['Boolean']>;
  getPickupOrders?: Maybe<Scalars['Boolean']>;
  orderSort?: Maybe<GqlDevice_Config_OrderSort>;
  /** @deprecated Replaced by getPickupOrders, getDeliveryOrders, getKioskOrders */
  orderSource?: Maybe<Scalars['String']>;
};

export type GqlDevice_Config_Input = {
  getDeliveryOrders?: Maybe<Scalars['Boolean']>;
  getKioskOrders?: Maybe<Scalars['Boolean']>;
  getPickupOrders?: Maybe<Scalars['Boolean']>;
  orderSort?: Maybe<GqlDevice_Config_OrderSort_Input>;
  orderSource?: Maybe<Scalars['String']>;
};

export type GqlDevice_Config_OrderSort = {
  __typename?: 'Device_config_orderSort';
  sortBy?: Maybe<Device_OrderSortOptions>;
  sortDirection?: Maybe<StringSortDirections>;
};

export type GqlDevice_Config_OrderSort_Input = {
  sortBy?: Maybe<Device_OrderSortOptions>;
  sortDirection?: Maybe<StringSortDirections>;
};

export type GqlDevice_FeatureFlags = {
  __typename?: 'Device_featureFlags';
  enableBatchPrint?: Maybe<Scalars['Boolean']>;
};

export enum Device_OrderSortOptions {
  createdAt = 'createdAt',
  reservation = 'reservation'
}

export type GqlDevices = {
  __typename?: 'Devices';
  _id?: Maybe<Scalars['String']>;
  accessCode?: Maybe<Scalars['String']>;
  autoPrintDevice?: Maybe<Scalars['Boolean']>;
  buildNumber?: Maybe<Scalars['String']>;
  config?: Maybe<GqlDevice_Config>;
  dispensary?: Maybe<GqlDispensaries>;
  dispensaryId?: Maybe<Scalars['String']>;
  featureFlags?: Maybe<GqlDevice_FeatureFlags>;
  lastSeenAt?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  online?: Maybe<Scalars['Boolean']>;
  printerConnected?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['String']>;
  versionNumber?: Maybe<Scalars['String']>;
};

export type GqlDisconnectBankAccountResponse = {
  __typename?: 'DisconnectBankAccountResponse';
  success?: Maybe<Scalars['Boolean']>;
};

export type GqlDiscountBundle = {
  __typename?: 'DiscountBundle';
  _id?: Maybe<Scalars['String']>;
  applyTo?: Maybe<ApplicationScope>;
  discountType?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlDiscountBundleInput = {
  _id?: Maybe<Scalars['String']>;
  applyTo?: Maybe<ApplicationScope>;
  discountType?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlDiscountToCart = {
  __typename?: 'DiscountToCart';
  _id?: Maybe<Scalars['String']>;
  discountType?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlDiscountToCartInput = {
  _id?: Maybe<Scalars['String']>;
  discountType?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  value?: Maybe<Scalars['String']>;
};

export enum DiscountType {
  amountoff = 'AMOUNTOFF',
  discountedprice = 'DISCOUNTEDPRICE',
  percentdiscount = 'PERCENTDISCOUNT'
}

export type GqlDispensaries = {
  __typename?: 'Dispensaries';
  SpecialLogoImage?: Maybe<Scalars['String']>;
  acceptsDutchiePayTips?: Maybe<Scalars['Boolean']>;
  acceptsTips?: Maybe<Scalars['Boolean']>;
  actionEstimates?: Maybe<GqlActionEstimates>;
  activeCategories?: Maybe<Array<Maybe<Scalars['String']>>>;
  address?: Maybe<Scalars['String']>;
  admins?: Maybe<Array<Maybe<GqlDispensaries_Profile_Admins>>>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  aeropay?: Maybe<Scalars['Boolean']>;
  ageVerificationBannerColor?: Maybe<Scalars['String']>;
  ageVerificationBannerHtml?: Maybe<Scalars['String']>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  alt36?: Maybe<Scalars['Boolean']>;
  /** @deprecated Taxes V1 */
  applyExciseToPOS?: Maybe<Scalars['Boolean']>;
  /** @deprecated defined within CurbsidePickupOrderingSettings in ordering-settings */
  arrivalInformationInstructions?: Maybe<Scalars['String']>;
  bannerImage?: Maybe<Scalars['String']>;
  cName?: Maybe<Scalars['String']>;
  callConfirmation?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  canPay?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  cashOnly?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  cashless?: Maybe<Scalars['Boolean']>;
  categoryLimits?: Maybe<Array<Maybe<GqlDispensaries_CategoryLimits>>>;
  categoryLimitsEnabled?: Maybe<Scalars['Boolean']>;
  categoryPhotos?: Maybe<Array<Maybe<GqlCategoryPhoto>>>;
  chain?: Maybe<Scalars['String']>;
  chainName?: Maybe<Scalars['String']>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  check?: Maybe<Scalars['Boolean']>;
  colorSettings?: Maybe<GqlColorSettings>;
  complianceCode?: Maybe<Scalars['String']>;
  complianceConfig?: Maybe<GqlComplianceConfig>;
  consumerDispensaryIntegrations?: Maybe<GqlConsumerDispensaryIntegrations>;
  coordinates?: Maybe<GqlDispensaries_Profile_Coordinates>;
  /** @deprecated Use ISO field */
  createdAt?: Maybe<Scalars['String']>;
  createdAtISO?: Maybe<Scalars['ISODateTime']>;
  /** @deprecated Removed support - 4/12/20 */
  creditCard?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  creditCardAtDoor?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  creditCardByPhone?: Maybe<Scalars['Boolean']>;
  customCategoryPhotos?: Maybe<Array<Maybe<GqlCustomCategoryPhoto>>>;
  customDomainSettings?: Maybe<GqlDispensaries_Profile_CustomDomain_Settings>;
  /** @deprecated removing all danger tab settings */
  dangerIntervals?: Maybe<GqlDispensaries_DangerIntervals>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  debitOnly?: Maybe<Scalars['Boolean']>;
  /** @deprecated covered by DeliveryOrderingSettings in ordering-settings */
  deliveryArea?: Maybe<GqlPolygon>;
  /** @deprecated used and defined in ordering-settings */
  deliveryFee?: Maybe<Scalars['String']>;
  /** @deprecated defined within hours-settings */
  deliveryHours?: Maybe<GqlDispensaries_Profile_Hours>;
  deliveryInfo?: Maybe<GqlDispensaries_DeliveryInfo>;
  /** @deprecated used and defined in ordering-settings */
  deliveryMin?: Maybe<Scalars['String']>;
  /** @deprecated used and defined in ordering-settings */
  deliveryMode?: Maybe<DeliveryModes>;
  /** @deprecated used and defined in ordering-settings */
  deliveryZipCodes?: Maybe<Array<Maybe<GqlDispensaries_DeliveryZipCodes>>>;
  /** @deprecated used and defined in ordering-settings */
  deliveryZones?: Maybe<Array<Maybe<GqlDispensaries_DeliveryZones>>>;
  description?: Maybe<Scalars['String']>;
  distance?: Maybe<Scalars['Float']>;
  drivers?: Maybe<Array<Maybe<GqlDispensaries_Profile_Drivers>>>;
  durationEstimateOverrides?: Maybe<GqlDurationEstimates>;
  /** @deprecated defined in hours-settings */
  effectiveHours?: Maybe<GqlEffectiveHours>;
  email?: Maybe<Scalars['String']>;
  emailConfirmation?: Maybe<Scalars['Boolean']>;
  emailNotifications?: Maybe<Scalars['Boolean']>;
  embedBackUrl?: Maybe<Scalars['String']>;
  embedSettings?: Maybe<GqlDispensaries_Profile_Embed_Settings>;
  embeddedLogoImage?: Maybe<Scalars['String']>;
  embeddedMenuUrl?: Maybe<Scalars['String']>;
  enabledOrderTypes?: Maybe<GqlEnabledOrderTypes>;
  /** @deprecated Taxes V1 */
  exciseTax?: Maybe<GqlDispensaries_ExciseTax>;
  /** @deprecated Taxes V1 */
  excludeExciseFromMenu?: Maybe<Scalars['Boolean']>;
  featureFlags: GqlDispensaries_FeatureFlags;
  feeTiers?: Maybe<Array<Maybe<GqlDispensaries_Profile_FeeTiers>>>;
  /** @deprecated Use ISO field */
  firstActiveAt?: Maybe<Scalars['String']>;
  firstActiveAtISO?: Maybe<Scalars['ISODateTime']>;
  fleetManagementIntegration?: Maybe<Array<Maybe<GqlDispensaries_Integrations>>>;
  fullName?: Maybe<Scalars['String']>;
  googleAnalyticsID?: Maybe<Scalars['String']>;
  googleTagManager?: Maybe<GqlDispensaries_GoogleTagManagerConfig>;
  /** @deprecated Use googleTagManager field */
  googleTagManagerID?: Maybe<Scalars['String']>;
  /** @deprecated use storeSettings.requireEmailAddressForGuestCheckout - RTL, 4/28/2021 */
  guestEmailRequired?: Maybe<Scalars['Boolean']>;
  hasMenuIntegration: Scalars['Boolean'];
  /** @deprecated removing all danger tab settings */
  hiddenOnDanger?: Maybe<Scalars['Boolean']>;
  hideFromCCT?: Maybe<Scalars['Boolean']>;
  hoursSettings?: Maybe<GqlDispensaryHoursSettings>;
  id?: Maybe<Scalars['String']>;
  imageBanners?: Maybe<Array<Maybe<GqlImageBanner>>>;
  includeSalesTaxInMenu?: Maybe<Scalars['Boolean']>;
  /** @deprecated Taxes V1 */
  inclusiveSalesTax?: Maybe<Scalars['Boolean']>;
  /** @deprecated Removed */
  integrations?: Maybe<Array<Maybe<GqlDispensaries_Integrations>>>;
  isLibrary?: Maybe<Scalars['Boolean']>;
  /** @deprecated defined in ordering-settings as KioskOrderingSettings */
  kioskConfig?: Maybe<GqlDispensaries_KioskConfig>;
  /** @deprecated defined within KioskOrderingSettings in ordering-settings */
  kioskInstructions?: Maybe<Scalars['String']>;
  /** @deprecated defined within KioskOrderingSettings in ordering-settings */
  kioskOrderingEnabled?: Maybe<Scalars['Boolean']>;
  lastThirtyDaysSales?: Maybe<Scalars['Float']>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  linx?: Maybe<Scalars['Boolean']>;
  listImage?: Maybe<Scalars['String']>;
  location?: Maybe<GqlDispensaries_Profile_Location>;
  logoImage?: Maybe<Scalars['String']>;
  /** @deprecated used and defined in ordering-settings as deliveryRadiusInMiles */
  maxDeliveryDistance?: Maybe<Scalars['Float']>;
  medSubjectToExciseTax?: Maybe<Scalars['Boolean']>;
  medicalDispensary?: Maybe<Scalars['Boolean']>;
  medicalOnly?: Maybe<Scalars['Boolean']>;
  menuBannerColor?: Maybe<Scalars['String']>;
  menuBannerHtml?: Maybe<Scalars['String']>;
  menuIntegration?: Maybe<Array<Maybe<GqlDispensaries_Integrations>>>;
  menuOrder?: Maybe<Scalars['String']>;
  menuScore?: Maybe<Scalars['Float']>;
  menuScoresByCategory?: Maybe<Array<Maybe<GqlMenuScore>>>;
  menuSortSettings?: Maybe<Array<GqlMenuSortSetting>>;
  menuUrl?: Maybe<Scalars['String']>;
  menuWeights?: Maybe<Scalars['String']>;
  merrcoPublicToken?: Maybe<Scalars['String']>;
  messagingSettings?: Maybe<GqlDispensaries_MessagingSettings>;
  mixAndMatchPricingWeights?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  noFrontendLimits?: Maybe<Scalars['Boolean']>;
  notes?: Maybe<Scalars['String']>;
  /**
   * convenience properties used frequently on server and client. Derived based on orderTypesConfig. See serializer for detail
   * @deprecated use OrderTypesConfig.offerAnyPickupService
   */
  offerAnyPickupService?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use orderTypesConfigV2 or enabledOrderTypes 07/2022 */
  offerCurbsidePickup?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use orderTypesConfigV2 or enabledOrderTypes 07/2022 */
  offerDelivery?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use orderTypesConfigV2 or enabledOrderTypes 07/2022 */
  offerDriveThruPickup?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use orderTypesConfigV2 or enabledOrderTypes 07/2022 */
  offerPickup?: Maybe<Scalars['Boolean']>;
  offeredDispoSubscriptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  openInfoForDevice?: Maybe<GqlOpenInfoForDevice>;
  orderStatusEmailSettings?: Maybe<GqlOrderStatusEmailSettings>;
  /**
   * nested payment-type-per-order-type data; used in admin settings and checkout
   * @deprecated use OrderTypesConfigV2
   */
  orderTypesConfig?: Maybe<GqlOrderTypesConfig>;
  orderTypesConfigV2?: Maybe<GqlOrderTypesConfigV2>;
  ordersArePaused?: Maybe<Scalars['Boolean']>;
  ordersConfig?: Maybe<GqlDispensaries_OrdersConfig>;
  /** @deprecated legacy payment option */
  payInStore?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  payOnlineHypur?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  payOnlineMerrco?: Maybe<Scalars['Boolean']>;
  paymentFees?: Maybe<Array<Maybe<GqlDispensaries_PaymentFees>>>;
  /** booleans of all payment types the dispo accepts (derived from nested orderTypesConfig data). Existing references to profile-level bools should be changed to reference this list */
  paymentTypesAccepted?: Maybe<GqlPaymentTypesConfig>;
  /** @deprecated Use paymentTypesAccepted 11/2020 */
  paytender?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  phoneTree?: Maybe<Scalars['String']>;
  /** @deprecated defined in hours-settings */
  pickupHours?: Maybe<GqlDispensaries_Profile_Hours>;
  /** @deprecated defined in ordering-settings */
  pickupMinimum?: Maybe<GqlPickupMinimum>;
  plusSettings?: Maybe<GqlDispensaries_Profile_Plus_Settings>;
  preferences?: Maybe<GqlDispensaries_Profile_Preferences>;
  printedMenuSettings?: Maybe<GqlDispensaries_PrintedMenuSettings>;
  productCategorySummary?: Maybe<Array<Maybe<GqlCategorySummary>>>;
  /** @deprecated Removed 7/16/21 */
  publicAPIToken?: Maybe<Scalars['String']>;
  recDispensary?: Maybe<Scalars['Boolean']>;
  removeMedicalCardFieldsAtCheckout?: Maybe<Scalars['Boolean']>;
  requirePhotoIdForDelivery?: Maybe<Scalars['Boolean']>;
  requirePhotoIdForPickup?: Maybe<Scalars['Boolean']>;
  requiresDriversLicense?: Maybe<Scalars['Boolean']>;
  requiresDriversLicenseForPickup?: Maybe<Scalars['Boolean']>;
  /** @deprecated replaced by scheduledOrderingConfigV2 in ordering-settings */
  reservationConfig?: Maybe<GqlReservationConfig>;
  reservationsAvailableByOrderType?: Maybe<GqlReservationsAvailableByOrderType>;
  resetToken?: Maybe<Scalars['String']>;
  resetTokenTime?: Maybe<Scalars['String']>;
  retailer: GqlRetailer;
  salesTax?: Maybe<Scalars['Float']>;
  /** @deprecated defined in hours-settings in HoursSettingsForOrderType */
  specialHours?: Maybe<Array<Maybe<GqlSpecialHours>>>;
  specialsSettings?: Maybe<GqlSpecialsSettings>;
  /** @deprecated Use consumerDispensaryIntegrations.springbig.enabled field */
  springbigEnabled?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use consumerDispensaryIntegrations.sprout.enabled field */
  sproutEnabled?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
  /** @deprecated Moved to storeSettings 7/11/2019 */
  stealthMode?: Maybe<Scalars['Boolean']>;
  storeSettings: GqlDispensaries_StoreSettings;
  superAdmins?: Maybe<Array<Maybe<GqlDispensaries_SuperAdmin>>>;
  taxCalculationMethod: Scalars['String'];
  taxConfig: GqlDispensaries_TaxConfig;
  temporalLocation?: Maybe<GqlTemporalLocation>;
  terminals?: Maybe<Array<Maybe<GqlDispensaries_Terminals>>>;
  textNotifications?: Maybe<Scalars['Boolean']>;
  tier?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  /** @deprecated Use ISO field */
  updatedAt?: Maybe<Scalars['String']>;
  updatedAtISO?: Maybe<Scalars['ISODateTime']>;
  updatedBy?: Maybe<Scalars['String']>;
  webCustomizationSettings?: Maybe<GqlWebCustomizationSettings>;
  /** @deprecated Removed 7/27/21 */
  webhooks?: Maybe<Array<Maybe<GqlDispensaries_Webhook>>>;
};

export type GqlDispensaries_GoogleTagManagerConfig = {
  __typename?: 'Dispensaries_GoogleTagManagerConfig';
  flags?: Maybe<Scalars['JSON']>;
  gtmID?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_TaxConfig = {
  __typename?: 'Dispensaries_TaxConfig';
  calculationMethod: Scalars['String'];
  discountTaxOrder: Scalars['String'];
  taxes: Array<Maybe<GqlDispensaries_TaxConfig_Tax>>;
  version: Scalars['Int'];
};

export type GqlDispensaries_TaxConfig_Tax = {
  __typename?: 'Dispensaries_TaxConfig_Tax';
  applyTo: GqlDispensaries_TaxConfig_Tax_ApplyTo;
  deliveryPolicy?: Maybe<DeliveryPolicy>;
  destinationRate?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  includeStateSalesTaxInDestinationRate?: Maybe<Scalars['Boolean']>;
  medical: Scalars['Boolean'];
  name: Scalars['String'];
  order?: Maybe<Scalars['Int']>;
  potency?: Maybe<PotencyType>;
  potencyRate?: Maybe<Scalars['Float']>;
  rate: Scalars['Float'];
  recreational: Scalars['Boolean'];
  stages: Array<Maybe<GqlDispensaries_TaxConfig_Tax_Stage>>;
  taxBasis?: Maybe<Scalars['String']>;
  type: TaxType;
};

export type GqlDispensaries_TaxConfig_Tax_ApplyTo = {
  __typename?: 'Dispensaries_TaxConfig_Tax_ApplyTo';
  hemp: Scalars['Boolean'];
  types: Array<Maybe<Scalars['String']>>;
};

export type GqlDispensaries_TaxConfig_Tax_Stage = {
  __typename?: 'Dispensaries_TaxConfig_Tax_Stage';
  op: Dispensaries_TaxConfig_Tax_Stage_Ops;
  type: Dispensaries_TaxConfig_Tax_Stage_Types;
};

export enum Dispensaries_TaxConfig_Tax_Stage_Ops {
  add = 'add',
  noop = 'noop',
  subtract = 'subtract'
}

export enum Dispensaries_TaxConfig_Tax_Stage_Types {
  checkout = 'checkout',
  menu = 'menu',
  pos = 'pos'
}

export type GqlDispensaries_CategoryLimits = {
  __typename?: 'Dispensaries_categoryLimits';
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_DangerIntervals = {
  __typename?: 'Dispensaries_dangerIntervals';
  confirmedInMinutes?: Maybe<Scalars['Int']>;
  inTransitClosedInMinutes?: Maybe<Scalars['Int']>;
  inTransitInMinutes?: Maybe<Scalars['Int']>;
  readyForPickupInMinutes?: Maybe<Scalars['Int']>;
};

export type GqlDispensaries_DeliveryInfo = {
  __typename?: 'Dispensaries_deliveryInfo';
  fee?: Maybe<Scalars['Int']>;
  feeType?: Maybe<FeeTypes>;
  feeVaries?: Maybe<Scalars['Boolean']>;
  minimum?: Maybe<Scalars['Int']>;
  minimumVaries?: Maybe<Scalars['Boolean']>;
  percentFee?: Maybe<Scalars['Float']>;
  withinBounds?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaries_DeliveryZipCodes = {
  __typename?: 'Dispensaries_deliveryZipCodes';
  fee?: Maybe<Scalars['Int']>;
  feeType?: Maybe<FeeTypes>;
  minimum?: Maybe<Scalars['Int']>;
  percentFee?: Maybe<Scalars['Float']>;
  zipCode?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_DeliveryZones = {
  __typename?: 'Dispensaries_deliveryZones';
  area?: Maybe<GqlPolygon>;
  fee?: Maybe<Scalars['Int']>;
  feeType?: Maybe<FeeTypes>;
  minimum?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  percentFee?: Maybe<Scalars['Float']>;
};

export type GqlDispensaries_ExciseTax = {
  __typename?: 'Dispensaries_exciseTax';
  local?: Maybe<Scalars['Float']>;
  medicalLocal?: Maybe<Scalars['Float']>;
  medicalState?: Maybe<Scalars['Float']>;
  state?: Maybe<Scalars['Float']>;
};

export type GqlDispensaries_FeatureFlags = {
  __typename?: 'Dispensaries_featureFlags';
  /** @deprecated Removed 10/22/20 */
  checkoutV2?: Maybe<Scalars['Boolean']>;
  /** @deprecated General Availability 01/05/2021 */
  enableAdvancedDiscountSettings?: Maybe<Scalars['Boolean']>;
  /** @deprecated General Availability 2/23/21 */
  enableAfterHoursOrdering?: Maybe<Scalars['Boolean']>;
  /** @deprecated General Availability 11/19/2020 */
  enableAnalyticsBeta?: Maybe<Scalars['Boolean']>;
  /** @deprecated General Availability 07/09/2020 */
  enableArrivals?: Maybe<Scalars['Boolean']>;
  /** @deprecated General Availability 8/27/20 */
  enableBogoSpecials?: Maybe<Scalars['Boolean']>;
  /** @deprecated General Availability 3/8/21 */
  enableBogoTotalQuantityAndWeight?: Maybe<Scalars['Boolean']>;
  enableDriveThruPickup?: Maybe<Scalars['Boolean']>;
  enableHypur?: Maybe<Scalars['Boolean']>;
  enableMenuImport?: Maybe<Scalars['Boolean']>;
  /** @deprecated Removed 07/01/2021 */
  enableMerrco?: Maybe<Scalars['Boolean']>;
  enableMixAndMatch?: Maybe<Scalars['Boolean']>;
  enableNonTerminalAutoConfirm?: Maybe<Scalars['Boolean']>;
  /** @deprecated Removed 10/14/19 */
  enableOnfleet?: Maybe<Scalars['Boolean']>;
  enablePausedOrders?: Maybe<Scalars['Boolean']>;
  /** @deprecated General Availability 2/23/21 */
  enableScheduledOrdering?: Maybe<Scalars['Boolean']>;
  /** @deprecated General Availability 12/29/2020 */
  enableSprout?: Maybe<Scalars['Boolean']>;
  /** @deprecated General Availability 10/29/2020 */
  enableV3Beta?: Maybe<Scalars['Boolean']>;
  hasEffectsFilter?: Maybe<Scalars['Boolean']>;
  hideDeliveryEstimate?: Maybe<Scalars['Boolean']>;
  hideMyAccount?: Maybe<Scalars['Boolean']>;
  hideStoreHours?: Maybe<Scalars['Boolean']>;
  /** @deprecated Removed 7/16/21 */
  publicAPIAccess?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaries_FleetManagementIntegration_Credentials = {
  __typename?: 'Dispensaries_fleetManagementIntegration_credentials';
  apiKey?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  ordersEnabled?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaries_FleetManagementIntegration_Flags = {
  __typename?: 'Dispensaries_fleetManagementIntegration_flags';
  combineDiscounts?: Maybe<Scalars['Boolean']>;
  fleetManagementStatus?: Maybe<Scalars['String']>;
  onfleetStatus?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_Integrations = {
  __typename?: 'Dispensaries_integrations';
  adapter?: Maybe<Scalars['String']>;
  /** @deprecated Removed */
  credentials?: Maybe<GqlDispensaries_FleetManagementIntegration_Credentials>;
  enabled?: Maybe<Scalars['Boolean']>;
  flags?: Maybe<GqlDispensaries_FleetManagementIntegration_Flags>;
  /** @deprecated Use ISO field */
  lastSyncAt?: Maybe<Scalars['String']>;
  lastSyncAtISO?: Maybe<Scalars['ISODateTime']>;
  live?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaries_KioskConfig = {
  __typename?: 'Dispensaries_kioskConfig';
  directedOrders?: Maybe<Scalars['Boolean']>;
  fullNameOnly?: Maybe<Scalars['Boolean']>;
  hideEmailField?: Maybe<Scalars['Boolean']>;
  hidePhoneField?: Maybe<Scalars['Boolean']>;
  notesField?: Maybe<Scalars['Boolean']>;
  phoneRequired?: Maybe<Scalars['Boolean']>;
  showBirthdateField?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaries_MessagingSettings = {
  __typename?: 'Dispensaries_messagingSettings';
  disableConfirmation?: Maybe<Scalars['Boolean']>;
  disableReadyForPickup?: Maybe<Scalars['Boolean']>;
  disableStartDelivery?: Maybe<Scalars['Boolean']>;
  notifySid?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_OrdersConfig = {
  __typename?: 'Dispensaries_ordersConfig';
  autoClose?: Maybe<Scalars['Boolean']>;
  autoConfirm?: Maybe<Scalars['Boolean']>;
  posItemNames?: Maybe<Scalars['Boolean']>;
  terminalReceiptOptions?: Maybe<GqlTerminalReceiptOptions>;
};

export type GqlDispensaries_PaymentFees = {
  __typename?: 'Dispensaries_paymentFees';
  fee?: Maybe<Scalars['Float']>;
  feeType?: Maybe<Scalars['String']>;
  paymentType?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_PrintedMenuSettings = {
  __typename?: 'Dispensaries_printedMenuSettings';
  Categories?: Maybe<Array<Maybe<GqlPrintedMenuSettings_CategoryEntry>>>;
  FooterText?: Maybe<GqlPrintedMenuSettings_Text>;
  HeaderText?: Maybe<GqlPrintedMenuSettings_Text>;
  MenuType?: Maybe<GqlPrintedMenuSettings_Type>;
  Order?: Maybe<GqlPrintedMenuSettings_Type>;
  PageBreaks?: Maybe<GqlPrintedMenuSettings_PageBreaks>;
  Photos?: Maybe<GqlPrintedMenuSettings_Photos>;
  StrainTypes?: Maybe<Array<Maybe<GqlPrintedMenuSettings_StrainTypesEntry>>>;
};

export type GqlDispensaries_Profile_Admins = {
  __typename?: 'Dispensaries_profile_admins';
  active?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_Profile_Coordinates = {
  __typename?: 'Dispensaries_profile_coordinates';
  lat?: Maybe<Scalars['Float']>;
  lng?: Maybe<Scalars['Float']>;
};

export type GqlDispensaries_Profile_CustomDomain_Settings = {
  __typename?: 'Dispensaries_profile_customDomain_settings';
  domain?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_Profile_Drivers = {
  __typename?: 'Dispensaries_profile_drivers';
  name?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_Profile_Embed_Settings = {
  __typename?: 'Dispensaries_profile_embed_settings';
  applyToAllLocations?: Maybe<Scalars['Boolean']>;
  autoGTM?: Maybe<Scalars['Boolean']>;
  autoScroll?: Maybe<Scalars['Boolean']>;
  autoScrollOffset?: Maybe<Scalars['Int']>;
  disablePageLoadsAtTop?: Maybe<Scalars['Boolean']>;
  disableRouting?: Maybe<Scalars['Boolean']>;
  disclaimerText?: Maybe<Scalars['String']>;
  disclaimerTextHtml?: Maybe<Scalars['String']>;
  /** @deprecated transition to zendesk */
  enableIntercom?: Maybe<Scalars['Boolean']>;
  /** @deprecated Removed due to migration to integrations page. 11/16/19 */
  googleAnalyticsID?: Maybe<Scalars['String']>;
  iframeCSS?: Maybe<Scalars['String']>;
  pageCSS?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_Profile_FeeTiers = {
  __typename?: 'Dispensaries_profile_feeTiers';
  fee?: Maybe<Scalars['String']>;
  feeType?: Maybe<FeeTypes>;
  max?: Maybe<Scalars['String']>;
  min?: Maybe<Scalars['String']>;
  percentFee?: Maybe<Scalars['Float']>;
};

export type GqlDispensaries_Profile_Hours = {
  __typename?: 'Dispensaries_profile_hours';
  Friday?: Maybe<GqlDayBounds>;
  Monday?: Maybe<GqlDayBounds>;
  Saturday?: Maybe<GqlDayBounds>;
  Sunday?: Maybe<GqlDayBounds>;
  Thursday?: Maybe<GqlDayBounds>;
  Tuesday?: Maybe<GqlDayBounds>;
  Wednesday?: Maybe<GqlDayBounds>;
};

export type GqlDispensaries_Profile_Location = {
  __typename?: 'Dispensaries_profile_location';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  county?: Maybe<Scalars['String']>;
  geometry?: Maybe<GqlDispensaries_Profile_Location_Geometry>;
  ln1?: Maybe<Scalars['String']>;
  ln2?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  zipcode?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_Profile_Location_Geometry = {
  __typename?: 'Dispensaries_profile_location_geometry';
  coordinates?: Maybe<Array<Maybe<Scalars['Float']>>>;
  type?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_Profile_MedicalCard = {
  __typename?: 'Dispensaries_profile_medicalCard';
  expirationDate?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_Profile_Plus_Settings = {
  __typename?: 'Dispensaries_profile_plus_settings';
  checkoutUrl?: Maybe<Scalars['String']>;
  defaultReturnUrl?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_Profile_Preferences = {
  __typename?: 'Dispensaries_profile_preferences';
  betaIntegrations?: Maybe<Scalars['Boolean']>;
  hideAdminTour?: Maybe<Scalars['Boolean']>;
  hideAdminTourModal?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaries_StoreSettings = {
  __typename?: 'Dispensaries_storeSettings';
  customerMessagingTermsAccepted: Scalars['Boolean'];
  defaultViewStyle: MenuViewStyles;
  disableGuestCheckout: Scalars['Boolean'];
  disableGuestDOB: Scalars['Boolean'];
  disablePurchaseLimits: Scalars['Boolean'];
  /** @deprecated Enabled for all stores. 12/29/20 */
  displayBrands?: Maybe<Scalars['Boolean']>;
  displayPhoneConfirmation: Scalars['Boolean'];
  dontCombineWeightedProducts: Scalars['Boolean'];
  dontMapSubcategoriesByProductName?: Maybe<Scalars['Boolean']>;
  /** @deprecated used and defined in ordering-settings */
  enableAfterHoursOrderingForDelivery: Scalars['Boolean'];
  /** @deprecated used and defined per order type in ordering-settings */
  enableAfterHoursOrderingForPickup: Scalars['Boolean'];
  /** @deprecated Enabled for all dispensaries - RTL 4/7/2021 */
  enableCustomerMessaging?: Maybe<Scalars['Boolean']>;
  /** @deprecated Enabled for all stores. 12/29/20 */
  enableFeaturedProducts: Scalars['Boolean'];
  enableLLxSaleDiscountSync?: Maybe<Scalars['Boolean']>;
  enableLimitPerCustomer: Scalars['Boolean'];
  enableMixAndMatchPricingForDelivery: Scalars['Boolean'];
  enableMixAndMatchPricingForPickup: Scalars['Boolean'];
  enableOrderStatusEmails: Scalars['Boolean'];
  /** @deprecated used and defined in ordering-settings */
  enableScheduledOrderingForDelivery: Scalars['Boolean'];
  /** @deprecated used and defined per order type in ordering-settings */
  enableScheduledOrderingForPickup: Scalars['Boolean'];
  enableStorefrontAgeGate: Scalars['Boolean'];
  /** @deprecated Enabled for all stores. 12/29/20 */
  enableV3: Scalars['Boolean'];
  hideAddressFromDutchieMain: Scalars['Boolean'];
  hideEffects: Scalars['Boolean'];
  hideFilters: Scalars['Boolean'];
  isolatedMenus: Scalars['Boolean'];
  keepUncombinedWeights?: Maybe<Scalars['Boolean']>;
  prioritizeStaffPicksInSearchResults: Scalars['Boolean'];
  quantityLimit: Scalars['Int'];
  requireEmailAddressForGuestCheckout: Scalars['Boolean'];
  requireMedCardPhotoForDelivery: Scalars['Boolean'];
  requireMedCardPhotoForPickup: Scalars['Boolean'];
  rewardsIntegrationConfiguration?: Maybe<GqlRewards_Integration_Configuration>;
  stealthMode: Scalars['Boolean'];
  subscriptions: GqlDispensaries_Subscriptions;
  /** @deprecated Enabled for all stores. 12/29/20 */
  v3PreviouslyEnabled: Scalars['Boolean'];
};

export type GqlDispensaries_Subscriptions = {
  __typename?: 'Dispensaries_subscriptions';
  enabled?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaries_SubscriptionsInput = {
  enabled?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaries_SuperAdmin = {
  __typename?: 'Dispensaries_superAdmin';
  name: Scalars['String'];
  role: Dispensaries_SuperAdminRole;
  userId: Scalars['String'];
};

export enum Dispensaries_SuperAdminRole {
  accountExecutive = 'AccountExecutive',
  accountManagerPrimary = 'AccountManagerPrimary',
  accountManagerSecondary = 'AccountManagerSecondary',
  customerSuccessManager = 'CustomerSuccessManager'
}

export type GqlDispensaries_Terminals = {
  __typename?: 'Dispensaries_terminals';
  _id?: Maybe<Scalars['String']>;
  config?: Maybe<GqlDevice_Config>;
  /** @deprecated Use ISO field */
  lastSeenAt?: Maybe<Scalars['String']>;
  lastSeenAtISO?: Maybe<Scalars['ISODateTime']>;
  nickname?: Maybe<Scalars['String']>;
  versionNumber?: Maybe<Scalars['String']>;
};

export type GqlDispensaries_Webhook = {
  __typename?: 'Dispensaries_webhook';
  event: Dispensaries_Webhook_Events;
  method: Dispensaries_Webhook_Methods;
  orderType?: Maybe<Dispensaries_Webhook_Ordertypes>;
  url: Scalars['String'];
};

export enum Dispensaries_Webhook_Events {
  orderCreated = 'order_created',
  orderUpdated = 'order_updated'
}

export enum Dispensaries_Webhook_Methods {
  delete = 'DELETE',
  get = 'GET',
  patch = 'PATCH',
  post = 'POST',
  put = 'PUT'
}

export enum Dispensaries_Webhook_Ordertypes {
  curbside = 'curbside',
  delivery = 'delivery',
  pickup = 'pickup'
}

export type GqlDispensaryAccountManagers = {
  __typename?: 'DispensaryAccountManagers';
  name?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type GqlDispensaryAssetUploadResponse = {
  __typename?: 'DispensaryAssetUploadResponse';
  fileIds?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlDispensaryBilling = {
  __typename?: 'DispensaryBilling';
  billingSubscription: GqlBillingSubscription;
  chain?: Maybe<Scalars['Boolean']>;
  chargebeeCustomer?: Maybe<GqlChargebeeCustomer>;
  chargebeeCustomerId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  paymentSources?: Maybe<Array<Maybe<GqlChargebeePaymentSource>>>;
};

export type GqlDispensaryBillingV2 = {
  __typename?: 'DispensaryBillingV2';
  chain?: Maybe<Scalars['Boolean']>;
  chargebeeCustomer?: Maybe<GqlChargebeeCustomer>;
  paymentSources?: Maybe<Array<Maybe<GqlChargebeePaymentSource>>>;
  retailerId?: Maybe<Scalars['ID']>;
};

export type GqlDispensaryDropdownOption = {
  __typename?: 'DispensaryDropdownOption';
  key?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlDispensaryHoursSettings = {
  __typename?: 'DispensaryHoursSettings';
  curbsidePickup?: Maybe<GqlHoursSettingsForOrderType>;
  delivery?: Maybe<GqlHoursSettingsForOrderType>;
  driveThruPickup?: Maybe<GqlHoursSettingsForOrderType>;
  inStorePickup?: Maybe<GqlHoursSettingsForOrderType>;
};

export enum DispensaryOrderType {
  all = 'All',
  deliveryOnly = 'DeliveryOnly',
  kiosk = 'Kiosk',
  pickupAndDelivery = 'PickupAndDelivery',
  pickupOnly = 'PickupOnly'
}

export enum DispensaryRoles {
  complianceAndLegal = 'complianceAndLegal',
  customerSales = 'customerSales',
  customerSupport = 'customerSupport',
  financeAndAccounting = 'financeAndAccounting',
  fulfillmentAndDelivery = 'fulfillmentAndDelivery',
  informationTechnology = 'informationTechnology',
  inventoryManagement = 'inventoryManagement',
  marketingAndPromotions = 'marketingAndPromotions',
  storeOperations = 'storeOperations',
  unknown = 'unknown'
}

export enum DispensarySortByType {
  deliveryEstimate = 'deliveryEstimate',
  deliveryFee = 'deliveryFee',
  deliveryMin = 'deliveryMin',
  distance = 'distance',
  integration = 'integration',
  pickupTime = 'pickupTime',
  terminal = 'terminal'
}

export type GqlDispensaryStreamToken = {
  __typename?: 'DispensaryStreamToken';
  dispensaryId?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

export type GqlDriveThruPickupOrderingSettings = GqlBaseOrderingSettings & {
  __typename?: 'DriveThruPickupOrderingSettings';
  enableASAPOrdering?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrdering?: Maybe<Scalars['Boolean']>;
  enableScheduledOrdering?: Maybe<Scalars['Boolean']>;
  orderMinimum?: Maybe<GqlOrderMinimum>;
  paymentTypes?: Maybe<GqlPaymentTypesConfig>;
  /** @deprecated replaced by v2 to remove slots from type - RTL 8/9/21 */
  scheduledOrderingConfig?: Maybe<GqlReservationOptionsForOrderType>;
  scheduledOrderingConfigV2?: Maybe<GqlScheduledOrderingConfigV2>;
};

export type GqlDropdownOption = {
  __typename?: 'DropdownOption';
  key?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlDurationEstimateRange = {
  __typename?: 'DurationEstimateRange';
  enabled?: Maybe<Scalars['Boolean']>;
  highInMinutes?: Maybe<Scalars['Float']>;
  lowInMinutes?: Maybe<Scalars['Float']>;
};

export type GqlDurationEstimates = {
  __typename?: 'DurationEstimates';
  delivery?: Maybe<GqlDurationEstimateRange>;
  enabled?: Maybe<Scalars['Boolean']>;
  pickup?: Maybe<GqlDurationEstimateRange>;
};

export type GqlDutchiePay = {
  __typename?: 'DutchiePay';
  preAuth?: Maybe<GqlDutchiePayPreAuth>;
};

export type GqlDutchiePayPaymentMethod = {
  __typename?: 'DutchiePayPaymentMethod';
  bankAccount?: Maybe<GqlBankDetails>;
  billingAddress?: Maybe<GqlBillingAddress>;
  createdAt?: Maybe<GqlGoogleProtobufTimestamp>;
  entity?: Maybe<GqlEntity>;
  id: Scalars['String'];
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlDutchiePayPreAuth = {
  __typename?: 'DutchiePayPreAuth';
  amount: Scalars['Int'];
  callbackUrl: Scalars['String'];
  currency: Scalars['Int'];
  paymentId: Scalars['String'];
};

export type GqlEcommerceAbandonedCartsResponse = {
  __typename?: 'EcommerceAbandonedCartsResponse';
  carts?: Maybe<Array<Maybe<GqlCartSummary>>>;
  meta?: Maybe<GqlAnalyticsMeta>;
};

export type GqlEcommerceConversionFunnel = {
  __typename?: 'EcommerceConversionFunnel';
  addedToCart?: Maybe<GqlEcommercePercent>;
  interacted?: Maybe<GqlEcommercePercent>;
  placedOrder?: Maybe<GqlEcommercePercent>;
  visitedCheckout?: Maybe<GqlEcommercePercent>;
  visitedMenu?: Maybe<GqlEcommercePercent>;
};

export type GqlEcommerceDataPointsResponse = {
  __typename?: 'EcommerceDataPointsResponse';
  abandonment?: Maybe<GqlEcommercePercent>;
  conversion?: Maybe<GqlEcommercePercent>;
  conversionFunnel?: Maybe<GqlEcommerceConversionFunnel>;
  order?: Maybe<GqlEcommerceValue>;
  repeatCustomers?: Maybe<GqlEcommercePercent>;
};

export type GqlEcommercePercent = {
  __typename?: 'EcommercePercent';
  currentValue?: Maybe<Scalars['Float']>;
  percentOfVisits?: Maybe<Scalars['Float']>;
  unitDifferenceFromLastPeriod?: Maybe<Scalars['Float']>;
};

export type GqlEcommerceValue = {
  __typename?: 'EcommerceValue';
  currentValue?: Maybe<Scalars['Float']>;
  percentDifference?: Maybe<Scalars['Float']>;
};

export enum Effect {
  body = 'BODY',
  calm = 'CALM',
  clearMind = 'CLEAR_MIND',
  comfort = 'COMFORT',
  creative = 'CREATIVE',
  energetic = 'ENERGETIC',
  euphoric = 'EUPHORIC',
  focused = 'FOCUSED',
  happy = 'HAPPY',
  inspired = 'INSPIRED',
  joints = 'JOINTS',
  mind = 'MIND',
  muscles = 'MUSCLES',
  painRelief = 'PAIN_RELIEF',
  relaxed = 'RELAXED',
  skinHealth = 'SKIN_HEALTH',
  sleepy = 'SLEEPY'
}

export type GqlEffectiveHours = {
  __typename?: 'EffectiveHours';
  /** @deprecated new HoursSettingsForOrderType in hours-settings has effective hours per order type */
  deliveryHours?: Maybe<GqlDispensaries_Profile_Hours>;
  /** @deprecated new HoursSettingsForOrderType in hours-settings has effective hours per order type */
  pickupHours?: Maybe<GqlDispensaries_Profile_Hours>;
};

export type GqlEnabledOrderTypes = {
  __typename?: 'EnabledOrderTypes';
  curbsidePickup?: Maybe<Scalars['Boolean']>;
  delivery?: Maybe<Scalars['Boolean']>;
  driveThruPickup?: Maybe<Scalars['Boolean']>;
  inStorePickup?: Maybe<Scalars['Boolean']>;
  kiosk?: Maybe<Scalars['Boolean']>;
  pickup?: Maybe<Scalars['Boolean']>;
};

export type GqlEnterprise = {
  __typename?: 'Enterprise';
  accountTier?: Maybe<Scalars['String']>;
  billingVersion: Scalars['Int'];
  createdAt: Scalars['ISODateTime'];
  id: Scalars['ID'];
  name: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  primaryContactId?: Maybe<Scalars['ID']>;
  retailerGroups: Array<GqlRetailerGroup>;
  retailers: Array<GqlRetailer>;
  uniqueName: Scalars['String'];
  updatedAt: Scalars['ISODateTime'];
  website?: Maybe<Scalars['String']>;
};

export type GqlEnterpriseBrand = {
  __typename?: 'EnterpriseBrand';
  name?: Maybe<Scalars['String']>;
  productIds?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlEnterpriseCategory = {
  __typename?: 'EnterpriseCategory';
  category?: Maybe<Scalars['String']>;
  productIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  subcategory?: Maybe<Scalars['String']>;
};

export type GqlEnterpriseDispensaryProduct = {
  __typename?: 'EnterpriseDispensaryProduct';
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  /** @deprecated Wrong location and not used. (ENG-25806) 04/11/2022 */
  medicalOnly?: Maybe<Scalars['Boolean']>;
  /** @deprecated Wrong location and not used. (ENG-25806) 04/11/2022 */
  recOnly?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
};

export type GqlEnterpriseProduct = {
  __typename?: 'EnterpriseProduct';
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  dispensaryProducts?: Maybe<Array<Maybe<GqlEnterpriseDispensaryProduct>>>;
  enterpriseProductId?: Maybe<Scalars['String']>;
  medicalOnly?: Maybe<Scalars['Boolean']>;
  medicalPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  name?: Maybe<Scalars['String']>;
  options?: Maybe<Array<Maybe<Scalars['String']>>>;
  prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  recOnly?: Maybe<Scalars['Boolean']>;
  recPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  subcategory?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlEnterpriseProducts = {
  __typename?: 'EnterpriseProducts';
  brands?: Maybe<Array<Maybe<GqlEnterpriseBrand>>>;
  categories?: Maybe<Array<Maybe<GqlEnterpriseCategory>>>;
  products?: Maybe<Array<Maybe<GqlEnterpriseProduct>>>;
};

export type GqlEnterpriseSpecial = {
  __typename?: 'EnterpriseSpecial';
  _id?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  bogoConditionLogicOperator?: Maybe<Scalars['String']>;
  bogoConditions?: Maybe<Array<Maybe<GqlBogoConditionItem>>>;
  bogoRewardLogicOperator?: Maybe<Scalars['String']>;
  bogoRewards?: Maybe<Array<Maybe<GqlBogoRewardItem>>>;
  cipher?: Maybe<Scalars['JSON']>;
  clicks?: Maybe<Scalars['Int']>;
  complete?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  createdBy?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  discount?: Maybe<Scalars['String']>;
  discountPrecedence?: Maybe<Scalars['String']>;
  discountStacking?: Maybe<Scalars['Boolean']>;
  discountToCart?: Maybe<GqlDiscountToCart>;
  discountedPrices?: Maybe<Scalars['JSON']>;
  dispensaries?: Maybe<Array<Maybe<Scalars['String']>>>;
  dispensaryId?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['Int']>;
  dollarDiscount?: Maybe<Scalars['Boolean']>;
  duplicatedFrom?: Maybe<Scalars['String']>;
  earliestStartStamp?: Maybe<Scalars['ISODateTime']>;
  emailSpecial?: Maybe<Scalars['Boolean']>;
  endDay?: Maybe<Scalars['ISODateTime']>;
  endStamp?: Maybe<Scalars['ISODateTime']>;
  endTime?: Maybe<Scalars['String']>;
  enterpriseId?: Maybe<Scalars['String']>;
  enterpriseSpecialId?: Maybe<Scalars['String']>;
  excludedProducts?: Maybe<Array<Maybe<GqlSpecialsExcludedProducts>>>;
  heading?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  inactiveDispensaries?: Maybe<Array<Maybe<Scalars['String']>>>;
  isRecurring?: Maybe<Scalars['Boolean']>;
  itemsForAPrice?: Maybe<GqlItemsForAPrice>;
  latestEndStamp?: Maybe<Scalars['ISODateTime']>;
  localTime?: Maybe<Scalars['Boolean']>;
  menuDisplayDescription?: Maybe<Scalars['String']>;
  menuDisplayImage?: Maybe<Scalars['String']>;
  menuDisplayName?: Maybe<Scalars['String']>;
  menuType?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  percentDiscount?: Maybe<Scalars['Boolean']>;
  productDiscounts?: Maybe<Scalars['JSON']>;
  productGroup?: Maybe<Scalars['String']>;
  productGroupRewards?: Maybe<Scalars['String']>;
  products?: Maybe<Array<Maybe<Scalars['String']>>>;
  recurring?: Maybe<GqlSpecialsRecurring>;
  redemptionLimit?: Maybe<Scalars['Int']>;
  /** @deprecated Use dispensaries instead. 11/11/2021 */
  retailers?: Maybe<Array<Maybe<Scalars['String']>>>;
  scope?: Maybe<SpecialScopes>;
  source?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  specialRestrictions?: Maybe<Scalars['JSON']>;
  specialType?: Maybe<SpecialTypes>;
  stackingBehavior?: Maybe<Scalars['String']>;
  stackingMode?: Maybe<Scalars['String']>;
  startDay?: Maybe<Scalars['ISODateTime']>;
  startStamp?: Maybe<Scalars['ISODateTime']>;
  startTime?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  targetPrice?: Maybe<Scalars['Boolean']>;
  timezone?: Maybe<Scalars['String']>;
  totalQuantity?: Maybe<GqlTotalQuantity>;
  totalSpend?: Maybe<GqlTotalSpend>;
  totalWeight?: Maybe<GqlTotalWeight>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['Int']>;
};

export type GqlEnterpriseSpecialInputV2 = {
  _id?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  applicableToItemsOnSpecial?: Maybe<Scalars['Boolean']>;
  applicationMethod?: Maybe<SpecialApplicationMethodTypes>;
  bogoConditionLogicOperator?: Maybe<Scalars['String']>;
  bogoConditions?: Maybe<Array<Maybe<GqlBogoConditionItemInput>>>;
  bogoRewardLogicOperator?: Maybe<Scalars['String']>;
  bogoRewards?: Maybe<Array<Maybe<GqlBogoRewardItemInput>>>;
  cipher?: Maybe<Scalars['JSON']>;
  code?: Maybe<Scalars['String']>;
  complete?: Maybe<Scalars['Boolean']>;
  conditionLogicOperator?: Maybe<LogicOperator>;
  conditions?: Maybe<Array<Maybe<GqlV4ConditionInput>>>;
  consumerGroupIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  createdBy?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  discount?: Maybe<Scalars['String']>;
  discountBundle?: Maybe<GqlDiscountBundleInput>;
  discountPrecedence?: Maybe<Scalars['String']>;
  discountStacking?: Maybe<Scalars['Boolean']>;
  discountToCart?: Maybe<GqlDiscountToCartInput>;
  discountedPrices?: Maybe<Scalars['JSON']>;
  dispensaries?: Maybe<Array<Maybe<Scalars['String']>>>;
  displayRank?: Maybe<Scalars['Int']>;
  dollarDiscount?: Maybe<Scalars['Boolean']>;
  duplicatedFrom?: Maybe<Scalars['String']>;
  earliestStartStamp?: Maybe<Scalars['ISODateTime']>;
  editedStartStamp?: Maybe<Scalars['String']>;
  email?: Maybe<GqlSpecialEmailInput>;
  emailSpecial?: Maybe<Scalars['Boolean']>;
  endDay?: Maybe<Scalars['String']>;
  endStamp?: Maybe<Scalars['String']>;
  endTime?: Maybe<Scalars['String']>;
  enterpriseId?: Maybe<Scalars['String']>;
  enterpriseSpecialId?: Maybe<Scalars['String']>;
  excludedProducts?: Maybe<Array<Maybe<GqlSpecialsExcludedProductsInput>>>;
  firstTimeConsumerOnly?: Maybe<Scalars['Boolean']>;
  generatedByPOS?: Maybe<Scalars['Boolean']>;
  heading?: Maybe<Scalars['String']>;
  inactiveDispensaries?: Maybe<Array<Maybe<Scalars['String']>>>;
  inactiveDispensaryIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  isAvailableOnline?: Maybe<Scalars['Boolean']>;
  isRecurring?: Maybe<Scalars['Boolean']>;
  itemsForAPrice?: Maybe<GqlItemsForAPriceInput>;
  latestEndStamp?: Maybe<Scalars['ISODateTime']>;
  localTime?: Maybe<Scalars['Boolean']>;
  loyaltyPointsToRedeem?: Maybe<Scalars['Int']>;
  manualDefaultApplyTo?: Maybe<ManualDefaultApplyTo>;
  menuDisplay?: Maybe<GqlSpecialMenuDisplayInput>;
  menuDisplayDescription?: Maybe<Scalars['String']>;
  menuDisplayImage?: Maybe<Scalars['String']>;
  menuDisplayName?: Maybe<Scalars['String']>;
  menuType?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  orderType?: Maybe<OrderType>;
  origin?: Maybe<Scalars['String']>;
  originId?: Maybe<Scalars['String']>;
  percentDiscount?: Maybe<Scalars['Boolean']>;
  productDiscounts?: Maybe<Array<Maybe<GqlProductDiscount>>>;
  productGroup?: Maybe<Scalars['String']>;
  productGroupRewards?: Maybe<Scalars['String']>;
  products?: Maybe<Array<Maybe<Scalars['String']>>>;
  quantityUsed?: Maybe<Scalars['Int']>;
  recurring?: Maybe<GqlSpecialsInputRecurring>;
  redemptionLimit?: Maybe<Scalars['Int']>;
  redemptionLimitPerCart?: Maybe<Scalars['Int']>;
  redemptionLimitPerUser?: Maybe<Scalars['Int']>;
  reimbursed?: Maybe<Scalars['Boolean']>;
  requireManagerApproval?: Maybe<Scalars['Boolean']>;
  rewardLogicOperator?: Maybe<LogicOperator>;
  rewards?: Maybe<Array<Maybe<GqlV4RewardInput>>>;
  schedule?: Maybe<GqlSpecialScheduleInput>;
  scope?: Maybe<SpecialScopes>;
  source?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  specialId?: Maybe<Scalars['String']>;
  specialRestrictions?: Maybe<Array<Maybe<GqlSpecialRestriction>>>;
  specialType?: Maybe<Scalars['String']>;
  specialVersion?: Maybe<Scalars['Int']>;
  stackingBehavior?: Maybe<Scalars['String']>;
  stackingMode?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['String']>;
  startDay?: Maybe<Scalars['String']>;
  startStamp?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  status?: Maybe<SpecialStatus>;
  subject?: Maybe<Scalars['String']>;
  targetPrice?: Maybe<Scalars['Boolean']>;
  timezone?: Maybe<Scalars['String']>;
  totalAllowedUses?: Maybe<Scalars['Int']>;
  totalQuantity?: Maybe<GqlTotalQuantityInput>;
  totalSpend?: Maybe<GqlTotalSpendInput>;
  totalWeight?: Maybe<GqlTotalWeightInput>;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  usedBy?: Maybe<Array<Maybe<Scalars['String']>>>;
  version?: Maybe<Scalars['Int']>;
};

export type GqlEnterpriseSpecialsHistory = {
  __typename?: 'EnterpriseSpecialsHistory';
  enterpriseSpecialId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  versions?: Maybe<Array<Maybe<GqlEnterpriseSpecial>>>;
};

export type GqlEntity = {
  __typename?: 'Entity';
  externalId?: Maybe<Scalars['String']>;
  externalType?: Maybe<EntityTypes>;
  name?: Maybe<Scalars['String']>;
};

export enum EntityTypes {
  dispensary = 'Dispensary',
  user = 'User'
}

export type GqlErrorMessage = {
  __typename?: 'ErrorMessage';
  message: Scalars['String'];
};

export type GqlEstimateRangeInput = {
  max?: Maybe<Scalars['Int']>;
  min?: Maybe<Scalars['Int']>;
};

export type GqlExcludedBogoProduct = {
  __typename?: 'ExcludedBOGOProduct';
  Name?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

export type GqlExcludedBogoProducts = {
  __typename?: 'ExcludedBOGOProducts';
  conditions?: Maybe<Array<Maybe<GqlExcludedBogoProduct>>>;
  rewards?: Maybe<Array<Maybe<GqlExcludedBogoProduct>>>;
};

export type GqlExists = {
  __typename?: 'Exists';
  _id?: Maybe<Scalars['String']>;
  exists?: Maybe<Scalars['Boolean']>;
};

export type GqlExport = {
  __typename?: 'Export';
  id: Scalars['ID'];
  url: Scalars['String'];
};

export type GqlFeeTiersInput = {
  feeInCents?: Maybe<Scalars['Int']>;
  feeType?: Maybe<FeeTypes>;
  maximumInCents?: Maybe<Scalars['Int']>;
  minimumInCents?: Maybe<Scalars['Int']>;
  percentFee?: Maybe<Scalars['Float']>;
};

export enum FeeTypes {
  flat = 'flat',
  percent = 'percent'
}

export type GqlFilteredBrandSummaryResponse = {
  __typename?: 'FilteredBrandSummaryResponse';
  brands?: Maybe<Array<Maybe<GqlBrandSummary>>>;
  meta?: Maybe<GqlAnalyticsMeta>;
};

export type GqlFilteredEnterpriseSpecials = {
  __typename?: 'FilteredEnterpriseSpecials';
  queryInfo?: Maybe<GqlFilteredSpecialsInfo>;
  specials?: Maybe<Array<Maybe<GqlEnterpriseSpecial>>>;
};

export type GqlFilteredProductSummaryResponse = {
  __typename?: 'FilteredProductSummaryResponse';
  meta?: Maybe<GqlAnalyticsMeta>;
  products?: Maybe<Array<Maybe<GqlProductSummary>>>;
};

export type GqlFilteredSpecials = {
  __typename?: 'FilteredSpecials';
  queryInfo?: Maybe<GqlFilteredSpecialsInfo>;
  specials?: Maybe<Array<Maybe<GqlSpecials>>>;
};

export type GqlFilteredSpecialsInfo = {
  __typename?: 'FilteredSpecialsInfo';
  totalCount?: Maybe<Scalars['Int']>;
};

export type GqlFindLibraryProductsResponse = {
  __typename?: 'FindLibraryProductsResponse';
  libraryProducts?: Maybe<Array<Maybe<GqlLibraryProduct>>>;
};

export type GqlFontSettings = {
  __typename?: 'FontSettings';
  family: CustomFont;
};

export type GqlFontSettingsInput = {
  family: CustomFont;
};

export type GqlGenericExportResponse = {
  __typename?: 'GenericExportResponse';
  count?: Maybe<Scalars['Int']>;
  success?: Maybe<Scalars['Boolean']>;
};

export type GqlGenericResponse = {
  __typename?: 'GenericResponse';
  message?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
};

export type GqlGeoJson_Features = {
  __typename?: 'GeoJson_features';
  geometry?: Maybe<GqlGeoJson_Geometry>;
  type?: Maybe<Scalars['String']>;
};

export type GqlGeoJson_FeaturesInput = {
  geometry?: Maybe<GqlGeoJson_GeometryInput>;
  type?: Maybe<Scalars['String']>;
};

export type GqlGeoJson_Geometry = {
  __typename?: 'GeoJson_geometry';
  coordinates?: Maybe<Scalars['JSON']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlGeoJson_GeometryInput = {
  coordinates?: Maybe<Array<Maybe<Array<Maybe<Array<Maybe<Scalars['Float']>>>>>>>;
  type?: Maybe<Scalars['String']>;
};

export type GqlGeographicSearchBounds = {
  lat: Scalars['String'];
  lon: Scalars['String'];
  radius: Scalars['String'];
};

export type GqlGetAchPaymentDetailsResponse = {
  __typename?: 'GetAchPaymentDetailsResponse';
  payment?: Maybe<GqlPayment>;
};

export type GqlGetAchPaymentFraudAssessmentsResponse = {
  __typename?: 'GetAchPaymentFraudAssessmentsResponse';
  assessments: Array<GqlAssessment>;
};

export type GqlGetOrderSortInput = {
  desc: Scalars['Boolean'];
  id: Scalars['String'];
};

export type GqlGetOrderType = {
  __typename?: 'GetOrderType';
  archived?: Maybe<Scalars['Boolean']>;
  order?: Maybe<GqlOrders>;
};

export type GqlGetRawAchBatchFileResponse = {
  __typename?: 'GetRawAchBatchFileResponse';
  data?: Maybe<GqlAchRawBatchFile>;
};

export type GqlGlobalReward = {
  __typename?: 'GlobalReward';
  amountOff?: Maybe<Scalars['Int']>;
  discountType?: Maybe<DiscountType>;
  discountedPrice?: Maybe<Scalars['Int']>;
  enabled?: Maybe<Scalars['Boolean']>;
  percentDiscount?: Maybe<Scalars['Float']>;
};

export type GqlGlobalRewardInput = {
  amountOff?: Maybe<Scalars['Int']>;
  discountType?: Maybe<DiscountType>;
  discountedPrice?: Maybe<Scalars['Int']>;
  enabled?: Maybe<Scalars['Boolean']>;
  percentDiscount?: Maybe<Scalars['Float']>;
};

export type GqlGlobalThreshold = {
  __typename?: 'GlobalThreshold';
  comparisonOperator?: Maybe<ComparisonOperators>;
  price?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  thresholdType?: Maybe<GlobalThresholdType>;
  weight?: Maybe<GqlWeight>;
};

export type GqlGlobalThresholdInput = {
  comparisonOperator?: Maybe<ComparisonOperators>;
  price?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  thresholdType?: Maybe<GlobalThresholdType>;
  weight?: Maybe<GqlWeightInput>;
};

export enum GlobalThresholdType {
  totalPrice = 'TOTAL_PRICE',
  totalQuantity = 'TOTAL_QUANTITY',
  totalWeight = 'TOTAL_WEIGHT'
}

export type GqlGoogleProtobufTimestamp = {
  __typename?: 'GoogleProtobufTimestamp';
  nanos?: Maybe<Scalars['Int']>;
  seconds?: Maybe<Scalars['Int']>;
};

export type GqlHoursForOrderType = {
  effectiveHours?: Maybe<GqlWeeklyHoursInput>;
  hours?: Maybe<GqlWeeklyHoursInput>;
  specialHours?: Maybe<Array<Maybe<GqlSpecialHoursSettingsInput>>>;
};

export type GqlHoursSettingsForOrderType = {
  __typename?: 'HoursSettingsForOrderType';
  effectiveHours?: Maybe<GqlWeeklyHours>;
  hours?: Maybe<GqlWeeklyHours>;
  specialHours?: Maybe<Array<Maybe<GqlSpecialHours>>>;
};

export type GqlHoursSettingsForOrderTypeInput = {
  hours?: Maybe<GqlWeeklyHoursInput>;
  specialHours?: Maybe<Array<Maybe<GqlSpecialHoursSettingsInput>>>;
};

export type GqlHoursSettingsUpdateInput = {
  curbsidePickup?: Maybe<GqlHoursSettingsForOrderTypeInput>;
  delivery?: Maybe<GqlHoursSettingsForOrderTypeInput>;
  dispensaryId: Scalars['String'];
  driveThruPickup?: Maybe<GqlHoursSettingsForOrderTypeInput>;
  inStorePickup?: Maybe<GqlHoursSettingsForOrderTypeInput>;
};

export type GqlHypurDetails = {
  __typename?: 'HypurDetails';
  id: Scalars['String'];
};

export type GqlHypurRedirect = {
  __typename?: 'HypurRedirect';
  url: Scalars['String'];
};

export type GqlHypurToken = {
  __typename?: 'HypurToken';
  accessToken: Scalars['String'];
  embedded: Scalars['Boolean'];
};

export type GqlIpInfo = {
  __typename?: 'IPInfo';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  hostname?: Maybe<Scalars['String']>;
  ip?: Maybe<Scalars['String']>;
  loc?: Maybe<Scalars['String']>;
  org?: Maybe<Scalars['String']>;
  postal?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};



export type GqlIdImage = {
  __typename?: 'IdImage';
  key?: Maybe<Scalars['String']>;
};

export type GqlIdUrl = {
  __typename?: 'IdUrl';
  url?: Maybe<Scalars['String']>;
};

export type GqlIdentityAdmin = {
  __typename?: 'IdentityAdmin';
  _id: Scalars['ID'];
  chainDispensaryIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  dispensary?: Maybe<GqlDispensaries>;
  emails: Array<Maybe<GqlUserEmails>>;
  enterpriseId?: Maybe<Scalars['ID']>;
  profile: GqlIdentityAdminProfile;
  zendeskSingleSignOnToken?: Maybe<Scalars['String']>;
  zendeskWidgetToken?: Maybe<Scalars['String']>;
};

export type GqlIdentityAdminProfile = {
  __typename?: 'IdentityAdminProfile';
  acceptedTOS?: Maybe<Scalars['ISODateTime']>;
  active?: Maybe<Scalars['Boolean']>;
  audioNotificationsOnNewArrivalsDisabled?: Maybe<Scalars['Boolean']>;
  audioNotificationsOnNewOrdersDisabled?: Maybe<Scalars['Boolean']>;
  browserNotification?: Maybe<Scalars['Boolean']>;
  chainID?: Maybe<Scalars['String']>;
  chainId?: Maybe<Scalars['String']>;
  desktopNotification?: Maybe<Scalars['Boolean']>;
  dispensaryId?: Maybe<Scalars['String']>;
  emailNotifications?: Maybe<Scalars['Boolean']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  firstViewedTOS?: Maybe<Scalars['ISODateTime']>;
  fullName?: Maybe<Scalars['String']>;
  isWeeklyReportEnabled?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  managedBrandIds?: Maybe<Array<Scalars['ID']>>;
  parentBrandId?: Maybe<Scalars['ID']>;
  permissions?: Maybe<GqlIdentityAdminProfilePermissions>;
  phone?: Maybe<Scalars['String']>;
  roleAtDispensary?: Maybe<DispensaryRoles>;
  streamTokens?: Maybe<Array<Maybe<GqlDispensaryStreamToken>>>;
  textNotifications?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlIdentityAdminProfilePermissions = {
  __typename?: 'IdentityAdminProfilePermissions';
  allLocations: Scalars['Boolean'];
  analytics: Scalars['Boolean'];
  billing: Scalars['Boolean'];
  customers: Scalars['Boolean'];
  dispensaryIds?: Maybe<Array<Scalars['String']>>;
  driver: Scalars['Boolean'];
  editBrandUsers?: Maybe<Scalars['Boolean']>;
  enterpriseAdmin?: Maybe<Scalars['Boolean']>;
  enterpriseSpecials?: Maybe<Scalars['Boolean']>;
  /** @deprecated Use manageBrandGroup */
  manageAllBrands?: Maybe<Scalars['Boolean']>;
  manageBrandGroup?: Maybe<Scalars['Boolean']>;
  manageBrands?: Maybe<Scalars['Boolean']>;
  menu: Scalars['Boolean'];
  menuReview?: Maybe<Scalars['Boolean']>;
  messaging: Scalars['Boolean'];
  orders: Scalars['Boolean'];
  promote: Scalars['Boolean'];
  settings: Scalars['Boolean'];
  superMenuReview?: Maybe<Scalars['Boolean']>;
  tasks?: Maybe<Scalars['Boolean']>;
  techSupportFeatures?: Maybe<Scalars['Boolean']>;
  users: Scalars['Boolean'];
};

export type GqlIdentityConsumer = {
  __typename?: 'IdentityConsumer';
  _id: Scalars['ID'];
  createdAt?: Maybe<Scalars['ISODateTime']>;
  emails: Array<Maybe<GqlUserEmails>>;
  profile: GqlIdentityConsumerProfile;
};

export type GqlIdentityConsumerProfile = {
  __typename?: 'IdentityConsumerProfile';
  address?: Maybe<GqlConsumerUserProfileAddressType>;
  birthday?: Maybe<Scalars['String']>;
  emailNotifications?: Maybe<Scalars['Boolean']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  emailSubscription?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  medicalCard?: Maybe<GqlConsumerUserMedicalCard>;
  phone?: Maybe<Scalars['String']>;
  photoId?: Maybe<Scalars['String']>;
  textNotifications?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlImageBanner = {
  __typename?: 'ImageBanner';
  _id: Scalars['String'];
  alt?: Maybe<Scalars['String']>;
  image: Scalars['String'];
  link?: Maybe<Scalars['String']>;
  mobileImage: Scalars['String'];
  position: Scalars['Int'];
};

export enum ImageOrigin {
  admin = 'admin',
  library = 'library',
  pos = 'pos'
}

export enum ImageVariantKeyEnum {
  specialLogoImage = 'SpecialLogoImage',
  bannerImage = 'bannerImage',
  embeddedLogoImage = 'embeddedLogoImage',
  listImage = 'listImage',
  logoImage = 'logoImage'
}

export type GqlImgixSettings = {
  __typename?: 'ImgixSettings';
  border?: Maybe<Scalars['String']>;
  fit?: Maybe<ImgixSettings_FitType>;
  mark?: Maybe<Scalars['String']>;
  markpad?: Maybe<Scalars['Int']>;
  markscale?: Maybe<Scalars['Int']>;
};

export enum ImgixSettings_FitType {
  crop = 'crop',
  fill = 'fill',
  fillmax = 'fillmax'
}

export type GqlImportMenuCsvInput = {
  customFieldMapping?: Maybe<Array<Maybe<GqlIntegrationsCustomFieldInput>>>;
  id: Scalars['String'];
  menuImportData?: Maybe<Scalars['String']>;
};

export type GqlInStorePickupOrderingSettings = GqlBaseOrderingSettings & {
  __typename?: 'InStorePickupOrderingSettings';
  enableASAPOrdering?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrdering?: Maybe<Scalars['Boolean']>;
  enableScheduledOrdering?: Maybe<Scalars['Boolean']>;
  orderMinimum?: Maybe<GqlOrderMinimum>;
  paymentTypes?: Maybe<GqlPaymentTypesConfig>;
  /** @deprecated replaced by v2 to remove slots from type - RTL 8/9/21 */
  scheduledOrderingConfig?: Maybe<GqlReservationOptionsForOrderType>;
  scheduledOrderingConfigV2?: Maybe<GqlScheduledOrderingConfigV2>;
};

export type GqlIntegrations = {
  __typename?: 'Integrations';
  _id?: Maybe<Scalars['String']>;
  adapter?: Maybe<Scalars['String']>;
  categoryMapping?: Maybe<Array<Maybe<GqlIntegrationsCategoryMapping>>>;
  credentials?: Maybe<Scalars['JSON']>;
  crmPropertyMapping?: Maybe<Array<Maybe<GqlIntegrationsPropertyMapping>>>;
  dispensaryId?: Maybe<Scalars['String']>;
  failedSyncs?: Maybe<Scalars['Int']>;
  fieldMapping?: Maybe<Array<Maybe<GqlIntegrationsFieldMapping>>>;
  flags?: Maybe<Scalars['JSON']>;
  integrationCategory?: Maybe<Scalars['String']>;
  integrationType?: Maybe<Scalars['String']>;
  isRunning?: Maybe<Scalars['Boolean']>;
  kioskThresholds?: Maybe<Scalars['JSON']>;
  lastImportedAtISO?: Maybe<Scalars['ISODateTime']>;
  /** @deprecated Use ISO field */
  lastSyncAt?: Maybe<Scalars['String']>;
  lastSyncAtISO?: Maybe<Scalars['ISODateTime']>;
  live?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<GqlIntegrationsMeta>;
  pending?: Maybe<Scalars['Boolean']>;
  syncFailureMessage?: Maybe<Scalars['String']>;
  syncFailureType?: Maybe<Scalars['String']>;
  thresholds?: Maybe<Scalars['JSON']>;
  types?: Maybe<Scalars['JSON']>;
  weights?: Maybe<Scalars['JSON']>;
};

export type GqlIntegrationsAdapterStatus = {
  __typename?: 'IntegrationsAdapterStatus';
  message?: Maybe<Scalars['String']>;
  status?: Maybe<IntegrationsAdapterStatusCode>;
};

export enum IntegrationsAdapterStatusCode {
  degraded = 'DEGRADED',
  down = 'DOWN',
  normal = 'NORMAL'
}

export type GqlIntegrationsCategoryMapping = {
  __typename?: 'IntegrationsCategoryMapping';
  foreignCategory?: Maybe<Scalars['String']>;
  localCategory?: Maybe<Scalars['String']>;
  localSubcategory?: Maybe<Scalars['String']>;
};

export type GqlIntegrationsCustomFieldInput = {
  foreignField?: Maybe<Scalars['String']>;
  localField?: Maybe<Scalars['String']>;
};

export type GqlIntegrationsCustomPropertyInput = {
  foreignProperty?: Maybe<Scalars['String']>;
  localProperty?: Maybe<Scalars['String']>;
};

export type GqlIntegrationsCustomTypeInput = {
  foreignCategory?: Maybe<Scalars['String']>;
  localCategory?: Maybe<Scalars['String']>;
  localSubcategory?: Maybe<Scalars['String']>;
};

export type GqlIntegrationsFieldMapping = {
  __typename?: 'IntegrationsFieldMapping';
  foreignField?: Maybe<Scalars['String']>;
  localField?: Maybe<Scalars['String']>;
};

export type GqlIntegrationsMeta = {
  __typename?: 'IntegrationsMeta';
  custom_types?: Maybe<Array<Maybe<Scalars['String']>>>;
  shopifyFields?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlIntegrationsPropertyMapping = {
  __typename?: 'IntegrationsPropertyMapping';
  foreignProperty?: Maybe<Scalars['String']>;
  localProperty?: Maybe<Scalars['String']>;
};

export type GqlIntegrationsUpdateCrmFieldsInput = {
  crmPropertyMapping?: Maybe<Array<Maybe<GqlIntegrationsCustomPropertyInput>>>;
  id: Scalars['String'];
};

export type GqlIntegrationsUpdateFieldsInput = {
  customFieldMapping?: Maybe<Array<Maybe<GqlIntegrationsCustomFieldInput>>>;
  id: Scalars['String'];
};

export type GqlIntegrationsUpdateInput = {
  adapter?: Maybe<Scalars['String']>;
  credentials?: Maybe<Scalars['JSON']>;
  dispensaryId?: Maybe<Scalars['String']>;
  flags?: Maybe<Scalars['JSON']>;
  id?: Maybe<Scalars['String']>;
  integrationType?: Maybe<Scalars['String']>;
  live?: Maybe<Scalars['Boolean']>;
};

export type GqlIntegrationsUpdateThresholdsInput = {
  id: Scalars['String'];
  kioskThresholds?: Maybe<Scalars['JSON']>;
  thresholds?: Maybe<Scalars['JSON']>;
};

export type GqlIntegrationsUpdateTypesInput = {
  customCategoryMapping?: Maybe<Array<Maybe<GqlIntegrationsCustomTypeInput>>>;
  id: Scalars['String'];
};

export enum InternalDataLoaders {
  archivedOrderLoader = 'archivedOrderLoader',
  availableReservationsLoader = 'availableReservationsLoader',
  brandLoader = 'brandLoader',
  bucketProductLoader = 'bucketProductLoader',
  chargebeeCustomerLoader = 'chargebeeCustomerLoader',
  chargebeeInvoiceLoader = 'chargebeeInvoiceLoader',
  chargebeePaymentSourceLoader = 'chargebeePaymentSourceLoader',
  chargebeePlanLoader = 'chargebeePlanLoader',
  chargebeeSubscriptionLoader = 'chargebeeSubscriptionLoader',
  curbsideArrivalByOrderLoader = 'curbsideArrivalByOrderLoader',
  devicesByDispensaryLoader = 'devicesByDispensaryLoader',
  dispensaryBillingLoader = 'dispensaryBillingLoader',
  dispensaryLoader = 'dispensaryLoader',
  integrationsByDispensaryLoader = 'integrationsByDispensaryLoader',
  libraryProductLoader = 'libraryProductLoader',
  orderLoader = 'orderLoader',
  productLoader = 'productLoader',
  strainByTerpeneLoader = 'strainByTerpeneLoader',
  strainLoader = 'strainLoader',
  terpeneByStrainLoader = 'terpeneByStrainLoader',
  userLoader = 'userLoader'
}

export type GqlInventoryFiltersInput = {
  removeBelowKioskIntegrationThreshold: Scalars['Boolean'];
  removeBelowOnlineIntegrationThreshold: Scalars['Boolean'];
  removeZeroLimitsPerCustomer: Scalars['Boolean'];
  removeZeroManualInventory: Scalars['Boolean'];
};

export type GqlInvoice = {
  __typename?: 'Invoice';
  amountDue?: Maybe<Scalars['Int']>;
  amountPaid?: Maybe<Scalars['Int']>;
  billingCycle?: Maybe<Scalars['String']>;
  creditsApplied?: Maybe<Scalars['Int']>;
  dueDate?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  lineItems?: Maybe<Array<Maybe<GqlChargebeeLineItem>>>;
  status: Scalars['String'];
  total: Scalars['Float'];
};

export type GqlItemsForAPrice = {
  __typename?: 'ItemsForAPrice';
  _id?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlItemsForAPriceInput = {
  _id?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  value?: Maybe<Scalars['String']>;
};



export type GqlKioskInput = {
  directedOrders?: Maybe<Scalars['Boolean']>;
  enabled?: Maybe<Scalars['Boolean']>;
  fullNameOnly?: Maybe<Scalars['Boolean']>;
  hideEmailField?: Maybe<Scalars['Boolean']>;
  hidePhoneField?: Maybe<Scalars['Boolean']>;
  kioskInstructions?: Maybe<Scalars['String']>;
  notesField?: Maybe<Scalars['Boolean']>;
  paymentTypes?: Maybe<GqlDispensaryUpdatePaymentTypeConfig>;
  phoneRequired?: Maybe<Scalars['Boolean']>;
  showBirthdateField?: Maybe<Scalars['Boolean']>;
};

export type GqlKioskOrderingSettings = {
  __typename?: 'KioskOrderingSettings';
  directedOrders?: Maybe<Scalars['Boolean']>;
  enabled?: Maybe<Scalars['Boolean']>;
  fullNameOnly?: Maybe<Scalars['Boolean']>;
  hideEmailField?: Maybe<Scalars['Boolean']>;
  hidePhoneField?: Maybe<Scalars['Boolean']>;
  kioskInstructions?: Maybe<Scalars['String']>;
  notesField?: Maybe<Scalars['Boolean']>;
  paymentTypes?: Maybe<GqlPaymentTypesConfig>;
  phoneRequired?: Maybe<Scalars['Boolean']>;
  showBirthdateField?: Maybe<Scalars['Boolean']>;
};

export type GqlKioskTerminal = {
  __typename?: 'KioskTerminal';
  dispensaryId: Scalars['String'];
  id: Scalars['ID'];
  nickname?: Maybe<Scalars['String']>;
};

export type GqlLibraryProduct = {
  __typename?: 'LibraryProduct';
  brand?: Maybe<GqlBrand>;
  brandId?: Maybe<Scalars['String']>;
  cannabinoids?: Maybe<Array<GqlProducts_CannabinoidV2>>;
  category?: Maybe<Scalars['String']>;
  cbdContent?: Maybe<GqlProductPotency>;
  changeRequests?: Maybe<Array<GqlProductChangeRequest>>;
  connectedCount?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  createdBy?: Maybe<GqlUsers>;
  description?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  dispensaryId: Scalars['String'];
  effects?: Maybe<Scalars['JSON']>;
  gtin?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  images?: Maybe<Array<Maybe<GqlProducts_Images>>>;
  menuScore: Scalars['Float'];
  name: Scalars['String'];
  options?: Maybe<Array<Maybe<Scalars['String']>>>;
  price: Scalars['Float'];
  prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  productBatchId?: Maybe<Scalars['ID']>;
  productTemplate?: Maybe<Scalars['Boolean']>;
  sku?: Maybe<Scalars['String']>;
  stockImage?: Maybe<Scalars['String']>;
  stockImageAliases?: Maybe<Scalars['String']>;
  stockImageCategory?: Maybe<Scalars['String']>;
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  terpenes?: Maybe<Array<GqlProducts_Terpene>>;
  thcContent?: Maybe<GqlProductPotency>;
  updatedAt?: Maybe<Scalars['ISODateTime']>;
  updatedByBrand?: Maybe<Scalars['Boolean']>;
};

export type GqlLibraryProductCannabinoidsInputV2 = {
  active?: Maybe<Scalars['Boolean']>;
  cannabinoidId?: Maybe<Scalars['ID']>;
  unit?: Maybe<PotencyUnit>;
  value?: Maybe<Scalars['Float']>;
};

export type GqlLibraryProductChangeImpactCount = {
  __typename?: 'LibraryProductChangeImpactCount';
  count?: Maybe<Scalars['Int']>;
};

export type GqlLibraryProductChangeImpactResponse = {
  __typename?: 'LibraryProductChangeImpactResponse';
  totalCount?: Maybe<GqlLibraryProductChangeImpactCount>;
};

export type GqlLibraryProductLimitPerCustomerInput = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlLibraryProductManualInventoryInput = {
  inventory?: Maybe<Scalars['Int']>;
  option?: Maybe<Scalars['String']>;
};

export type GqlLibraryProductPotencyInput = {
  range?: Maybe<Array<Maybe<Scalars['Float']>>>;
  unit: Scalars['String'];
  value?: Maybe<Scalars['String']>;
};

export enum LibraryProductSortByEnum {
  brandName = 'brandName',
  category = 'category',
  connectedCount = 'connectedCount',
  createdAt = 'createdAt',
  createdBy = 'createdBy',
  description = 'description',
  menuScore = 'menuScore',
  name = 'name',
  stateLibrary = 'stateLibrary'
}

export enum LibraryProductStatusEnum {
  active = 'Active',
  archived = 'Archived',
  inactive = 'Inactive'
}

export type GqlLibraryProductTerpenesInput = {
  active?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  terpeneId: Scalars['ID'];
  unit: PotencyUnit;
  value?: Maybe<Scalars['Float']>;
  values: Array<Maybe<Scalars['Float']>>;
};

export type GqlLibraryProducts = {
  __typename?: 'LibraryProducts';
  libraryProducts?: Maybe<Array<Maybe<GqlLibraryProduct>>>;
  meta?: Maybe<GqlQueryInfoType>;
};

export enum LinkColor {
  aqua_1 = 'AQUA_1',
  aqua_2 = 'AQUA_2',
  aqua_3 = 'AQUA_3',
  blue_1 = 'BLUE_1',
  blue_2 = 'BLUE_2',
  blue_3 = 'BLUE_3',
  blue_4 = 'BLUE_4',
  blue_5 = 'BLUE_5',
  green_1 = 'GREEN_1',
  green_2 = 'GREEN_2',
  green_3 = 'GREEN_3',
  green_4 = 'GREEN_4',
  harvestBlue_1 = 'HARVEST_BLUE_1',
  orange_1 = 'ORANGE_1',
  orange_2 = 'ORANGE_2',
  orange_3 = 'ORANGE_3',
  pink_1 = 'PINK_1',
  pink_2 = 'PINK_2',
  purple_1 = 'PURPLE_1',
  purple_2 = 'PURPLE_2',
  purple_3 = 'PURPLE_3',
  purple_4 = 'PURPLE_4',
  red_1 = 'RED_1',
  red_2 = 'RED_2',
  red_3 = 'RED_3'
}

export type GqlListAccountBalancesResponse = {
  __typename?: 'ListAccountBalancesResponse';
  accountBalances: Array<GqlAccountBalance>;
};

export type GqlListAchBatchesResponse = {
  __typename?: 'ListAchBatchesResponse';
  achBatches?: Maybe<Array<GqlAchBatch>>;
};

export type GqlListAchEntriesResponse = {
  __typename?: 'ListAchEntriesResponse';
  achEntries?: Maybe<Array<GqlAchEntry>>;
};

export type GqlListAchEntriesResponseV3 = {
  __typename?: 'ListAchEntriesResponseV3';
  achEntries: Array<GqlAchEntryV2>;
};

export type GqlListAchReturnsResponse = {
  __typename?: 'ListAchReturnsResponse';
  achReturns?: Maybe<Array<GqlAchReturn>>;
};

export type GqlListAchReturnsResponseV3 = {
  __typename?: 'ListAchReturnsResponseV3';
  achReturns: Array<GqlAchReturnV2>;
};

export type GqlListAchReturnsResponseV4 = {
  __typename?: 'ListAchReturnsResponseV4';
  achReturns: Array<GqlAchReturnV4>;
};

export type GqlListAchReturnsResponseV5 = {
  __typename?: 'ListAchReturnsResponseV5';
  achReturns: Array<GqlAchReturnV5>;
};

export enum ListBrandsSortByEnum {
  createdAt = 'createdAt',
  name = 'name'
}

export type GqlListEntitiesResponse = {
  __typename?: 'ListEntitiesResponse';
  entities: Array<GqlEntity>;
};

export enum ListLibraryProductsSortByEnum {
  createdAt = 'createdAt',
  name = 'name'
}

export enum LoaderType {
  hasMany = 'HAS_MANY',
  hasOne = 'HAS_ONE',
  join = 'JOIN'
}

export type GqlLocationStatsProductOption = {
  __typename?: 'LocationStatsProductOption';
  price: Scalars['Float'];
  weight: Scalars['String'];
};

export enum LogicOperator {
  and = 'AND',
  or = 'OR'
}

export type GqlLoginAdmin = {
  __typename?: 'LoginAdmin';
  accessToken?: Maybe<Scalars['String']>;
  user?: Maybe<GqlIdentityAdmin>;
};

export type GqlLoginConsumer = {
  __typename?: 'LoginConsumer';
  accessToken?: Maybe<Scalars['String']>;
  transferToken?: Maybe<Scalars['String']>;
  user?: Maybe<GqlIdentityConsumer>;
};

export enum ManualDefaultApplyTo {
  allitems = 'ALLITEMS',
  distributed = 'DISTRIBUTED',
  justone = 'JUSTONE',
  wholeline = 'WHOLELINE'
}

export type GqlMarkAchEntryAsReturnedResponse = {
  __typename?: 'MarkAchEntryAsReturnedResponse';
  achReturn: GqlAchReturn;
};

export type GqlMarkAchEntryAsReturnedResponseV3 = {
  __typename?: 'MarkAchEntryAsReturnedResponseV3';
  achReturn: GqlAchReturnV2;
};

export type GqlMarkAchEntryAsReturnedResponseV4 = {
  __typename?: 'MarkAchEntryAsReturnedResponseV4';
  achReturn: GqlAchReturnV4;
};

export type GqlMarkAchEntryAsReturnedResponseV5 = {
  __typename?: 'MarkAchEntryAsReturnedResponseV5';
  achReturn: GqlAchReturnV5;
};

export type GqlMarketingCampaignsResponse = {
  __typename?: 'MarketingCampaignsResponse';
  campaigns?: Maybe<Array<Maybe<GqlCampaignSummary>>>;
  meta?: Maybe<GqlAnalyticsMeta>;
};

export type GqlMarketingCouponsResponse = {
  __typename?: 'MarketingCouponsResponse';
  coupons?: Maybe<Array<Maybe<GqlCouponSummary>>>;
  meta?: Maybe<GqlAnalyticsMeta>;
};

export type GqlMarketingDataPointsResponse = {
  __typename?: 'MarketingDataPointsResponse';
  marketingRevenue?: Maybe<Array<Maybe<GqlMarketingRevenue>>>;
  totalCampaignsCents?: Maybe<Scalars['Float']>;
  totalCouponsCents?: Maybe<Scalars['Float']>;
  totalRevenueCents?: Maybe<Scalars['Float']>;
  totalSpecialsCents?: Maybe<Scalars['Float']>;
};

export type GqlMarketingRevenue = {
  __typename?: 'MarketingRevenue';
  campaignsCents?: Maybe<Scalars['Float']>;
  couponsCents?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['String']>;
  revenueCents?: Maybe<Scalars['Float']>;
  specialsCents?: Maybe<Scalars['Float']>;
};

export type GqlMarketingSpecialsResponse = {
  __typename?: 'MarketingSpecialsResponse';
  meta?: Maybe<GqlAnalyticsMeta>;
  specials?: Maybe<Array<Maybe<GqlSpecialSummary>>>;
};

export type GqlMarketplaceProduct = {
  __typename?: 'MarketplaceProduct';
  brand?: Maybe<GqlBrand>;
  brandId?: Maybe<Scalars['ID']>;
  cannabinoids: Array<GqlNamedProductPotency>;
  category: Scalars['String'];
  cbdContent?: Maybe<GqlProductPotency>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  description?: Maybe<Scalars['String']>;
  effects?: Maybe<Array<Scalars['String']>>;
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  terpenes: Array<GqlNamedProductPotency>;
  thcContent?: Maybe<GqlProductPotency>;
};

export type GqlMarketplaceProductLocation = {
  __typename?: 'MarketplaceProductLocation';
  consumerType?: Maybe<ProductConsumerType>;
  id?: Maybe<Scalars['String']>;
  point: GqlMarketplaceProductLocationGeometry;
};

export type GqlMarketplaceProductLocationGeometry = {
  __typename?: 'MarketplaceProductLocationGeometry';
  lat: Scalars['Float'];
  lon: Scalars['Float'];
};

export type GqlMarketplaceProductLocationStats = {
  __typename?: 'MarketplaceProductLocationStats';
  marketplaceProduct: GqlMarketplaceProduct;
  nearbyStoreCount: Scalars['Int'];
  options?: Maybe<Array<GqlLocationStatsProductOption>>;
};

export type GqlMarketplaceProductOption = {
  __typename?: 'MarketplaceProductOption';
  price: Scalars['Float'];
  unit: Scalars['String'];
  weight: Scalars['String'];
};

export type GqlMarketplaceProductSearchResult = {
  __typename?: 'MarketplaceProductSearchResult';
  brand?: Maybe<GqlBrand>;
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  category: Scalars['String'];
  cbdContent?: Maybe<GqlProductPotency>;
  createdAt?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  images?: Maybe<Array<Maybe<GqlProducts_Images>>>;
  locations: Array<Maybe<GqlMarketplaceProductLocation>>;
  minPrice: Scalars['Float'];
  name: Scalars['String'];
  options: Array<Maybe<GqlMarketplaceProductOption>>;
  stockImage?: Maybe<Scalars['String']>;
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  thcContent?: Maybe<GqlProductPotency>;
};

export type GqlMaxReservationSlot = {
  __typename?: 'MaxReservationSlot';
  currentCount?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['ISODate']>;
  endTime?: Maybe<Scalars['String']>;
  maxOrders?: Maybe<Scalars['Int']>;
  startTime?: Maybe<Scalars['String']>;
};

export type GqlMaxReservationSlotInput = {
  currentCount?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['ISODate']>;
  endTime?: Maybe<Scalars['String']>;
  maxOrders?: Maybe<Scalars['Int']>;
  startTime?: Maybe<Scalars['String']>;
};

export type GqlMaxReservationSlotsByDay = {
  __typename?: 'MaxReservationSlotsByDay';
  Friday?: Maybe<Array<Maybe<GqlMaxReservationSlot>>>;
  Monday?: Maybe<Array<Maybe<GqlMaxReservationSlot>>>;
  Saturday?: Maybe<Array<Maybe<GqlMaxReservationSlot>>>;
  Sunday?: Maybe<Array<Maybe<GqlMaxReservationSlot>>>;
  Thursday?: Maybe<Array<Maybe<GqlMaxReservationSlot>>>;
  Tuesday?: Maybe<Array<Maybe<GqlMaxReservationSlot>>>;
  Wednesday?: Maybe<Array<Maybe<GqlMaxReservationSlot>>>;
};

export type GqlMaxReservationSlotsByDayInput = {
  Friday?: Maybe<Array<Maybe<GqlMaxReservationSlotInput>>>;
  Monday?: Maybe<Array<Maybe<GqlMaxReservationSlotInput>>>;
  Saturday?: Maybe<Array<Maybe<GqlMaxReservationSlotInput>>>;
  Sunday?: Maybe<Array<Maybe<GqlMaxReservationSlotInput>>>;
  Thursday?: Maybe<Array<Maybe<GqlMaxReservationSlotInput>>>;
  Tuesday?: Maybe<Array<Maybe<GqlMaxReservationSlotInput>>>;
  Wednesday?: Maybe<Array<Maybe<GqlMaxReservationSlotInput>>>;
};

export type GqlMaxReservationSlotsByOrderType = {
  __typename?: 'MaxReservationSlotsByOrderType';
  curbsidePickup?: Maybe<GqlMaxReservationSlotsGroup>;
  delivery?: Maybe<GqlMaxReservationSlotsGroup>;
  driveThruPickup?: Maybe<GqlMaxReservationSlotsGroup>;
  inStorePickup?: Maybe<GqlMaxReservationSlotsGroup>;
};

export type GqlMaxReservationSlotsGroup = {
  __typename?: 'MaxReservationSlotsGroup';
  maxReservationSlotsByDate?: Maybe<Array<Maybe<GqlMaxReservationSlot>>>;
  maxReservationSlotsByDay?: Maybe<GqlMaxReservationSlotsByDay>;
};

export type GqlMenuCleanup = {
  __typename?: 'MenuCleanup';
  products: Array<Maybe<GqlProducts>>;
  queryInfo: GqlQueryInfoType;
};

export type GqlMenuFilters = {
  __typename?: 'MenuFilters';
  brands: Array<Maybe<GqlBrand>>;
  categoriesSubcategories: Array<GqlCategorySubcategories>;
  hasProductsOnSpecial?: Maybe<Scalars['Boolean']>;
  strainTypes: Array<Maybe<Scalars['String']>>;
  subcategories: Array<Maybe<Scalars['String']>>;
  weights: Array<Maybe<Scalars['String']>>;
};

export type GqlMenuScore = {
  __typename?: 'MenuScore';
  category?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
};

export type GqlMenuSection = {
  __typename?: 'MenuSection';
  brand?: Maybe<GqlBrand>;
  brandId?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  dispensary: GqlDispensaries;
  dispensaryId: Scalars['String'];
  id: Scalars['ID'];
  label: Scalars['String'];
  linkLabel: Scalars['String'];
  position: Scalars['Int'];
  products?: Maybe<Array<Scalars['ID']>>;
  sectionName?: Maybe<Scalars['String']>;
  sectionType: MenuSectionType;
  subcategory?: Maybe<Scalars['String']>;
};

export enum MenuSectionType {
  brand = 'BRAND',
  category = 'CATEGORY',
  custom = 'CUSTOM',
  offers = 'OFFERS',
  specials = 'SPECIALS',
  staffPicks = 'STAFF_PICKS',
  subcategory = 'SUBCATEGORY',
  topSellers = 'TOP_SELLERS'
}

export type GqlMenuSortSetting = {
  __typename?: 'MenuSortSetting';
  brands?: Maybe<Array<Scalars['String']>>;
  category: Scalars['String'];
  menuOrder: Scalars['String'];
};

export type GqlMenuSortSettingInput = {
  brands?: Maybe<Array<Scalars['String']>>;
  category: Scalars['String'];
  menuOrder: Scalars['String'];
};

export enum MenuTypes {
  both = 'both',
  medical = 'medical',
  recreational = 'recreational'
}

export enum MenuViewStyles {
  cards = 'cards',
  list = 'list'
}

export type GqlMeta = {
  __typename?: 'Meta';
  reviewers?: Maybe<Array<Maybe<GqlUsers>>>;
  totalCount?: Maybe<Scalars['Int']>;
};

export enum Modules {
  fraud = 'fraud',
  messageProxy = 'messageProxy',
  paymentProcessing = 'paymentProcessing',
  reporting = 'reporting'
}

export type GqlMonerisCard = {
  __typename?: 'MonerisCard';
  brand?: Maybe<Scalars['String']>;
  lastDigits?: Maybe<Scalars['String']>;
};

export type GqlMonerisDetails = {
  __typename?: 'MonerisDetails';
  card: GqlMonerisCard;
  id: Scalars['String'];
  status: Scalars['String'];
  transactionNumber: Scalars['String'];
};

export type GqlMonerisHtProfileCredentials = GqlCheckoutCredentialsBase & {
  __typename?: 'MonerisHTProfileCredentials';
  adapter: Scalars['String'];
  profileId: Scalars['String'];
};

export type GqlMonerisTokenizationProfile = {
  __typename?: 'MonerisTokenizationProfile';
  profileId: Scalars['String'];
};

export type GqlMongoProduct = {
  __typename?: 'MongoProduct';
  additionalOptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  brandId?: Maybe<Scalars['ID']>;
  brandLogo?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  cName?: Maybe<Scalars['String']>;
  cbdContent?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['ID']>;
  dispensaryName?: Maybe<Scalars['String']>;
  duplicatedProductId?: Maybe<Scalars['ID']>;
  effects?: Maybe<Array<Maybe<Scalars['String']>>>;
  flavors?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['Boolean']>;
  integrationKey?: Maybe<Scalars['String']>;
  isActive?: Maybe<Scalars['Boolean']>;
  isBelowKioskThreshold?: Maybe<Scalars['Boolean']>;
  isBelowThreshold?: Maybe<Scalars['Boolean']>;
  location?: Maybe<Array<Maybe<Scalars['String']>>>;
  matchedBrandAgainst?: Maybe<Scalars['String']>;
  matchedLibraryItems?: Maybe<Scalars['String']>;
  matchedLibraryItemsConfidence?: Maybe<Scalars['String']>;
  matchedProductAgainst?: Maybe<Scalars['String']>;
  matchedStrainAgainst?: Maybe<Scalars['String']>;
  measurements?: Maybe<Scalars['String']>;
  medicalOnly?: Maybe<Scalars['Boolean']>;
  medicalPrices?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  options?: Maybe<Array<Maybe<Scalars['String']>>>;
  overrides?: Maybe<Array<Maybe<Scalars['String']>>>;
  posMetaData?: Maybe<Scalars['String']>;
  prices?: Maybe<Array<Maybe<Scalars['String']>>>;
  pricingTierData?: Maybe<Scalars['String']>;
  recOnly?: Maybe<Scalars['String']>;
  recPrices?: Maybe<Array<Maybe<Scalars['String']>>>;
  status?: Maybe<Scalars['String']>;
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  thcContent?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['Int']>;
};

export type GqlMutation = {
  __typename?: 'Mutation';
  RecordRecentlyViewed?: Maybe<Scalars['Boolean']>;
  acceptBrandPortalTos?: Maybe<GqlGenericResponse>;
  acceptTermsOfService?: Maybe<GqlGenericResponse>;
  activateBankAccount?: Maybe<GqlActivateBankAccountResponse>;
  addBankPaymentMethodV2?: Maybe<GqlGenericResponse>;
  addCustomerToOrder?: Maybe<GqlOrderUpdated>;
  addDispensaryCustomer?: Maybe<GqlGenericResponse>;
  addPaymentMethodV2?: Maybe<GqlGenericResponse>;
  addSubscriptionToChain?: Maybe<GqlGenericResponse>;
  archiveOrder?: Maybe<GqlGenericResponse>;
  archiveProduct?: Maybe<GqlProducts>;
  associateRetailers?: Maybe<GqlGenericResponse>;
  brandPortalSecureUpload?: Maybe<GqlIdImage>;
  bulkEndSpecials?: Maybe<GqlGenericResponse>;
  bulkEndSpecialsV2?: Maybe<GqlGenericResponse>;
  bulkLibraryProductUpdate?: Maybe<GqlBulkLibraryProductUpdateResponse>;
  bulkLibraryProductUpload?: Maybe<GqlBulkLibraryProductUploadResponse>;
  changeRequestApproveProduct?: Maybe<GqlProductChangeRequest>;
  changeRequestCreateProduct?: Maybe<GqlProductChangeRequest>;
  changeRequestDeleteProduct?: Maybe<GqlProductChangeRequest>;
  changeRequestLockProduct?: Maybe<GqlProductChangeRequest>;
  changeRequestRejectProduct?: Maybe<GqlProductChangeRequest>;
  changeRequestUnlockProduct?: Maybe<GqlProductChangeRequest>;
  changeRequestUpdateProduct?: Maybe<GqlProductChangeRequest>;
  checkInBucketV2?: Maybe<GqlBucket>;
  /** @deprecated Use checkOutBucketV3 mutation */
  checkOutBucketV2: GqlBucket;
  checkOutBucketV3: GqlBucketV2;
  clearAllCurbsideArrivals: GqlGenericResponse;
  clearCurbsideArrival: GqlGenericResponse;
  closeBucket: GqlBucket;
  connectDeviceV2?: Maybe<GqlDeviceConnection>;
  connectProduct?: Maybe<GqlGenericResponse>;
  connectProductPreview?: Maybe<GqlConnectProductPreviewResponse>;
  consumeDeviceAccessCode?: Maybe<GqlDeviceAccessCode>;
  consumerSignup?: Maybe<GqlLoginConsumer>;
  copyLibraryProduct?: Maybe<GqlCopyLibraryProductResponse>;
  /** @deprecated Use createAlpineUserV2 */
  createAlpineUser?: Maybe<GqlRewardUserResponse>;
  createAlpineUserV2?: Maybe<GqlRewardUserResponse>;
  createBankAccount?: Maybe<GqlCreateBankAccountResponse>;
  createBillingGroup?: Maybe<GqlGenericResponse>;
  createBrandUser?: Maybe<GqlBrandUser>;
  createBrandV2?: Maybe<GqlBrand>;
  createBucketForLibraryItem: GqlBucket;
  /** @deprecated Use createBucketV3 mutation */
  createBucketV2: GqlBucket;
  createBucketV3: GqlBucket;
  createContact?: Maybe<GqlContactType>;
  createContactUs?: Maybe<GqlContactUs>;
  createCouponV2?: Maybe<GqlCoupons>;
  createDeviceAccessCode?: Maybe<GqlDeviceAccessCode>;
  createEnterpriseSpecialV2?: Maybe<GqlGenericResponse>;
  createIntegration?: Maybe<GqlIntegrations>;
  createLibraryProduct?: Maybe<GqlProducts>;
  createLibraryProductV2?: Maybe<GqlLibraryProduct>;
  createLibraryProductV3?: Maybe<GqlLibraryProduct>;
  createMenuSection?: Maybe<GqlMenuSection>;
  createMessagingFeatureRequest?: Maybe<GqlGenericResponse>;
  createMxEnrollment?: Maybe<GqlCreateMxEnrollmentResponse>;
  /** @deprecated Use createOrUpdateAchReturnV5 */
  createOrUpdateAchReturn?: Maybe<GqlCreateOrUpdateAchReturnResponse>;
  createOrUpdateAchReturnV5?: Maybe<GqlCreateOrUpdateAchReturnResponseV5>;
  /** @deprecated Use createOrUpdateAchReturnV5 */
  createOrUpdateAchReturnv4?: Maybe<GqlCreateOrUpdateAchReturnResponseV4>;
  createOrderV2?: Maybe<GqlCreateOrderResponse>;
  createOrderingSuspensionV2?: Maybe<GqlOrderingSuspension>;
  createPlusApiKeyV2?: Maybe<GqlPlusApiKey>;
  createPlusEnterpriseApiKey?: Maybe<GqlPlusApiKey>;
  createProduct?: Maybe<GqlProducts>;
  createRetailerAgent: GqlRetailerAgent;
  createRetailerEnrollment?: Maybe<GqlCreateRetailerEnrollmentResponse>;
  createSpecialV3?: Maybe<GqlSpecials>;
  createStrainV2?: Maybe<GqlStrain>;
  createTerpeneV2?: Maybe<GqlTerpene>;
  createUser?: Maybe<GqlUsers>;
  crossingMindsLogin?: Maybe<GqlCrossingMindsAuthResponse>;
  deleteBrand?: Maybe<GqlBrand>;
  deleteCoupon?: Maybe<GqlGenericResponse>;
  deleteCouponV2?: Maybe<GqlGenericResponse>;
  deleteDeviceV2?: Maybe<GqlDevices>;
  deleteEnterpriseSpecial?: Maybe<GqlGenericResponse>;
  deleteLibraryProduct?: Maybe<GqlLibraryProduct>;
  deleteSpecialHours?: Maybe<GqlGenericResponse>;
  deleteSpecialV2?: Maybe<GqlSpecials>;
  deleteStrain?: Maybe<GqlStrain>;
  deleteSubscription?: Maybe<GqlGenericResponse>;
  deleteTerpene?: Maybe<GqlTerpene>;
  deleteUser?: Maybe<GqlUsers>;
  destroyMenuSection?: Maybe<GqlGenericResponse>;
  destroyRetailerAgent?: Maybe<GqlGenericResponse>;
  deviceHeartbeat?: Maybe<GqlGenericResponse>;
  disconnectBankAccount?: Maybe<GqlDisconnectBankAccountResponse>;
  /** Disconnect a dispensary product from its library product & mark the bucket product as disconnected */
  disconnectBucketProduct?: Maybe<GqlGenericResponse>;
  /** Disconnect a product from its library product */
  disconnectProduct?: Maybe<GqlGenericResponse>;
  dispensaryContactUs?: Maybe<GqlGenericResponse>;
  dispensaryDemoRequest?: Maybe<GqlGenericResponse>;
  dispensaryOnboarding?: Maybe<GqlGenericResponse>;
  dispensaryRemoveFromChain?: Maybe<GqlGenericResponse>;
  dispensaryUpdate?: Maybe<GqlGenericResponse>;
  dispensaryUpdateHoursSettings?: Maybe<GqlGenericResponse>;
  dispensaryUpdateOptionsSettings?: Maybe<GqlGenericResponse>;
  dispensaryUpdateStatus?: Maybe<GqlGenericResponse>;
  dispensaryUpdateSuperAdmins?: Maybe<GqlGenericResponse>;
  dispensaryUpdateTaxConfiguration?: Maybe<GqlGenericResponse>;
  dispensaryUploadOnboardingAsset?: Maybe<GqlDispensaryAssetUploadResponse>;
  dissociateRetailers?: Maybe<GqlGenericResponse>;
  editCustomerV2?: Maybe<GqlGenericResponse>;
  emailDispensaryCustomerList?: Maybe<GqlGenericResponse>;
  emailIntegrationCredentials?: Maybe<GqlGenericResponse>;
  endEnterpriseSpecial?: Maybe<GqlGenericResponse>;
  endOrderingSuspensionV2?: Maybe<GqlOrderingSuspension>;
  endSpecialV2: GqlSpecials;
  expirePlusApiKey?: Maybe<GqlPlusApiKey>;
  expirePlusEnterpriseApiKey?: Maybe<GqlPlusApiKey>;
  exportCouponsSummaries?: Maybe<GqlGenericResponse>;
  exportCustomerReport?: Maybe<GqlGenericExportResponse>;
  exportDispensaryCustomers?: Maybe<GqlGenericResponse>;
  exportFilteredBrandsSummaries?: Maybe<GqlGenericResponse>;
  exportFilteredCampaignsSummaries?: Maybe<GqlGenericResponse>;
  exportFilteredCartsSummaries?: Maybe<GqlGenericResponse>;
  exportFilteredProductSummaries?: Maybe<GqlGenericResponse>;
  exportOrderReport?: Maybe<GqlGenericExportResponse>;
  exportOrders?: Maybe<GqlGenericResponse>;
  exportSpecialsSummaries?: Maybe<GqlGenericResponse>;
  generateDispensaryUserStreamToken?: Maybe<GqlDispensaryStreamToken>;
  generateHypurRedirectV3?: Maybe<GqlHypurRedirect>;
  generateHypurTokenV2?: Maybe<GqlHypurToken>;
  importCustomerCSV?: Maybe<GqlGenericResponse>;
  importDeliveryZipCodes?: Maybe<GqlGenericResponse>;
  importMenuCSV?: Maybe<GqlGenericResponse>;
  incrementClicks?: Maybe<GqlGenericResponse>;
  integrationsDelete?: Maybe<GqlGenericResponse>;
  /** @deprecated Use integrationsForceSyncInArma */
  integrationsForceSync?: Maybe<GqlGenericResponse>;
  integrationsForceSyncInArma?: Maybe<GqlGenericResponse>;
  integrationsSuggestion?: Maybe<GqlGenericResponse>;
  /** @deprecated Use updateIntegration */
  integrationsUpdate?: Maybe<GqlGenericResponse>;
  integrationsUpdateCrmFields?: Maybe<GqlGenericResponse>;
  integrationsUpdateFields?: Maybe<GqlGenericResponse>;
  integrationsUpdateThresholds?: Maybe<GqlGenericResponse>;
  integrationsUpdateTypes?: Maybe<GqlGenericResponse>;
  /** @deprecated Use integrationsWipeMenuInArma */
  integrationsWipeMenu?: Maybe<GqlGenericResponse>;
  integrationsWipeMenuInArma?: Maybe<GqlGenericResponse>;
  libraryProductChangeImpact?: Maybe<GqlProductImpactResponse>;
  libraryProductChangeImpactV3?: Maybe<GqlLibraryProductChangeImpactResponse>;
  logAnalyticsPayload?: Maybe<GqlGenericResponse>;
  loginAdmin?: Maybe<GqlLoginAdmin>;
  loginAdminViaToken?: Maybe<GqlLoginAdmin>;
  loginConsumer?: Maybe<GqlLoginConsumer>;
  logout?: Maybe<GqlGenericResponse>;
  /** @deprecated Use markAchEntryAsReturnedV5 */
  markAchEntryAsReturned?: Maybe<GqlMarkAchEntryAsReturnedResponse>;
  /** @deprecated Use markAchEntryAsReturnedV5 */
  markAchEntryAsReturnedV3?: Maybe<GqlMarkAchEntryAsReturnedResponseV3>;
  /** @deprecated Use markAchEntryAsReturnedV5 */
  markAchEntryAsReturnedV4?: Maybe<GqlMarkAchEntryAsReturnedResponseV4>;
  markAchEntryAsReturnedV5?: Maybe<GqlMarkAchEntryAsReturnedResponseV5>;
  markCurbsideArrivalArrivedV2: GqlCurbsideArrival;
  markOrderAutoPrinted?: Maybe<GqlGenericResponse>;
  markOrderPOSFailed?: Maybe<GqlOrderUpdated>;
  markOrderPrinted?: Maybe<GqlGenericResponse>;
  markOrdersBatchPrinted?: Maybe<GqlGenericResponse>;
  mergeBrand?: Maybe<GqlBrand>;
  /** @deprecated Use parseAchReturnFileUploadV2 */
  parseAchReturnFileUpload?: Maybe<GqlParseAchReturnFileUploadResponse>;
  parseAchReturnFileUploadV2?: Maybe<GqlParseAchReturnFileUploadResponse>;
  pauseSubscription?: Maybe<GqlGenericResponse>;
  persistCheckout?: Maybe<GqlGenericResponse>;
  persistCheckoutV2?: Maybe<GqlPersistCheckoutResponse>;
  printOrderOnTerminal?: Maybe<GqlOrderPrinted>;
  recordUserAcceptance?: Maybe<GqlRecordUserAcceptanceResponse>;
  rejectReasons: Array<RejectionReasons>;
  removeSubscriptionFromChain?: Maybe<GqlGenericResponse>;
  reopenOrder?: Maybe<GqlGenericResponse>;
  resetPasswordV2?: Maybe<GqlGenericResponse>;
  /** @deprecated Use createOrUpdateAchReturnV4 */
  respondToAchReturn?: Maybe<GqlRespondToAchReturnResponse>;
  resumeSubscription?: Maybe<GqlGenericResponse>;
  reversePayment?: Maybe<GqlReversePaymentResponse>;
  reverseSettlement?: Maybe<GqlReverseSettlementResponse>;
  revertBrandMerge?: Maybe<GqlBrandMergeHistory>;
  sendBrandUserPasswordResetEmail?: Maybe<GqlGenericResponse>;
  sendPasswordResetEmailV2?: Maybe<GqlGenericResponse>;
  setPasswordV2?: Maybe<GqlGenericResponse>;
  setViewedTermsOfService?: Maybe<GqlGenericResponse>;
  setupBillingV2?: Maybe<GqlGenericResponse>;
  setupRetailerBankPaymentMethod?: Maybe<GqlGenericResponse>;
  setupRetailerBilling?: Maybe<GqlGenericResponse>;
  setupRetailerCreditPaymentMethod?: Maybe<GqlGenericResponse>;
  /** @deprecated Moving to V2 for skip reasons change */
  skipBucketProduct: GqlGenericResponse;
  skipBucketProductV2: GqlGenericResponse;
  sortMenuSections?: Maybe<GqlGenericResponse>;
  speculativeProductUpdate?: Maybe<GqlProducts>;
  subscribeToOrderingSuspension?: Maybe<GqlGenericResponse>;
  unarchiveOrder?: Maybe<GqlGenericResponse>;
  unsubscribeDispensaryCustomers?: Maybe<GqlGenericResponse>;
  unsubscribeFromDispensaryV2?: Maybe<GqlGenericResponse>;
  updateAutoPrintDevicesV2?: Maybe<GqlGenericResponse>;
  updateBillingGroup?: Maybe<GqlGenericResponse>;
  updateBillingNotifications?: Maybe<GqlGenericResponse>;
  updateBrandCollision?: Maybe<GqlBrandCollision>;
  updateBrandUser?: Maybe<GqlBrandUser>;
  updateBrandUserAccount?: Maybe<GqlBrandUserAccount>;
  updateBrandV2?: Maybe<GqlBrand>;
  updateChainDispensariesImage?: Maybe<GqlGenericResponse>;
  updateChangeRequestCreateProduct?: Maybe<GqlProductChangeRequest>;
  updateChangeRequestUpdateProduct?: Maybe<GqlProductChangeRequest>;
  updateChargebeeSubscription?: Maybe<GqlGenericResponse>;
  updateCname?: Maybe<GqlGenericResponse>;
  updateConsumerUser?: Maybe<GqlGenericResponse>;
  updateCoupon?: Maybe<GqlCoupons>;
  updateCurbsideArrivalV2?: Maybe<GqlCurbsideArrival>;
  updateCustomerSubscription?: Maybe<GqlGenericResponse>;
  updateDevice?: Maybe<GqlDevices>;
  updateDispensaryCustomer?: Maybe<GqlGenericResponse>;
  updateEmail?: Maybe<GqlGenericResponse>;
  updateEnterpriseSpecialV2?: Maybe<GqlGenericResponse>;
  updateHoursSettings?: Maybe<GqlGenericResponse>;
  updateImageBanners?: Maybe<GqlGenericResponse>;
  updateIntegration?: Maybe<GqlIntegrations>;
  updateLibraryProduct?: Maybe<GqlUpdateLibraryProductResponse>;
  updateMenuSection?: Maybe<GqlMenuSection>;
  updateOrderStatus?: Maybe<GqlOrders>;
  updateOrderV2?: Maybe<GqlOrders>;
  updateOrderingSettings?: Maybe<GqlGenericResponse>;
  updatePasswordV2?: Maybe<GqlPasswordUpdate>;
  updateProduct?: Maybe<GqlProducts>;
  updateProductSort?: Maybe<GqlGenericResponse>;
  updateProductStatus?: Maybe<GqlProducts>;
  updateProfileV2?: Maybe<GqlGenericResponse>;
  updateReservationSlots?: Maybe<GqlGenericResponse>;
  updateSpecialV3?: Maybe<GqlSpecials>;
  updateSpecialsSortOrder?: Maybe<GqlGenericResponse>;
  updateStrainV2?: Maybe<GqlStrain>;
  updateSubscriptionBillingPeriod?: Maybe<GqlGenericResponse>;
  updateSubscriptionManualPayments?: Maybe<GqlGenericResponse>;
  updateSubscriptionPrice?: Maybe<GqlGenericResponse>;
  updateSubscriptionTrial?: Maybe<GqlGenericResponse>;
  updateTerpeneV2?: Maybe<GqlTerpene>;
  updateTextSetting?: Maybe<GqlGenericResponse>;
  updateUser?: Maybe<GqlUsers>;
  updateUserEmail?: Maybe<GqlGenericResponse>;
  updateUserPermissions?: Maybe<GqlGenericResponse>;
  /** @deprecated Use updateUserRoleV2 */
  updateUserRole?: Maybe<GqlGenericResponse>;
  updateUserRoleV2?: Maybe<GqlGenericResponse>;
  updateWebCustomizationSettings?: Maybe<GqlGenericResponse>;
  uploadImage?: Maybe<GqlImageUrl>;
  uploadSecureImage?: Maybe<GqlIdImage>;
  verifyBucketProducts: GqlGenericResponse;
};


export type GqlMutationRecordRecentlyViewedArgs = {
  dispensaryId: Scalars['String'];
  productId: Scalars['String'];
};


export type GqlMutationAcceptBrandPortalTosArgs = {
  resetToken: Scalars['String'];
};


export type GqlMutationActivateBankAccountArgs = {
  paymentMethodId: Scalars['String'];
};


export type GqlMutationAddBankPaymentMethodV2Args = {
  accountId: Scalars['String'];
  chargebeeCustomerId: Scalars['String'];
  publicToken: Scalars['String'];
};


export type GqlMutationAddCustomerToOrderArgs = {
  input?: Maybe<GqlAddCustomerToOrderInput>;
};


export type GqlMutationAddDispensaryCustomerArgs = {
  customer: GqlDispensaryCustomerInput;
};


export type GqlMutationAddPaymentMethodV2Args = {
  chargebeeCustomerId: Scalars['String'];
  token: Scalars['String'];
};


export type GqlMutationAddSubscriptionToChainArgs = {
  chargebeeCustomerId: Scalars['String'];
  dispensaryIds: Array<Maybe<Scalars['String']>>;
};


export type GqlMutationArchiveOrderArgs = {
  input: GqlArchiveOrderInput;
};


export type GqlMutationArchiveProductArgs = {
  id?: Maybe<Scalars['String']>;
};


export type GqlMutationAssociateRetailersArgs = {
  retailerIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationBrandPortalSecureUploadArgs = {
  brandId: Scalars['ID'];
  encoding?: Maybe<Scalars['String']>;
  file: Scalars['String'];
  mime?: Maybe<Scalars['String']>;
};


export type GqlMutationBulkEndSpecialsArgs = {
  input: GqlEndSpecialsInput;
};


export type GqlMutationBulkEndSpecialsV2Args = {
  input: GqlEndSpecialsInput;
};


export type GqlMutationBulkLibraryProductUpdateArgs = {
  libraryProductIds?: Maybe<Array<Scalars['String']>>;
  updates: GqlBulkLibraryProductUpdates;
};


export type GqlMutationBulkLibraryProductUploadArgs = {
  s3Key: Scalars['String'];
};


export type GqlMutationChangeRequestApproveProductArgs = {
  id: Scalars['String'];
};


export type GqlMutationChangeRequestCreateProductArgs = {
  brandId: Scalars['String'];
  complianceRegionId: Scalars['String'];
  contentAttributes: GqlUpdatedLibraryProduct;
};


export type GqlMutationChangeRequestDeleteProductArgs = {
  productId: Scalars['String'];
};


export type GqlMutationChangeRequestLockProductArgs = {
  id: Scalars['String'];
};


export type GqlMutationChangeRequestRejectProductArgs = {
  feedback: Scalars['String'];
  id: Scalars['String'];
  rejectionReasons: Array<RejectionReasons>;
};


export type GqlMutationChangeRequestUnlockProductArgs = {
  id: Scalars['String'];
};


export type GqlMutationChangeRequestUpdateProductArgs = {
  contentAttributes: GqlUpdatedLibraryProduct;
  productId: Scalars['String'];
};


export type GqlMutationCheckInBucketV2Args = {
  uuid: Scalars['String'];
};


export type GqlMutationCheckOutBucketV2Args = {
  bucketId: Scalars['String'];
  uuid: Scalars['String'];
};


export type GqlMutationCheckOutBucketV3Args = {
  bucketId: Scalars['String'];
  uuid: Scalars['String'];
};


export type GqlMutationClearAllCurbsideArrivalsArgs = {
  dispensaryId: Scalars['String'];
};


export type GqlMutationClearCurbsideArrivalArgs = {
  arrivalId: Scalars['String'];
};


export type GqlMutationCloseBucketArgs = {
  id: Scalars['String'];
};


export type GqlMutationConnectDeviceV2Args = {
  connectionToken: Scalars['String'];
};


export type GqlMutationConnectProductArgs = {
  id: Scalars['String'];
  libraryProductId: Scalars['String'];
  omitFields?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type GqlMutationConnectProductPreviewArgs = {
  id: Scalars['String'];
  libraryProductId: Scalars['String'];
};


export type GqlMutationConsumeDeviceAccessCodeArgs = {
  accessCode: Scalars['String'];
  dispensaryId: Scalars['String'];
};


export type GqlMutationConsumerSignupArgs = {
  input: GqlConsumerSignupInput;
};


export type GqlMutationCopyLibraryProductArgs = {
  id: Scalars['String'];
  stateLibraryIds: Array<Scalars['String']>;
};


export type GqlMutationCreateAlpineUserArgs = {
  acceptedTerms: Scalars['Boolean'];
  address?: Maybe<Scalars['String']>;
  dispensaryId: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  favoriteStore: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phoneNumber: Scalars['String'];
  program: Scalars['String'];
};


export type GqlMutationCreateAlpineUserV2Args = {
  acceptedTerms: Scalars['Boolean'];
  address?: Maybe<Scalars['String']>;
  dispensaryId: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  favoriteStore: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phoneNumber: Scalars['String'];
  program: Scalars['String'];
};


export type GqlMutationCreateBankAccountArgs = {
  adapter: Scalars['String'];
  aggregatorToken: Scalars['String'];
  billingAddressId: Scalars['String'];
  entityId: Scalars['String'];
  entityType: EntityTypes;
  sessionId?: Maybe<Scalars['String']>;
};


export type GqlMutationCreateBillingGroupArgs = {
  billingGroup: GqlCreateBillingGroupInput;
};


export type GqlMutationCreateBrandUserArgs = {
  updates: GqlBrandUserCreateInput;
};


export type GqlMutationCreateBrandV2Args = {
  brand: GqlBrandInput;
};


export type GqlMutationCreateBucketForLibraryItemArgs = {
  libraryItemId: Scalars['ID'];
};


export type GqlMutationCreateBucketV2Args = {
  bucket: GqlCreateBucketInput;
};


export type GqlMutationCreateBucketV3Args = {
  bucket: GqlCreateBucketInputV3;
};


export type GqlMutationCreateContactArgs = {
  email: Scalars['String'];
  location?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};


export type GqlMutationCreateContactUsArgs = {
  input: GqlContactUsInput;
};


export type GqlMutationCreateCouponV2Args = {
  coupon: GqlCreateCouponInput;
};


export type GqlMutationCreateEnterpriseSpecialV2Args = {
  input: GqlEnterpriseSpecialInputV2;
};


export type GqlMutationCreateIntegrationArgs = {
  integration: GqlIntegrationsUpdateInput;
};


export type GqlMutationCreateLibraryProductArgs = {
  product: GqlProductCreateInput;
  state: Scalars['String'];
};


export type GqlMutationCreateLibraryProductV2Args = {
  libraryProduct: GqlNewLibraryProduct;
  state: Scalars['String'];
};


export type GqlMutationCreateLibraryProductV3Args = {
  libraryProduct: GqlNewLibraryProductV2;
  state: Scalars['String'];
};


export type GqlMutationCreateMenuSectionArgs = {
  menuSection: GqlMenuSectionCreateInput;
};


export type GqlMutationCreateMessagingFeatureRequestArgs = {
  dispensaryName: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
};


export type GqlMutationCreateMxEnrollmentArgs = {
  billingAddress: GqlBillingAddressInput;
  entityEmail: Scalars['String'];
  entityId: Scalars['String'];
  entityName: Scalars['String'];
  entityType: EntityTypes;
  isMobileApp: Scalars['Boolean'];
};


export type GqlMutationCreateOrUpdateAchReturnArgs = {
  achEntryId: Scalars['String'];
  achReturnId?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  returnTraceNumber: Scalars['String'];
  submitAchEntry?: Maybe<Scalars['Boolean']>;
};


export type GqlMutationCreateOrUpdateAchReturnV5Args = {
  achEntryId: Scalars['String'];
  achReturnId?: Maybe<Scalars['String']>;
  returnCode: Scalars['String'];
  returnTraceNumber: Scalars['String'];
  submitAchEntry?: Maybe<Scalars['Boolean']>;
};


export type GqlMutationCreateOrUpdateAchReturnv4Args = {
  achEntryId: Scalars['String'];
  achReturnId?: Maybe<Scalars['String']>;
  returnCode: Scalars['String'];
  returnTraceNumber: Scalars['String'];
  submitAchEntry?: Maybe<Scalars['Boolean']>;
};


export type GqlMutationCreateOrderV2Args = {
  order?: Maybe<GqlOrdersCreateInput>;
};


export type GqlMutationCreateOrderingSuspensionV2Args = {
  dispensaryId: Scalars['ID'];
};


export type GqlMutationCreatePlusApiKeyV2Args = {
  dispensaryId: Scalars['String'];
  keyType: PlusApiKeyType;
};


export type GqlMutationCreatePlusEnterpriseApiKeyArgs = {
  enterpriseId: Scalars['String'];
  keyType: PlusApiKeyType;
};


export type GqlMutationCreateProductArgs = {
  product?: Maybe<GqlProductCreateInput>;
};


export type GqlMutationCreateRetailerAgentArgs = {
  position: Scalars['String'];
  retailerId: Scalars['String'];
  userId: Scalars['String'];
};


export type GqlMutationCreateRetailerEnrollmentArgs = {
  accountDetails: GqlAccountDetailsInput;
  billingAddress: GqlBillingAddressInput;
  entityId: Scalars['String'];
  entityName: Scalars['String'];
  entityType: Scalars['String'];
  serviceFeeDetails: GqlServiceFeeInput;
};


export type GqlMutationCreateSpecialV3Args = {
  input: GqlSpecialsInputV3;
};


export type GqlMutationCreateStrainV2Args = {
  strain: GqlStrainInput;
};


export type GqlMutationCreateTerpeneV2Args = {
  terpene: GqlTerpeneInput;
};


export type GqlMutationCreateUserArgs = {
  user: GqlUsersCreateInput;
};


export type GqlMutationDeleteBrandArgs = {
  id: Scalars['String'];
};


export type GqlMutationDeleteCouponArgs = {
  id: Scalars['String'];
};


export type GqlMutationDeleteCouponV2Args = {
  id: Scalars['String'];
};


export type GqlMutationDeleteDeviceV2Args = {
  id: Scalars['ID'];
};


export type GqlMutationDeleteEnterpriseSpecialArgs = {
  enterprise_id: Scalars['String'];
  id: Scalars['String'];
};


export type GqlMutationDeleteLibraryProductArgs = {
  id: Scalars['String'];
};


export type GqlMutationDeleteSpecialHoursArgs = {
  dispensaryId: Scalars['String'];
  specialHoursIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationDeleteSpecialV2Args = {
  id: Scalars['String'];
};


export type GqlMutationDeleteStrainArgs = {
  id: Scalars['String'];
};


export type GqlMutationDeleteSubscriptionArgs = {
  retailerIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationDeleteTerpeneArgs = {
  id: Scalars['String'];
};


export type GqlMutationDeleteUserArgs = {
  user: GqlUsersDeleteInput;
};


export type GqlMutationDestroyMenuSectionArgs = {
  dispensaryId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};


export type GqlMutationDestroyRetailerAgentArgs = {
  id: Scalars['String'];
};


export type GqlMutationDeviceHeartbeatArgs = {
  printerConnected: Scalars['Boolean'];
  versionNumber: Scalars['String'];
};


export type GqlMutationDisconnectBankAccountArgs = {
  mxAccountInfo: GqlMxAccountInfo;
};


export type GqlMutationDisconnectBucketProductArgs = {
  bucketId: Scalars['String'];
  productId: Scalars['String'];
};


export type GqlMutationDisconnectProductArgs = {
  id: Scalars['String'];
};


export type GqlMutationDispensaryContactUsArgs = {
  company?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};


export type GqlMutationDispensaryDemoRequestArgs = {
  input: GqlDispensaryDemoRequestInput;
};


export type GqlMutationDispensaryOnboardingArgs = {
  input: GqlDispensaryOnboardingInput;
};


export type GqlMutationDispensaryRemoveFromChainArgs = {
  input: GqlDispensaryRemoveFromChainInput;
};


export type GqlMutationDispensaryUpdateArgs = {
  input: GqlDispensaryUpdateInput;
};


export type GqlMutationDispensaryUpdateHoursSettingsArgs = {
  input: GqlDispensaryUpdateHoursSettingsInput;
};


export type GqlMutationDispensaryUpdateOptionsSettingsArgs = {
  input: GqlDispensaryUpdateOptionsSettingsInput;
};


export type GqlMutationDispensaryUpdateStatusArgs = {
  input: GqlDispensaryUpdateStatusInput;
};


export type GqlMutationDispensaryUpdateSuperAdminsArgs = {
  dispensaryId: Scalars['String'];
  superAdmins: Array<GqlDispensaryUpdateSuperAdminsInput>;
};


export type GqlMutationDispensaryUpdateTaxConfigurationArgs = {
  input?: Maybe<GqlDispensaryUpdateInput>;
};


export type GqlMutationDispensaryUploadOnboardingAssetArgs = {
  data?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
};


export type GqlMutationDissociateRetailersArgs = {
  retailerIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationEditCustomerV2Args = {
  billingContactEmails?: Maybe<Array<Maybe<Scalars['String']>>>;
  billingNotificationEnabled?: Maybe<Scalars['Boolean']>;
  chargebeeCustomerId: Scalars['String'];
};


export type GqlMutationEmailDispensaryCustomerListArgs = {
  input: GqlCustomerImportInput;
};


export type GqlMutationEmailIntegrationCredentialsArgs = {
  input?: Maybe<GqlIntegrationCredsInput>;
};


export type GqlMutationEndEnterpriseSpecialArgs = {
  enterprise_id: Scalars['String'];
  id: Scalars['String'];
};


export type GqlMutationEndOrderingSuspensionV2Args = {
  dispensaryId: Scalars['ID'];
};


export type GqlMutationEndSpecialV2Args = {
  id: Scalars['String'];
};


export type GqlMutationExpirePlusApiKeyArgs = {
  id: Scalars['String'];
};


export type GqlMutationExpirePlusEnterpriseApiKeyArgs = {
  id: Scalars['String'];
};


export type GqlMutationExportCouponsSummariesArgs = {
  input: GqlAnalyticsInput;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlMutationExportCustomerReportArgs = {
  export: GqlExportCustomerReportInput;
};


export type GqlMutationExportDispensaryCustomersArgs = {
  input: GqlCustomerExportInput;
};


export type GqlMutationExportFilteredBrandsSummariesArgs = {
  input: GqlBrandsSummaryInput;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlMutationExportFilteredCampaignsSummariesArgs = {
  input: GqlAnalyticsInput;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlMutationExportFilteredCartsSummariesArgs = {
  input: GqlAnalyticsInput;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlMutationExportFilteredProductSummariesArgs = {
  input: GqlProductsSummaryInput;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlMutationExportOrderReportArgs = {
  export: GqlExportOrderReportInput;
};


export type GqlMutationExportOrdersArgs = {
  cancelled?: Maybe<Scalars['Boolean']>;
  dispensaryId: Scalars['String'];
  email: Scalars['String'];
};


export type GqlMutationExportSpecialsSummariesArgs = {
  input: GqlAnalyticsInput;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlMutationGenerateDispensaryUserStreamTokenArgs = {
  input: GqlDispensaryUserStreamTokenInput;
};


export type GqlMutationGenerateHypurRedirectV3Args = {
  dispensaryId: Scalars['String'];
  embedded: Scalars['Boolean'];
  hostname?: Maybe<Scalars['String']>;
  v2?: Maybe<Scalars['Boolean']>;
};


export type GqlMutationGenerateHypurTokenV2Args = {
  code: Scalars['String'];
  hostname?: Maybe<Scalars['String']>;
  state: Scalars['String'];
};


export type GqlMutationImportCustomerCsvArgs = {
  CSV: Scalars['String'];
  dispensaryId: Scalars['String'];
};


export type GqlMutationImportDeliveryZipCodesArgs = {
  csv: Scalars['String'];
  dispensaryId: Scalars['String'];
};


export type GqlMutationImportMenuCsvArgs = {
  input: GqlImportMenuCsvInput;
};


export type GqlMutationIncrementClicksArgs = {
  special: GqlIncrementClicksInput;
};


export type GqlMutationIntegrationsDeleteArgs = {
  integrationId: Scalars['String'];
};


export type GqlMutationIntegrationsForceSyncArgs = {
  dispensaryId: Scalars['String'];
};


export type GqlMutationIntegrationsForceSyncInArmaArgs = {
  integrationId: Scalars['String'];
};


export type GqlMutationIntegrationsSuggestionArgs = {
  dispensaryId: Scalars['String'];
  suggestion?: Maybe<Scalars['String']>;
};


export type GqlMutationIntegrationsUpdateArgs = {
  input: GqlIntegrationsUpdateInput;
};


export type GqlMutationIntegrationsUpdateCrmFieldsArgs = {
  input: GqlIntegrationsUpdateCrmFieldsInput;
};


export type GqlMutationIntegrationsUpdateFieldsArgs = {
  input: GqlIntegrationsUpdateFieldsInput;
};


export type GqlMutationIntegrationsUpdateThresholdsArgs = {
  input: GqlIntegrationsUpdateThresholdsInput;
};


export type GqlMutationIntegrationsUpdateTypesArgs = {
  input: GqlIntegrationsUpdateTypesInput;
};


export type GqlMutationIntegrationsWipeMenuArgs = {
  integrationId: Scalars['String'];
};


export type GqlMutationIntegrationsWipeMenuInArmaArgs = {
  dispensaryId: Scalars['String'];
  integrationId: Scalars['String'];
};


export type GqlMutationLibraryProductChangeImpactArgs = {
  product: GqlProductCreateInput;
};


export type GqlMutationLibraryProductChangeImpactV3Args = {
  id: Scalars['String'];
  updates: GqlUpdatedLibraryProduct;
};


export type GqlMutationLogAnalyticsPayloadArgs = {
  payload: Scalars['JSONObject'];
};


export type GqlMutationLoginAdminArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type GqlMutationLoginAdminViaTokenArgs = {
  transferToken: Scalars['String'];
};


export type GqlMutationLoginConsumerArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type GqlMutationMarkAchEntryAsReturnedArgs = {
  achEntryId: Scalars['String'];
  code: Scalars['String'];
  originalTraceNumber: Scalars['String'];
  returnTraceNumber: Scalars['String'];
};


export type GqlMutationMarkAchEntryAsReturnedV3Args = {
  achEntryId: Scalars['String'];
  code: Scalars['String'];
  returnTraceNumber: Scalars['String'];
  submitAchEntry?: Maybe<Scalars['Boolean']>;
};


export type GqlMutationMarkAchEntryAsReturnedV4Args = {
  achEntryId: Scalars['String'];
  returnCode: Scalars['String'];
  returnTraceNumber: Scalars['String'];
  submitAchEntry?: Maybe<Scalars['Boolean']>;
};


export type GqlMutationMarkAchEntryAsReturnedV5Args = {
  achEntryId: Scalars['String'];
  returnCode: Scalars['String'];
  returnTraceNumber: Scalars['String'];
  submitAchEntry?: Maybe<Scalars['Boolean']>;
};


export type GqlMutationMarkCurbsideArrivalArrivedV2Args = {
  token: Scalars['String'];
};


export type GqlMutationMarkOrderAutoPrintedArgs = {
  input?: Maybe<GqlMarkOrderAutoPrintedInput>;
};


export type GqlMutationMarkOrderPosFailedArgs = {
  input?: Maybe<GqlMarkOrderPosFailedInput>;
};


export type GqlMutationMarkOrderPrintedArgs = {
  input?: Maybe<GqlMarkOrderPrintedInput>;
};


export type GqlMutationMarkOrdersBatchPrintedArgs = {
  input?: Maybe<GqlMarkOrdersBatchPrintedInput>;
};


export type GqlMutationMergeBrandArgs = {
  destinationBrandId: Scalars['String'];
  id: Scalars['String'];
};


export type GqlMutationParseAchReturnFileUploadArgs = {
  file: Scalars['String'];
};


export type GqlMutationParseAchReturnFileUploadV2Args = {
  file: Scalars['String'];
  fileName: Scalars['String'];
};


export type GqlMutationPauseSubscriptionArgs = {
  retailerIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationPersistCheckoutArgs = {
  dispensaryId: Scalars['String'];
  order: Scalars['JSON'];
  token: Scalars['String'];
};


export type GqlMutationPersistCheckoutV2Args = {
  dispensaryId: Scalars['String'];
  order: Scalars['JSON'];
  token?: Maybe<Scalars['String']>;
};


export type GqlMutationPrintOrderOnTerminalArgs = {
  input?: Maybe<GqlPrintOrderInput>;
};


export type GqlMutationRecordUserAcceptanceArgs = {
  acceptanceDocumentId: Scalars['String'];
  entityId: Scalars['String'];
  entityType: EntityTypes;
  userId: Scalars['String'];
};


export type GqlMutationRemoveSubscriptionFromChainArgs = {
  chargebeeCustomerId: Scalars['String'];
  ids: Array<Maybe<Scalars['String']>>;
};


export type GqlMutationReopenOrderArgs = {
  id: Scalars['String'];
};


export type GqlMutationResetPasswordV2Args = {
  input: GqlResetPasswordInput;
};


export type GqlMutationRespondToAchReturnArgs = {
  achReturnId: Scalars['String'];
  discretionaryData?: Maybe<Scalars['String']>;
  identificationNumber?: Maybe<Scalars['String']>;
  rdfiIdentification?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  secCode?: Maybe<Scalars['String']>;
};


export type GqlMutationResumeSubscriptionArgs = {
  retailerIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationReversePaymentArgs = {
  achEntryId: Scalars['String'];
  identificationNumber?: Maybe<Scalars['String']>;
  traceNumber?: Maybe<Scalars['String']>;
};


export type GqlMutationReverseSettlementArgs = {
  achEntryId: Scalars['String'];
  identificationNumber?: Maybe<Scalars['String']>;
  traceNumber?: Maybe<Scalars['String']>;
};


export type GqlMutationRevertBrandMergeArgs = {
  id: Scalars['String'];
};


export type GqlMutationSendBrandUserPasswordResetEmailArgs = {
  email: Scalars['String'];
};


export type GqlMutationSendPasswordResetEmailV2Args = {
  email: Scalars['String'];
};


export type GqlMutationSetPasswordV2Args = {
  input: GqlSetPasswordInput;
};


export type GqlMutationSetupBillingV2Args = {
  customerName: Scalars['String'];
  dispensaryIds: Array<Scalars['String']>;
};


export type GqlMutationSetupRetailerBankPaymentMethodArgs = {
  accountId: Scalars['String'];
  retailerIds: Array<Maybe<Scalars['ID']>>;
  token: Scalars['String'];
};


export type GqlMutationSetupRetailerBillingArgs = {
  retailerIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationSetupRetailerCreditPaymentMethodArgs = {
  retailerIds: Array<Maybe<Scalars['ID']>>;
  token: Scalars['String'];
};


export type GqlMutationSkipBucketProductArgs = {
  bucketId: Scalars['String'];
  productId: Scalars['String'];
};


export type GqlMutationSkipBucketProductV2Args = {
  bucketId: Scalars['String'];
  productId: Scalars['String'];
  skipReasons: Array<SkipReasonEnum>;
};


export type GqlMutationSortMenuSectionsArgs = {
  dispensaryId: Scalars['String'];
  ids: Array<Scalars['String']>;
};


export type GqlMutationSpeculativeProductUpdateArgs = {
  bucketId: Scalars['String'];
  product?: Maybe<GqlProductCreateInput>;
  productId: Scalars['String'];
};


export type GqlMutationSubscribeToOrderingSuspensionArgs = {
  dispensaryId: Scalars['String'];
  phone: Scalars['String'];
};


export type GqlMutationUnarchiveOrderArgs = {
  id: Scalars['String'];
};


export type GqlMutationUnsubscribeDispensaryCustomersArgs = {
  input: GqlUnsubscribeDispensaryCustomersInput;
};


export type GqlMutationUnsubscribeFromDispensaryV2Args = {
  dispensaryId: Scalars['String'];
  email: Scalars['String'];
};


export type GqlMutationUpdateAutoPrintDevicesV2Args = {
  deviceIds: Array<Scalars['String']>;
  dispensaryId: Scalars['String'];
};


export type GqlMutationUpdateBillingGroupArgs = {
  billingGroup: GqlUpdateBillingGroupInput;
};


export type GqlMutationUpdateBillingNotificationsArgs = {
  billingContactEmails: Array<Maybe<Scalars['String']>>;
  billingNotificationEnabled: Scalars['Boolean'];
  retailerIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationUpdateBrandCollisionArgs = {
  brandCollision: GqlBrandCollisionInput;
  id: Scalars['String'];
};


export type GqlMutationUpdateBrandUserArgs = {
  id: Scalars['ID'];
  updates: GqlBrandUserUpdateInput;
};


export type GqlMutationUpdateBrandUserAccountArgs = {
  updates: GqlBrandUserUpdateAccountInput;
};


export type GqlMutationUpdateBrandV2Args = {
  brand: GqlBrandInput;
  id: Scalars['String'];
};


export type GqlMutationUpdateChainDispensariesImageArgs = {
  dispensaryId: Scalars['String'];
  image_variant_keys?: Maybe<Array<ImageVariantKeyEnum>>;
};


export type GqlMutationUpdateChangeRequestCreateProductArgs = {
  complianceRegionId?: Maybe<Scalars['String']>;
  contentAttributes?: Maybe<GqlUpdatedLibraryProduct>;
  feedback?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};


export type GqlMutationUpdateChangeRequestUpdateProductArgs = {
  contentAttributes?: Maybe<GqlUpdatedLibraryProduct>;
  feedback?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};


export type GqlMutationUpdateChargebeeSubscriptionArgs = {
  billingPeriod?: Maybe<BillingPeriod>;
  chargebeeSubscriptionId: Scalars['String'];
  endFreeTrial?: Maybe<Scalars['Boolean']>;
  freeTrialEndDate?: Maybe<Scalars['Int']>;
  manualPayments?: Maybe<Scalars['Boolean']>;
  pauseSubscription?: Maybe<Scalars['Boolean']>;
  priceInCents?: Maybe<Scalars['Int']>;
};


export type GqlMutationUpdateCnameArgs = {
  cname: Scalars['String'];
  dispensaryId: Scalars['String'];
};


export type GqlMutationUpdateConsumerUserArgs = {
  user: GqlConsumerUserProfileInput;
};


export type GqlMutationUpdateCouponArgs = {
  coupon: GqlUpdateCouponInput;
};


export type GqlMutationUpdateCurbsideArrivalV2Args = {
  arrivalInformation: Scalars['String'];
  token: Scalars['String'];
};


export type GqlMutationUpdateCustomerSubscriptionArgs = {
  customerId: Scalars['String'];
  subscribed: Scalars['Boolean'];
};


export type GqlMutationUpdateDeviceArgs = {
  device: GqlUpdateDeviceInput;
};


export type GqlMutationUpdateDispensaryCustomerArgs = {
  customer: GqlDispensaryCustomerInput;
};


export type GqlMutationUpdateEmailArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type GqlMutationUpdateEnterpriseSpecialV2Args = {
  id: Scalars['String'];
  input: GqlEnterpriseSpecialInputV2;
};


export type GqlMutationUpdateHoursSettingsArgs = {
  input: GqlHoursSettingsUpdateInput;
};


export type GqlMutationUpdateImageBannersArgs = {
  dispensaryId: Scalars['String'];
  input: GqlUpdateImageBannersInput;
};


export type GqlMutationUpdateIntegrationArgs = {
  integration: GqlIntegrationsUpdateInput;
  integrationId: Scalars['String'];
};


export type GqlMutationUpdateLibraryProductArgs = {
  id: Scalars['String'];
  updates: GqlUpdatedLibraryProduct;
};


export type GqlMutationUpdateMenuSectionArgs = {
  id: Scalars['ID'];
  menuSection: GqlMenuSectionUpdateInput;
};


export type GqlMutationUpdateOrderStatusArgs = {
  order?: Maybe<GqlOrdersStatusUpdateInput>;
};


export type GqlMutationUpdateOrderV2Args = {
  input?: Maybe<GqlOrdersCreateInput>;
};


export type GqlMutationUpdateOrderingSettingsArgs = {
  input: GqlOrderingSettingsUpdateInput;
};


export type GqlMutationUpdatePasswordV2Args = {
  newPassword: Scalars['String'];
  oldPassword: Scalars['String'];
};


export type GqlMutationUpdateProductArgs = {
  bucketId?: Maybe<Scalars['String']>;
  omitFields?: Maybe<Array<Maybe<Scalars['String']>>>;
  product?: Maybe<GqlProductCreateInput>;
  productId?: Maybe<Scalars['String']>;
};


export type GqlMutationUpdateProductSortArgs = {
  input: GqlUpdateProductSortInput;
};


export type GqlMutationUpdateProductStatusArgs = {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};


export type GqlMutationUpdateProfileV2Args = {
  profile: GqlConsumerUserProfileInput;
};


export type GqlMutationUpdateReservationSlotsArgs = {
  input: GqlReservationSlotsUpdateInput;
};


export type GqlMutationUpdateSpecialV3Args = {
  id: Scalars['String'];
  input: GqlSpecialsInputV3;
};


export type GqlMutationUpdateSpecialsSortOrderArgs = {
  input: GqlSortOrderInput;
};


export type GqlMutationUpdateStrainV2Args = {
  id: Scalars['String'];
  strain: GqlStrainInput;
};


export type GqlMutationUpdateSubscriptionBillingPeriodArgs = {
  billingPeriod: BillingPeriod;
  retailerIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationUpdateSubscriptionManualPaymentsArgs = {
  manualPayments: Scalars['Boolean'];
  retailerIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationUpdateSubscriptionPriceArgs = {
  priceInCents: Scalars['String'];
  retailerIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationUpdateSubscriptionTrialArgs = {
  endDate?: Maybe<Scalars['String']>;
  retailerIds: Array<Maybe<Scalars['ID']>>;
};


export type GqlMutationUpdateTerpeneV2Args = {
  id: Scalars['String'];
  terpene: GqlTerpeneInput;
};


export type GqlMutationUpdateTextSettingArgs = {
  enabled?: Maybe<Scalars['Boolean']>;
};


export type GqlMutationUpdateUserArgs = {
  user: GqlUsersUpdateInput;
};


export type GqlMutationUpdateUserEmailArgs = {
  currentEmail: Scalars['String'];
  newEmail: Scalars['String'];
};


export type GqlMutationUpdateUserPermissionsArgs = {
  email: Scalars['String'];
  permission: Scalars['String'];
};


export type GqlMutationUpdateUserRoleArgs = {
  email: Scalars['String'];
  role: Scalars['String'];
};


export type GqlMutationUpdateUserRoleV2Args = {
  email: Scalars['String'];
  role: UserRoles;
};


export type GqlMutationUpdateWebCustomizationSettingsArgs = {
  dispensaryId: Scalars['String'];
  input: GqlUpdateWebCustomizationSettingsInput;
};


export type GqlMutationUploadImageArgs = {
  input: GqlImageUploadInput;
};


export type GqlMutationUploadSecureImageArgs = {
  input: GqlImageUploadInput;
};


export type GqlMutationVerifyBucketProductsArgs = {
  ids: Array<Scalars['String']>;
};

export type GqlMxAccountInfo = {
  memberGuid: Scalars['String'];
  userGuid: Scalars['String'];
};

export type GqlMxBankAccount = {
  __typename?: 'MxBankAccount';
  accountAlias?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  billingAddressId?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  entityId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  lastDigits?: Maybe<Scalars['String']>;
  mx?: Maybe<GqlMxResponse>;
  status?: Maybe<Scalars['String']>;
};

export type GqlMxBankAccounts = {
  __typename?: 'MxBankAccounts';
  bankAccounts?: Maybe<Array<GqlMxBankAccount>>;
};

export type GqlMxMemberVerification = {
  __typename?: 'MxMemberVerification';
  accounts: Array<GqlAccount>;
  identificationComplete: Scalars['Boolean'];
  needsAccountSelection: Scalars['Boolean'];
  needsMfa: Scalars['Boolean'];
  url?: Maybe<Scalars['String']>;
};

export type GqlMxResponse = {
  __typename?: 'MxResponse';
  connectionStatus: Scalars['String'];
  widgetUrl: Scalars['String'];
};

export type GqlNamedProductPotency = {
  __typename?: 'NamedProductPotency';
  name: Scalars['String'];
  range: Array<Scalars['Float']>;
  unit: Scalars['String'];
};

export enum NavBarColor {
  aliceBlue = 'ALICE_BLUE',
  lightBrown = 'LIGHT_BROWN',
  white = 'WHITE',
  whiteSmoke = 'WHITE_SMOKE'
}

export type GqlNewLibraryProduct = {
  AdditionalOptions?: Maybe<Array<Scalars['String']>>;
  CBD?: Maybe<Scalars['String']>;
  CBDContent?: Maybe<GqlLibraryProductPotencyInput>;
  Description?: Maybe<Scalars['String']>;
  Image?: Maybe<Scalars['String']>;
  Name: Scalars['String'];
  Options?: Maybe<Array<Maybe<Scalars['String']>>>;
  Prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  Status?: Maybe<Scalars['String']>;
  THC?: Maybe<Scalars['String']>;
  THCContent?: Maybe<GqlLibraryProductPotencyInput>;
  addedUsingCCT?: Maybe<Scalars['Boolean']>;
  bottleDepositTaxCents?: Maybe<Scalars['Int']>;
  brandId?: Maybe<Scalars['String']>;
  cannabinoids?: Maybe<Array<GqlLibraryProductCannabinoidsInputV2>>;
  cannabinoidsV2?: Maybe<Array<GqlLibraryProductCannabinoidsInputV2>>;
  comingSoon?: Maybe<Scalars['Boolean']>;
  connectedCount?: Maybe<Scalars['Int']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  duplicatedProductId?: Maybe<Scalars['String']>;
  effects?: Maybe<Scalars['JSON']>;
  flavors?: Maybe<Array<Scalars['String']>>;
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  integrationKey?: Maybe<Scalars['String']>;
  limitsPerCustomer?: Maybe<Array<GqlLibraryProductLimitPerCustomerInput>>;
  manualInventory?: Maybe<Array<GqlLibraryProductManualInventoryInput>>;
  medicalOnly?: Maybe<Scalars['Boolean']>;
  medicalPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  recOnly?: Maybe<Scalars['Boolean']>;
  recPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  terpenes?: Maybe<Array<GqlLibraryProductTerpenesInput>>;
  type?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['Float']>;
};

export type GqlNewLibraryProductV2 = {
  AdditionalOptions?: Maybe<Array<Scalars['String']>>;
  CBD?: Maybe<Scalars['String']>;
  CBDContent?: Maybe<GqlLibraryProductPotencyInput>;
  Description?: Maybe<Scalars['String']>;
  Image?: Maybe<Scalars['String']>;
  Name: Scalars['String'];
  Options?: Maybe<Array<Maybe<Scalars['String']>>>;
  Prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  Status?: Maybe<Scalars['String']>;
  THC?: Maybe<Scalars['String']>;
  THCContent?: Maybe<GqlLibraryProductPotencyInput>;
  addedUsingCCT?: Maybe<Scalars['Boolean']>;
  bottleDepositTaxCents?: Maybe<Scalars['Int']>;
  brandId?: Maybe<Scalars['String']>;
  cannabinoids?: Maybe<Array<GqlLibraryProductCannabinoidsInputV2>>;
  cannabinoidsV2?: Maybe<Array<GqlLibraryProductCannabinoidsInputV2>>;
  comingSoon?: Maybe<Scalars['Boolean']>;
  connectedCount?: Maybe<Scalars['Int']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  duplicatedProductId?: Maybe<Scalars['String']>;
  effects?: Maybe<Scalars['JSON']>;
  flavors?: Maybe<Array<Scalars['String']>>;
  gtin?: Maybe<Scalars['String']>;
  images?: Maybe<Array<Maybe<GqlProducts_ImagesInput>>>;
  integrationKey?: Maybe<Scalars['String']>;
  limitsPerCustomer?: Maybe<Array<GqlLibraryProductLimitPerCustomerInput>>;
  manualInventory?: Maybe<Array<GqlLibraryProductManualInventoryInput>>;
  medicalOnly?: Maybe<Scalars['Boolean']>;
  medicalPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  productTemplate?: Maybe<Scalars['Boolean']>;
  recOnly?: Maybe<Scalars['Boolean']>;
  recPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  sku?: Maybe<Scalars['String']>;
  stockImage?: Maybe<Scalars['String']>;
  stockImageAliases?: Maybe<Scalars['String']>;
  stockImageCategory?: Maybe<Scalars['String']>;
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  terpenes?: Maybe<Array<GqlLibraryProductTerpenesInput>>;
  type?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['Float']>;
};

export type GqlNextServiceForOrderType = {
  closeMoment?: Maybe<Scalars['String']>;
  openMoment?: Maybe<Scalars['String']>;
  openString?: Maybe<Scalars['String']>;
};

export type GqlNsfAchReturnReport = {
  __typename?: 'NsfAchReturnReport';
  nsfAchReturnReport?: Maybe<Array<Maybe<GqlNsfAchReturnReportRow>>>;
};

export type GqlNsfAchReturnReportResponse = {
  __typename?: 'NsfAchReturnReportResponse';
  data?: Maybe<GqlNsfAchReturnReport>;
};

export type GqlNsfAchReturnReportRow = {
  __typename?: 'NsfAchReturnReportRow';
  companyName?: Maybe<Scalars['String']>;
  date?: Maybe<GqlGoogleProtobufTimestamp>;
  dollarAmount?: Maybe<Scalars['Float']>;
  endUserName?: Maybe<Scalars['String']>;
  returnCode?: Maybe<Scalars['String']>;
};

export type GqlOldProductData = {
  __typename?: 'OldProductData';
  CBDContent?: Maybe<GqlProductPotency>;
  Name?: Maybe<Scalars['String']>;
  POSMetaData?: Maybe<GqlProducts_PosMetaData>;
  THCContent?: Maybe<GqlProductPotency>;
  brand?: Maybe<GqlBrand>;
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlOpenInfoForDevice = {
  __typename?: 'OpenInfoForDevice';
  nextServiceString?: Maybe<Scalars['String']>;
  shouldDeviceDisplayClosed?: Maybe<Scalars['Boolean']>;
  shouldDevicePlayOrderAlert?: Maybe<Scalars['Boolean']>;
};

export type GqlOpenInfoForOrderType = {
  isClosed?: Maybe<Scalars['Boolean']>;
  isOpen?: Maybe<Scalars['Boolean']>;
  nextService?: Maybe<GqlNextServiceForOrderType>;
};

export type GqlOrderEditEvents = {
  __typename?: 'OrderEditEvents';
  agentName?: Maybe<Scalars['String']>;
  at?: Maybe<Scalars['String']>;
  by?: Maybe<Scalars['String']>;
  byType?: Maybe<Scalars['String']>;
};

export type GqlOrderList = {
  __typename?: 'OrderList';
  orders?: Maybe<Array<Maybe<GqlOrders>>>;
  queryInfo?: Maybe<GqlQueryInfoType>;
};

export type GqlOrderMinimum = {
  __typename?: 'OrderMinimum';
  enabled?: Maybe<Scalars['Boolean']>;
  minimumInCents?: Maybe<Scalars['Int']>;
};

export type GqlOrderMinimumInput = {
  enabled?: Maybe<Scalars['Boolean']>;
  minimumInCents?: Maybe<Scalars['Int']>;
};

export type GqlOrderPrinted = {
  __typename?: 'OrderPrinted';
  printed?: Maybe<Scalars['Boolean']>;
};

export enum OrderQueryStatuses {
  active = 'active',
  all = 'all',
  allIncludingArchived = 'allIncludingArchived',
  archived = 'archived',
  closed = 'closed',
  danger = 'danger'
}

export type GqlOrderReservation = {
  __typename?: 'OrderReservation';
  endTimeISO?: Maybe<Scalars['ISODateTime']>;
  slotId?: Maybe<Scalars['String']>;
  startTimeISO?: Maybe<Scalars['ISODateTime']>;
};

export type GqlOrderReservationInput = {
  endTimeISO?: Maybe<Scalars['ISODateTime']>;
  slotId?: Maybe<Scalars['String']>;
  startTimeISO?: Maybe<Scalars['ISODateTime']>;
};

export type GqlOrderSchedulingDataInput = {
  afterHoursEnabled?: Maybe<Scalars['Boolean']>;
  afterHoursInEffect?: Maybe<Scalars['Boolean']>;
  dispensaryId?: Maybe<Scalars['String']>;
  orderType?: Maybe<Scalars['String']>;
  orderTypeHours?: Maybe<GqlHoursForOrderType>;
  orderTypeOpenInfo?: Maybe<GqlOpenInfoForOrderType>;
  reservationSlots?: Maybe<Array<Maybe<GqlReservationSlotsForOrderType>>>;
  scheduledOrderingEnabled?: Maybe<Scalars['Boolean']>;
  schedulingOption?: Maybe<Scalars['String']>;
};

export type GqlOrderStatusEmailSettings = {
  __typename?: 'OrderStatusEmailSettings';
  disableConfirmed?: Maybe<Scalars['Boolean']>;
  disableOutForDelivery?: Maybe<Scalars['Boolean']>;
  disableReadyForPickup?: Maybe<Scalars['Boolean']>;
  disableSubmitted?: Maybe<Scalars['Boolean']>;
};

export type GqlOrderStatusEvents = {
  __typename?: 'OrderStatusEvents';
  agentName?: Maybe<Scalars['String']>;
  at?: Maybe<Scalars['String']>;
  by?: Maybe<Scalars['String']>;
  byType?: Maybe<Scalars['String']>;
  event?: Maybe<Scalars['String']>;
};

export enum OrderType {
  delivery = 'delivery',
  kiosk = 'kiosk',
  pickupAll = 'pickup_all',
  pickupCurbside = 'pickup_curbside',
  pickupDrivethru = 'pickup_drivethru',
  pickupInstore = 'pickup_instore'
}

export type GqlOrderTypeConfig = {
  __typename?: 'OrderTypeConfig';
  enabled?: Maybe<Scalars['Boolean']>;
  paymentTypes?: Maybe<GqlPaymentTypesConfig>;
};

export enum OrderTypes {
  all = 'all',
  delivery = 'delivery',
  kiosk = 'kiosk',
  pickup = 'pickup'
}

export type GqlOrderTypesConfig = {
  __typename?: 'OrderTypesConfig';
  curbsidePickup?: Maybe<GqlOrderTypeConfig>;
  delivery?: Maybe<GqlOrderTypeConfig>;
  driveThruPickup?: Maybe<GqlOrderTypeConfig>;
  kiosk?: Maybe<GqlOrderTypeConfig>;
  offerAnyPickupService?: Maybe<Scalars['Boolean']>;
  offerDeliveryService?: Maybe<Scalars['Boolean']>;
  pickup?: Maybe<GqlOrderTypeConfig>;
};

export type GqlOrderTypesConfigV2 = {
  __typename?: 'OrderTypesConfigV2';
  curbsidePickup?: Maybe<GqlCurbsidePickupOrderingSettings>;
  delivery?: Maybe<GqlDeliveryOrderingSettings>;
  driveThruPickup?: Maybe<GqlDriveThruPickupOrderingSettings>;
  inStorePickup?: Maybe<GqlInStorePickupOrderingSettings>;
  kiosk?: Maybe<GqlKioskOrderingSettings>;
  offerAnyPickupService?: Maybe<Scalars['Boolean']>;
  offerDeliveryService?: Maybe<Scalars['Boolean']>;
};

export type GqlOrderUpdated = {
  __typename?: 'OrderUpdated';
  updated?: Maybe<Scalars['Boolean']>;
};

export type GqlOrder_BottleDepositTaxExistence = {
  __typename?: 'Order_bottleDepositTaxExistence';
  med?: Maybe<GqlOrder_TaxStages>;
  rec?: Maybe<GqlOrder_TaxStages>;
};

export type GqlOrder_CannabisTaxExistence = {
  __typename?: 'Order_cannabisTaxExistence';
  med?: Maybe<GqlOrder_TaxStages>;
  rec?: Maybe<GqlOrder_TaxStages>;
};

export type GqlOrder_Product = {
  __typename?: 'Order_product';
  AdditionalOptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  CBDContent?: Maybe<GqlProductPotency>;
  Image?: Maybe<Scalars['String']>;
  Name?: Maybe<Scalars['String']>;
  Options?: Maybe<Array<Maybe<Scalars['String']>>>;
  POSMetaData?: Maybe<GqlProducts_PosMetaData>;
  Prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  THCContent?: Maybe<GqlProductPotency>;
  _id?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  integrationKey?: Maybe<Scalars['String']>;
  preTaxMedPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  preTaxRecPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  productName?: Maybe<Scalars['String']>;
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlOrder_SalesTaxExistence = {
  __typename?: 'Order_salesTaxExistence';
  med?: Maybe<GqlOrder_TaxStages>;
  rec?: Maybe<GqlOrder_TaxStages>;
};

export type GqlOrder_TaxStages = {
  __typename?: 'Order_taxStages';
  checkout?: Maybe<Scalars['Boolean']>;
  menu?: Maybe<Scalars['Boolean']>;
  pos?: Maybe<Scalars['Boolean']>;
};

export type GqlOrderingSettingsUpdateInput = {
  curbsidePickup?: Maybe<GqlCurbsidePickupInput>;
  delivery?: Maybe<GqlDeliveryInput>;
  dispensaryId: Scalars['String'];
  driveThruPickup?: Maybe<GqlBasicSettingsInput>;
  inStorePickup?: Maybe<GqlBasicSettingsInput>;
  kiosk?: Maybe<GqlKioskInput>;
};

export type GqlOrderingSuspension = {
  __typename?: 'OrderingSuspension';
  active: Scalars['Boolean'];
  createdAt: Scalars['String'];
  createdBy: Scalars['String'];
  dispensaryId: Scalars['String'];
  id: Scalars['String'];
  pausedAt: Scalars['String'];
  pausedBy: Scalars['String'];
  resumedAt?: Maybe<Scalars['String']>;
  resumedBy?: Maybe<Scalars['String']>;
  subscriberCount?: Maybe<Scalars['Int']>;
  subscribers?: Maybe<Array<Maybe<GqlOrderingSuspension_Subscriber>>>;
};

export type GqlOrderingSuspension_Subscriber = {
  __typename?: 'OrderingSuspension_Subscriber';
  addedAt?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type GqlOrders = {
  __typename?: 'Orders';
  apartmentNum?: Maybe<Scalars['String']>;
  appliedRewards?: Maybe<Array<Maybe<GqlReward>>>;
  archivedAtISO?: Maybe<Scalars['ISODateTime']>;
  archivedBy?: Maybe<Scalars['String']>;
  autoClosed?: Maybe<Scalars['Boolean']>;
  autoConfirmed?: Maybe<Scalars['Boolean']>;
  bottleDepositTaxCents?: Maybe<Scalars['Int']>;
  bottleDepositTaxExistence?: Maybe<GqlOrder_BottleDepositTaxExistence>;
  cancellationReason?: Maybe<Scalars['String']>;
  cannabisTax?: Maybe<Scalars['Float']>;
  cannabisTaxExistence?: Maybe<GqlOrder_CannabisTaxExistence>;
  closedByDriver?: Maybe<Scalars['Boolean']>;
  closedByTerminal?: Maybe<Scalars['Boolean']>;
  coupon?: Maybe<GqlCoupons>;
  createdAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  credit?: Maybe<Scalars['Float']>;
  creditTotal?: Maybe<Scalars['String']>;
  curbsideArrivalInfo?: Maybe<GqlCurbsideArrival>;
  customer?: Maybe<GqlOrders_Customer>;
  customerState?: Maybe<Scalars['String']>;
  /** @deprecated Replaced by durationEstimates.delivery - 10/04/19 */
  deliveryEstimate?: Maybe<Scalars['String']>;
  deliveryFee?: Maybe<Scalars['Float']>;
  deliveryInfo?: Maybe<GqlOrders_DeliveryInfo>;
  destinationTerminal?: Maybe<Scalars['String']>;
  dispensary?: Maybe<GqlOrders_Dispensary>;
  dispoTimezone?: Maybe<Scalars['String']>;
  driverEmail?: Maybe<Scalars['String']>;
  driverName?: Maybe<Scalars['String']>;
  driverNumber?: Maybe<Scalars['String']>;
  driversLicense?: Maybe<Scalars['String']>;
  duration?: Maybe<Scalars['Float']>;
  durationEstimates?: Maybe<GqlDurationEstimates>;
  dutchiePay?: Maybe<GqlDutchiePay>;
  editEvents?: Maybe<Array<Maybe<GqlOrderEditEvents>>>;
  embedded?: Maybe<Scalars['Boolean']>;
  fleetManagementTask?: Maybe<GqlOrders_FleetManagementTask>;
  guestCustomer?: Maybe<GqlOrders_GuestCustomer>;
  hypur?: Maybe<GqlHypurDetails>;
  id?: Maybe<Scalars['String']>;
  isAfterHoursOrder?: Maybe<Scalars['Boolean']>;
  isAnonymous?: Maybe<Scalars['Boolean']>;
  isArchived?: Maybe<Scalars['Boolean']>;
  isCurbsidePickupOrder?: Maybe<Scalars['Boolean']>;
  isDriveThruPickupOrder?: Maybe<Scalars['Boolean']>;
  isExternalUserOrder?: Maybe<Scalars['Boolean']>;
  isGuestOrder?: Maybe<Scalars['Boolean']>;
  isKioskOrder?: Maybe<Scalars['Boolean']>;
  /** @deprecated temporary field to toggle compatibility with outdated clients */
  isPTPOT?: Maybe<Scalars['Boolean']>;
  isPreviewOrder?: Maybe<Scalars['Boolean']>;
  linx?: Maybe<GqlOrders_Linx>;
  manualDiscount?: Maybe<GqlOrders_ManualDiscount>;
  medicalCard?: Maybe<GqlOrders_MedicalCard>;
  medicalOrder?: Maybe<Scalars['Boolean']>;
  messages?: Maybe<Array<Maybe<Scalars['String']>>>;
  mixAndMatch?: Maybe<Scalars['Float']>;
  mobile?: Maybe<Scalars['Boolean']>;
  moneris?: Maybe<Array<Maybe<GqlMonerisDetails>>>;
  orderId?: Maybe<Scalars['String']>;
  orders: Array<GqlOrders_Order>;
  paymentFee?: Maybe<Scalars['Float']>;
  paymentMethod?: Maybe<Scalars['String']>;
  paymentMethodId?: Maybe<Scalars['String']>;
  payments?: Maybe<Array<Maybe<GqlPaymentDetails>>>;
  paysafe?: Maybe<GqlPaysafeDetails>;
  pos?: Maybe<GqlOrders_Pos>;
  preTaxMedPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  preTaxRecPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  printCommandsJson?: Maybe<Scalars['JSON']>;
  printCommandsWithLogoJson?: Maybe<Scalars['JSON']>;
  receipt?: Maybe<Scalars['JSONObject']>;
  receiptURL?: Maybe<Scalars['String']>;
  reservation?: Maybe<GqlOrderReservation>;
  salesTaxExistence?: Maybe<GqlOrder_SalesTaxExistence>;
  signatureImage?: Maybe<Scalars['String']>;
  specialInstructions?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  statusEvents?: Maybe<Array<Maybe<GqlOrderStatusEvents>>>;
  statusTimes?: Maybe<Array<Maybe<Scalars['String']>>>;
  subtotal?: Maybe<Scalars['String']>;
  taxAmount?: Maybe<Scalars['Float']>;
  terminal?: Maybe<Scalars['String']>;
  tipAmount?: Maybe<Scalars['Float']>;
  tipValue?: Maybe<GqlOrders_TipValue>;
  total?: Maybe<Scalars['String']>;
  totalCost?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  variantSource?: Maybe<Scalars['String']>;
};

export type GqlOrders_Pos = {
  __typename?: 'Orders_POS';
  externalID?: Maybe<Scalars['String']>;
  failureAcks?: Maybe<GqlOrders_Pos_FailureLocations>;
  failureReason?: Maybe<Scalars['String']>;
  failureType?: Maybe<Scalars['String']>;
  humanReadableError?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type GqlOrders_Pos_FailureLocations = {
  __typename?: 'Orders_POS_FailureLocations';
  terminal?: Maybe<Scalars['Boolean']>;
  web?: Maybe<Scalars['Boolean']>;
};

export type GqlOrders_Customer = {
  __typename?: 'Orders_customer';
  _id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  emails?: Maybe<Array<Maybe<GqlOrders_Customer_Emails>>>;
  profile?: Maybe<GqlOrders_Customer_Profile>;
};

export type GqlOrders_Customer_Emails = {
  __typename?: 'Orders_customer_emails';
  address?: Maybe<Scalars['String']>;
  verified?: Maybe<Scalars['Boolean']>;
};

export type GqlOrders_Customer_Profile = {
  __typename?: 'Orders_customer_profile';
  address?: Maybe<Scalars['String']>;
  birthday?: Maybe<Scalars['String']>;
  cart?: Maybe<GqlOrders_Customer_Profile_Cart>;
  coords?: Maybe<Array<Maybe<Scalars['Float']>>>;
  driversLicense?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  emailNotifications?: Maybe<Scalars['Boolean']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  linx?: Maybe<GqlOrders_Customer_Profile_Linx>;
  medicalCard?: Maybe<GqlOrders_MedicalCard>;
  offeredDispoSubscriptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone?: Maybe<Scalars['String']>;
  photoId?: Maybe<Scalars['String']>;
  resetToken?: Maybe<Scalars['String']>;
  resetTokenTime?: Maybe<Scalars['String']>;
  textNotifications?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlOrders_Customer_Profile_Cart = {
  __typename?: 'Orders_customer_profile_cart';
  orderItems?: Maybe<Array<Maybe<GqlOrders_Customer_Profile_Cart_OrderItems>>>;
};

export type GqlOrders_Customer_Profile_Cart_OrderItems = {
  __typename?: 'Orders_customer_profile_cart_orderItems';
  additionalOption?: Maybe<Scalars['String']>;
  itemName?: Maybe<Scalars['String']>;
  option?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
};

export type GqlOrders_Customer_Profile_Linx = {
  __typename?: 'Orders_customer_profile_linx';
  license?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type GqlOrders_DeliveryInfo = {
  __typename?: 'Orders_deliveryInfo';
  address?: Maybe<Scalars['String']>;
  apartmentNum?: Maybe<Scalars['String']>;
  deliveryAddress?: Maybe<Scalars['String']>;
  deliveryOption?: Maybe<Scalars['Boolean']>;
  lastSearchedAddress?: Maybe<Scalars['String']>;
  location?: Maybe<GqlOrders_Location>;
  nonDeliveryAddress?: Maybe<Scalars['String']>;
};

export type GqlOrders_Dispensary = {
  __typename?: 'Orders_dispensary';
  _id?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  aeropay?: Maybe<Scalars['Boolean']>;
  alt36?: Maybe<Scalars['Boolean']>;
  cName?: Maybe<Scalars['String']>;
  canPay?: Maybe<Scalars['Boolean']>;
  chain?: Maybe<Scalars['String']>;
  check?: Maybe<Scalars['Boolean']>;
  creditCardAtDoor?: Maybe<Scalars['Boolean']>;
  creditCardByPhone?: Maybe<Scalars['Boolean']>;
  customDomainSettings?: Maybe<GqlDispensaries_Profile_CustomDomain_Settings>;
  debitOnly?: Maybe<Scalars['Boolean']>;
  deliveryHours?: Maybe<GqlDispensaries_Profile_Hours>;
  deliveryMin?: Maybe<Scalars['String']>;
  displayBrands?: Maybe<Scalars['Boolean']>;
  featureFlags?: Maybe<GqlDispensaries_FeatureFlags>;
  feeTiers?: Maybe<Array<Maybe<GqlDispensaries_Profile_FeeTiers>>>;
  linx?: Maybe<Scalars['Boolean']>;
  logoImage?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  offerDelivery?: Maybe<Scalars['Boolean']>;
  ordersConfig?: Maybe<GqlDispensaries_OrdersConfig>;
  /** @deprecated legacy payment option */
  payInStore?: Maybe<Scalars['Boolean']>;
  payOnlineHypur?: Maybe<Scalars['Boolean']>;
  payOnlineMerrco?: Maybe<Scalars['Boolean']>;
  paytender?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  pickupHours?: Maybe<GqlDispensaries_Profile_Hours>;
  plusSettings?: Maybe<GqlDispensaries_Profile_Plus_Settings>;
  timezone?: Maybe<Scalars['String']>;
};

export type GqlOrders_FleetManagementTask = {
  __typename?: 'Orders_fleetManagementTask';
  adapter?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  timeCreated?: Maybe<Scalars['String']>;
  timeLastModified?: Maybe<Scalars['String']>;
  trackingURL?: Maybe<Scalars['String']>;
};

export type GqlOrders_GuestCustomer = {
  __typename?: 'Orders_guestCustomer';
  birthDay?: Maybe<Scalars['String']>;
  birthMonth?: Maybe<Scalars['String']>;
  birthYear?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photoId?: Maybe<Scalars['String']>;
};

export type GqlOrders_Linx = {
  __typename?: 'Orders_linx';
  license?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type GqlOrders_Location = {
  __typename?: 'Orders_location';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  lat?: Maybe<Scalars['Float']>;
  ln1?: Maybe<Scalars['String']>;
  ln2?: Maybe<Scalars['String']>;
  lng?: Maybe<Scalars['Float']>;
  state?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  streetNumber?: Maybe<Scalars['String']>;
  zipcode?: Maybe<Scalars['String']>;
};

export type GqlOrders_ManualDiscount = {
  __typename?: 'Orders_manualDiscount';
  fixedDiscountInCents?: Maybe<Scalars['Int']>;
  percentDiscount?: Maybe<Scalars['Int']>;
};

export type GqlOrders_MedicalCard = {
  __typename?: 'Orders_medicalCard';
  expirationDate?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type GqlOrders_Order = {
  __typename?: 'Orders_order';
  additionalOption?: Maybe<Scalars['String']>;
  basePrice?: Maybe<Scalars['Float']>;
  option?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  product?: Maybe<GqlOrder_Product>;
  quantity?: Maybe<Scalars['Int']>;
};

export type GqlOrders_TipValue = {
  __typename?: 'Orders_tipValue';
  dollar?: Maybe<Scalars['Float']>;
  percent?: Maybe<Scalars['Float']>;
};

export type GqlParseAchReturnFileUploadResponse = {
  __typename?: 'ParseAchReturnFileUploadResponse';
  data: Array<GqlAchReturnFileUploadResult>;
};

export type GqlPasswordUpdate = {
  __typename?: 'PasswordUpdate';
  accessToken: Scalars['String'];
};

export type GqlPayment = {
  __typename?: 'Payment';
  amount?: Maybe<Scalars['Int']>;
  checkoutToken?: Maybe<Scalars['String']>;
  createdAt?: Maybe<GqlGoogleProtobufTimestamp>;
  id?: Maybe<Scalars['String']>;
  payee?: Maybe<GqlEntity>;
  payer?: Maybe<GqlEntity>;
  paymentMethod?: Maybe<GqlDutchiePayPaymentMethod>;
  status?: Maybe<Scalars['String']>;
};

export type GqlPaymentCard = {
  __typename?: 'PaymentCard';
  brand?: Maybe<Scalars['String']>;
  lastDigits?: Maybe<Scalars['String']>;
};

export type GqlPaymentDetails = {
  __typename?: 'PaymentDetails';
  card: GqlPaymentCard;
  id: Scalars['String'];
  status: Scalars['String'];
  transactionNumber: Scalars['String'];
};

export type GqlPaymentInfoInput = {
  accountId?: Maybe<Scalars['String']>;
  token: Scalars['String'];
};

export type GqlPaymentMethod = {
  __typename?: 'PaymentMethod';
  bankAccount?: Maybe<GqlBankDetails>;
  billingAddress?: Maybe<GqlBillingAddress>;
  cardInfo?: Maybe<GqlCardInfo>;
  createdAt?: Maybe<Scalars['String']>;
  entityId?: Maybe<Scalars['String']>;
  entityType?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  paymentType: PaymentType;
  period: PaymentPeriod;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlPaymentMethodInput = {
  paymentInfo: GqlPaymentInfoInput;
  paymentType: PaymentType;
  period: PaymentPeriod;
};

export enum PaymentPeriod {
  annually = 'annually',
  monthly = 'monthly',
  quarterly = 'quarterly'
}

export enum PaymentType {
  bankAccount = 'bankAccount',
  creditCard = 'creditCard',
  manualPayments = 'manualPayments'
}

export type GqlPaymentTypesConfig = {
  __typename?: 'PaymentTypesConfig';
  aeropay?: Maybe<Scalars['Boolean']>;
  alt36?: Maybe<Scalars['Boolean']>;
  canPay?: Maybe<Scalars['Boolean']>;
  cash?: Maybe<Scalars['Boolean']>;
  check?: Maybe<Scalars['Boolean']>;
  creditCardAtDoor?: Maybe<Scalars['Boolean']>;
  creditCardByPhone?: Maybe<Scalars['Boolean']>;
  debit?: Maybe<Scalars['Boolean']>;
  dutchiePay?: Maybe<Scalars['Boolean']>;
  linx?: Maybe<Scalars['Boolean']>;
  payOnlineChase?: Maybe<Scalars['Boolean']>;
  payOnlineHypur?: Maybe<Scalars['Boolean']>;
  payOnlineMerrco?: Maybe<Scalars['Boolean']>;
  payOnlineMoneris?: Maybe<Scalars['Boolean']>;
  paytender?: Maybe<Scalars['Boolean']>;
};

export type GqlPaymentsCheckoutCredentials = GqlChaseHostedProfileCredentials | GqlMonerisHtProfileCredentials;

export type GqlPaymentsIsoDate = {
  nanos?: Maybe<Scalars['Int']>;
  seconds?: Maybe<Scalars['Int']>;
};

export type GqlPaysafeAuthorizations = {
  __typename?: 'PaysafeAuthorizations';
  amount?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export type GqlPaysafeCard = {
  __typename?: 'PaysafeCard';
  lastDigits?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlPaysafeDetails = {
  __typename?: 'PaysafeDetails';
  authorizations?: Maybe<Array<Maybe<GqlPaysafeAuthorizations>>>;
  card?: Maybe<GqlPaysafeCard>;
  refunds?: Maybe<Array<Maybe<GqlPaysafeRefunds>>>;
  settlements?: Maybe<Array<Maybe<GqlPaysafeSettlements>>>;
};

export type GqlPaysafeRefunds = {
  __typename?: 'PaysafeRefunds';
  amount?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export type GqlPaysafeSettlements = {
  __typename?: 'PaysafeSettlements';
  amount?: Maybe<Scalars['String']>;
  cancelled?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
};

export type GqlPendingDispensariesResult = {
  __typename?: 'PendingDispensariesResult';
  dispensaries?: Maybe<Array<Maybe<GqlDispensaries>>>;
  meta?: Maybe<GqlMeta>;
};

export type GqlPersistCheckoutResponse = {
  __typename?: 'PersistCheckoutResponse';
  checkoutToken: Scalars['String'];
};

export type GqlPickupMinimum = {
  __typename?: 'PickupMinimum';
  enabled?: Maybe<Scalars['Boolean']>;
  minimumInCents?: Maybe<Scalars['Int']>;
};

export type GqlPickupMinimumInput = {
  enabled?: Maybe<Scalars['Boolean']>;
  minimumInCents?: Maybe<Scalars['Int']>;
};

export type GqlPlusApiKey = {
  __typename?: 'PlusApiKey';
  createdAt: Scalars['ISODateTime'];
  fresh: Scalars['Boolean'];
  id: Scalars['ID'];
  key: Scalars['String'];
  keyType: PlusApiKeyType;
  lastRequestAt?: Maybe<Scalars['ISODateTime']>;
};

export enum PlusApiKeyType {
  public = 'PUBLIC',
  secret = 'SECRET'
}

export type GqlPolygon = {
  __typename?: 'Polygon';
  features?: Maybe<Array<Maybe<GqlGeoJson_Features>>>;
  type?: Maybe<Scalars['String']>;
};

export type GqlPolygonInput = {
  features?: Maybe<Array<Maybe<GqlGeoJson_FeaturesInput>>>;
  type?: Maybe<Scalars['String']>;
};

export type GqlPopularDispensary = {
  __typename?: 'PopularDispensary';
  actionEstimates?: Maybe<GqlActionEstimates>;
  cName?: Maybe<Scalars['String']>;
  /** @deprecated covered by DeliveryOrderingSettings in ordering-settings */
  deliveryArea?: Maybe<GqlPolygon>;
  /** @deprecated used and defined in ordering-settings */
  deliveryFee?: Maybe<Scalars['String']>;
  /** @deprecated defined within hours-settings */
  deliveryHours?: Maybe<GqlDispensaries_Profile_Hours>;
  deliveryInfo?: Maybe<GqlDispensaries_DeliveryInfo>;
  /** @deprecated used and defined in ordering-settings */
  deliveryMin?: Maybe<Scalars['String']>;
  /** @deprecated used and defined in ordering-settings */
  deliveryMode?: Maybe<DeliveryModes>;
  /** @deprecated used and defined in ordering-settings */
  deliveryZipCodes?: Maybe<Array<Maybe<GqlDispensaries_DeliveryZipCodes>>>;
  /** @deprecated used and defined in ordering-settings */
  deliveryZones?: Maybe<Array<Maybe<GqlDispensaries_DeliveryZones>>>;
  distance?: Maybe<Scalars['String']>;
  featureFlags?: Maybe<GqlDispensaries_FeatureFlags>;
  feeTiers?: Maybe<Array<Maybe<GqlDispensaries_Profile_FeeTiers>>>;
  hoursSettings?: Maybe<GqlDispensaryHoursSettings>;
  id?: Maybe<Scalars['String']>;
  listImage?: Maybe<Scalars['String']>;
  location?: Maybe<GqlDispensaries_Profile_Location>;
  /** @deprecated used and defined in ordering-settings */
  maxDeliveryDistance?: Maybe<Scalars['Int']>;
  medicalDispensary?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  /** @deprecated use OrderTypesConfigV2 */
  orderTypesConfig?: Maybe<GqlOrderTypesConfig>;
  orderTypesConfigV2?: Maybe<GqlOrderTypesConfigV2>;
  /** @deprecated defined in hours-settings */
  pickupHours?: Maybe<GqlDispensaries_Profile_Hours>;
  recDispensary?: Maybe<Scalars['Boolean']>;
  /** @deprecated defined within HoursSettingsForOrderType in ordering-settings */
  specialHours?: Maybe<Array<Maybe<GqlSpecialHours>>>;
  storeSettings?: Maybe<GqlDispensaries_StoreSettings>;
  timezone?: Maybe<Scalars['String']>;
};

/** Chemical compound for a Potency -- THC, CBD, and so forth */
export enum PotencyCompound {
  cbd = 'CBD',
  thc = 'THC'
}

/**
 * Search parameters for a Product's Potency. Allows for more complex
 * searching of products based on a Potency range
 */
export type GqlPotencyProductSearch = {
  /** Deprecated: Remove with ticket ENG-14662 */
  compound: PotencyCompound;
  max: Scalars['Float'];
  min: Scalars['Float'];
  unit: PotencyUnit;
};

export enum PotencyType {
  equalTo = 'equalTo',
  greaterThan = 'greaterThan',
  greaterThanEqualTo = 'greaterThanEqualTo',
  lessThan = 'lessThan',
  lessThanEqualTo = 'lessThanEqualTo',
  notApplicable = 'notApplicable'
}

export enum PotencyUnit {
  milligrams = 'MILLIGRAMS',
  milligramsPerGram = 'MILLIGRAMS_PER_GRAM',
  milligramsPerMl = 'MILLIGRAMS_PER_ML',
  percentage = 'PERCENTAGE'
}

export type GqlPreviewMongoProduct = {
  __typename?: 'PreviewMongoProduct';
  _id?: Maybe<Scalars['String']>;
  additionalOptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  bottleDepositTaxCents?: Maybe<Scalars['Int']>;
  brandDescription?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['String']>;
  brandLogo?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  cName?: Maybe<Scalars['String']>;
  cbdContent?: Maybe<GqlProductPotency>;
  description?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  dispensary?: Maybe<GqlDispensaries>;
  dispensaryId?: Maybe<Scalars['String']>;
  dispensaryName?: Maybe<Scalars['String']>;
  duplicatedProductId?: Maybe<Scalars['String']>;
  effects?: Maybe<Scalars['JSON']>;
  featured?: Maybe<GqlProducts_Featured>;
  forcedPotencyUnit?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  imgixSettings?: Maybe<GqlProducts_ImgixSettings>;
  integrationKey?: Maybe<Scalars['String']>;
  isBelowKioskThreshold?: Maybe<Scalars['Boolean']>;
  isBelowThreshold?: Maybe<Scalars['Boolean']>;
  limitsPerCustomer?: Maybe<Array<Maybe<GqlProducts_LimitPerCustomer>>>;
  manualInventory?: Maybe<Array<Maybe<GqlProducts_ManualInventory>>>;
  matchedLibraryItems?: Maybe<Array<Maybe<GqlProducts_MatchedLibraryItems>>>;
  matchedLibraryItemsConfidence?: Maybe<Scalars['Float']>;
  measurements?: Maybe<GqlProducts_Measurements>;
  medicalOnly?: Maybe<Scalars['Boolean']>;
  medicalPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  medicalSpecialPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  modifiedAttributes?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  nonArmsLength?: Maybe<Scalars['Boolean']>;
  options?: Maybe<Array<Maybe<Scalars['String']>>>;
  optionsBelowKioskThreshold?: Maybe<Array<Maybe<Scalars['String']>>>;
  optionsBelowThreshold?: Maybe<Array<Maybe<Scalars['String']>>>;
  originalPrices?: Maybe<Array<Maybe<Scalars['String']>>>;
  overrides?: Maybe<Array<Maybe<Scalars['String']>>>;
  pastCNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  posMetaData?: Maybe<GqlProducts_PosMetaData>;
  preCropImage?: Maybe<Scalars['String']>;
  preTaxMedPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  preTaxRecPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  pricingTierData?: Maybe<GqlProducts_PricingTierData>;
  rawMedicalPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  rawPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  recOnly?: Maybe<Scalars['Boolean']>;
  recPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  recSpecialPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  reviewedAt?: Maybe<Scalars['String']>;
  reviewedBy?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['Float']>;
  /** @deprecated No longer reliable with menuType-specific specials 07/26/20 */
  special?: Maybe<Scalars['Boolean']>;
  specialData?: Maybe<GqlProducts_SpecialData>;
  speculativeEdits?: Maybe<Array<Maybe<GqlProducts>>>;
  status?: Maybe<Scalars['String']>;
  strain?: Maybe<GqlStrain>;
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  syncedAt?: Maybe<Scalars['String']>;
  thcContent?: Maybe<GqlProductPotency>;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedByAdminAt?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['Float']>;
  wholesalePrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
};

export type GqlPreviewProduct = {
  __typename?: 'PreviewProduct';
  appliedLibraryAttributes: GqlPreviewMongoProduct;
  product: GqlPreviewMongoProduct;
  productBatch?: Maybe<GqlProductBatch>;
  productImages: Array<Maybe<GqlProducts_Images>>;
  terpenes: Array<GqlProducts_Terpene>;
};

export enum PrintAction {
  confirm = 'confirm',
  reprint = 'reprint'
}

export type GqlPrintedMenuSettings_CategoryEntry = {
  __typename?: 'PrintedMenuSettings_CategoryEntry';
  category?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
};

export type GqlPrintedMenuSettings_CategoryEntryInput = {
  category?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
};

export type GqlPrintedMenuSettings_PageBreaks = {
  __typename?: 'PrintedMenuSettings_PageBreaks';
  enabled?: Maybe<Scalars['Boolean']>;
};

export type GqlPrintedMenuSettings_PageBreaksInput = {
  enabled?: Maybe<Scalars['Boolean']>;
};

export type GqlPrintedMenuSettings_Photos = {
  __typename?: 'PrintedMenuSettings_Photos';
  enabled?: Maybe<Scalars['Boolean']>;
};

export type GqlPrintedMenuSettings_PhotosInput = {
  enabled?: Maybe<Scalars['Boolean']>;
};

export type GqlPrintedMenuSettings_StrainTypesEntry = {
  __typename?: 'PrintedMenuSettings_StrainTypesEntry';
  backgroundColor?: Maybe<Scalars['String']>;
  borderColor?: Maybe<Scalars['String']>;
  strainType?: Maybe<Scalars['String']>;
};

export type GqlPrintedMenuSettings_StrainTypesEntryInput = {
  backgroundColor?: Maybe<Scalars['String']>;
  borderColor?: Maybe<Scalars['String']>;
  strainType?: Maybe<Scalars['String']>;
};

export type GqlPrintedMenuSettings_Text = {
  __typename?: 'PrintedMenuSettings_Text';
  text?: Maybe<Scalars['String']>;
};

export type GqlPrintedMenuSettings_TextInput = {
  text?: Maybe<Scalars['String']>;
};

export type GqlPrintedMenuSettings_Type = {
  __typename?: 'PrintedMenuSettings_Type';
  type?: Maybe<Scalars['String']>;
};

export type GqlPrintedMenuSettings_TypeInput = {
  type?: Maybe<Scalars['String']>;
};

export type GqlProductBatch = {
  __typename?: 'ProductBatch';
  active: Scalars['Boolean'];
  digest?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  productId: Scalars['String'];
};

/** Resulting type from getProductBuyingOptions call */
export type GqlProductBuyingOptionsResult = {
  __typename?: 'ProductBuyingOptionsResult';
  buyingOptions: Array<GqlBuyingOption>;
  marketplaceProduct: GqlMarketplaceProduct;
  weightOptions?: Maybe<Array<Scalars['String']>>;
};

/** A Product's Category */
export enum ProductCategory {
  accessories = 'ACCESSORIES',
  allCategories = 'ALL_CATEGORIES',
  apparel = 'APPAREL',
  cbd = 'CBD',
  clones = 'CLONES',
  concentrate = 'CONCENTRATE',
  edible = 'EDIBLE',
  flower = 'FLOWER',
  hide = 'HIDE',
  nA = 'N_A',
  preRolls = 'PRE_ROLLS',
  seeds = 'SEEDS',
  tincture = 'TINCTURE',
  topicals = 'TOPICALS',
  vaporizers = 'VAPORIZERS'
}

export type GqlProductChangeRequest = {
  __typename?: 'ProductChangeRequest';
  actionType: ChangeRequestActionType;
  approvalStatus: Scalars['String'];
  approvedAt?: Maybe<Scalars['ISODateTime']>;
  authorId: Scalars['ID'];
  brand?: Maybe<GqlBrand>;
  brandId: Scalars['ID'];
  complianceRegionId?: Maybe<Scalars['ID']>;
  contentAttributes: GqlLibraryProduct;
  createdAt: Scalars['ISODateTime'];
  feedback?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  productId: Scalars['ID'];
  rejectedAt?: Maybe<Scalars['ISODateTime']>;
  rejectionReasons?: Maybe<Array<RejectionReasons>>;
  reviewerId?: Maybe<Scalars['ID']>;
  updatedAt: Scalars['ISODateTime'];
};

/** A type that indicates medical or recreational products only */
export enum ProductConsumerType {
  med = 'MED',
  rec = 'REC'
}

export type GqlProductCrmProperty = GqlCrmProperty & {
  __typename?: 'ProductCrmProperty';
  id?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlProductDiscount = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlProductEffect = {
  __typename?: 'ProductEffect';
  name: Scalars['String'];
  power: Scalars['Int'];
};

export type GqlProductFilters = {
  __typename?: 'ProductFilters';
  chainDropdownOptions?: Maybe<Array<Maybe<GqlChainDropdownOption>>>;
  dispensaryDropdownOptions: Array<Maybe<GqlDispensaryDropdownOption>>;
  statesDropdownOptions: Array<Maybe<GqlDropdownOption>>;
};

export enum ProductGroups {
  brands = 'brands',
  categories = 'categories',
  individual = 'individual'
}

export type GqlProductImpactResponse = {
  __typename?: 'ProductImpactResponse';
  count?: Maybe<Scalars['Int']>;
};

export type GqlProductPotency = {
  __typename?: 'ProductPotency';
  range?: Maybe<Array<Maybe<Scalars['Float']>>>;
  unit: Scalars['String'];
  /** @deprecated Use range */
  value?: Maybe<Scalars['String']>;
};

/** How much a product is listed for at a Dispensary */
export type GqlProductPrice = {
  __typename?: 'ProductPrice';
  amount: Scalars['Float'];
  salesAmount?: Maybe<Scalars['Float']>;
};

export type GqlProductSummary = {
  __typename?: 'ProductSummary';
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  dollarChange?: Maybe<Scalars['Float']>;
  numSold?: Maybe<Scalars['Int']>;
  percentChange?: Maybe<Scalars['Float']>;
  productId?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  sales?: Maybe<Scalars['Float']>;
  strainType?: Maybe<Scalars['String']>;
};

export type GqlProductUpdateNotificationResponse = {
  __typename?: 'ProductUpdateNotificationResponse';
  productId?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
};

export type GqlProducts = {
  __typename?: 'Products';
  AdditionalOptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** @deprecated Standardize onto CBDContent 12/19/19 */
  CBD?: Maybe<Scalars['String']>;
  CBDContent?: Maybe<GqlProductPotency>;
  Description?: Maybe<Scalars['String']>;
  DispensaryID?: Maybe<Scalars['String']>;
  Image?: Maybe<Scalars['String']>;
  Name?: Maybe<Scalars['String']>;
  Options?: Maybe<Array<Maybe<Scalars['String']>>>;
  POSMetaData?: Maybe<GqlProducts_PosMetaData>;
  Prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  Status?: Maybe<Scalars['String']>;
  /** @deprecated Standardize onto THCContent 12/19/19 */
  THC?: Maybe<Scalars['String']>;
  THCContent?: Maybe<GqlProductPotency>;
  _id?: Maybe<Scalars['String']>;
  adminEdits?: Maybe<Array<Maybe<GqlProducts_AdminEdit>>>;
  bottleDepositTaxCents?: Maybe<Scalars['Int']>;
  brand?: Maybe<GqlBrand>;
  brandDescription?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['String']>;
  brandLogo?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  cName?: Maybe<Scalars['String']>;
  cannabinoidsV2?: Maybe<Array<Maybe<GqlProducts_CannabinoidV2>>>;
  cbdContent?: Maybe<GqlProductPotency>;
  comingSoon?: Maybe<Scalars['Boolean']>;
  connectedAt?: Maybe<Scalars['String']>;
  connectedBy?: Maybe<Scalars['String']>;
  connectedByUser?: Maybe<GqlUsers>;
  connectedCount?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  dateCreated?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  dispensary?: Maybe<GqlDispensaries>;
  dispensaryId?: Maybe<Scalars['String']>;
  dispensaryName?: Maybe<Scalars['String']>;
  duplicatedProductId?: Maybe<Scalars['String']>;
  effects?: Maybe<Scalars['JSON']>;
  featured?: Maybe<GqlProducts_Featured>;
  forcedPotencyUnit?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  images?: Maybe<Array<GqlProducts_Images>>;
  imgixSettings?: Maybe<GqlProducts_ImgixSettings>;
  integrationKey?: Maybe<Scalars['String']>;
  isBelowKioskThreshold?: Maybe<Scalars['Boolean']>;
  isBelowThreshold?: Maybe<Scalars['Boolean']>;
  libraryProduct?: Maybe<GqlLibraryProduct>;
  limitsPerCustomer?: Maybe<Array<Maybe<GqlProducts_LimitPerCustomer>>>;
  manualInventory?: Maybe<Array<Maybe<GqlProducts_ManualInventory>>>;
  matchedLibraryItems?: Maybe<Array<Maybe<GqlProducts_MatchedLibraryItems>>>;
  matchedLibraryItemsConfidence?: Maybe<Scalars['Float']>;
  measurements?: Maybe<GqlProducts_Measurements>;
  medicalOnly?: Maybe<Scalars['Boolean']>;
  medicalPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  medicalSpecialPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  name?: Maybe<Scalars['String']>;
  nonArmsLength?: Maybe<Scalars['Boolean']>;
  optionsBelowKioskThreshold?: Maybe<Array<Maybe<Scalars['String']>>>;
  optionsBelowThreshold?: Maybe<Array<Maybe<Scalars['String']>>>;
  originalPrices?: Maybe<Array<Maybe<Scalars['String']>>>;
  overrides?: Maybe<Array<Maybe<Scalars['String']>>>;
  pastCNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** @deprecated Removed. Server side only field. 6/2/21 */
  popularSortKey?: Maybe<Scalars['Float']>;
  posMetaData?: Maybe<GqlProducts_PosMetaData>;
  preCropImage?: Maybe<Scalars['String']>;
  preTaxMedPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  preTaxRecPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  pricingTierData?: Maybe<GqlProducts_PricingTierData>;
  productTemplate?: Maybe<Scalars['Boolean']>;
  rawMedicalPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  rawPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  recOnly?: Maybe<Scalars['Boolean']>;
  recPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  recSpecialPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  reviewedAt?: Maybe<Scalars['String']>;
  reviewedBy?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['Float']>;
  /** @deprecated No longer reliable with menuType-specific specials 07/26/20 */
  special?: Maybe<Scalars['Boolean']>;
  specialData?: Maybe<GqlProducts_SpecialData>;
  speculativeEdits?: Maybe<Array<Maybe<GqlProducts>>>;
  stockImage?: Maybe<Scalars['String']>;
  stockImageAliases?: Maybe<Scalars['String']>;
  stockImageCategory?: Maybe<Scalars['String']>;
  strain?: Maybe<GqlStrain>;
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  syncedAt?: Maybe<Scalars['String']>;
  terpenes?: Maybe<Array<Maybe<GqlProducts_Terpene>>>;
  thcContent?: Maybe<GqlProductPotency>;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedByAdminAt?: Maybe<Scalars['String']>;
  updatedByUser?: Maybe<GqlUsers>;
  vapeTaxApplicable?: Maybe<Scalars['Boolean']>;
  weight?: Maybe<Scalars['Float']>;
  wholesalePrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
};

export type GqlProductsList = {
  __typename?: 'ProductsList';
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  products: Array<Maybe<GqlProducts>>;
  queryInfo: GqlQueryInfoType;
};

export type GqlProductsSalesByCategory = {
  __typename?: 'ProductsSalesByCategory';
  categoryOptions?: Maybe<Array<Maybe<GqlDropdownOption>>>;
  lineItems?: Maybe<Array<Maybe<GqlCategoryLineItem>>>;
  totalSales?: Maybe<Scalars['Float']>;
};

export type GqlProductsSummaryInput = {
  brand?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  chainId?: Maybe<Scalars['String']>;
  clientTimezone?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['String']>;
  increment?: Maybe<Scalars['String']>;
  prevEndDate?: Maybe<Scalars['String']>;
  prevStartDate?: Maybe<Scalars['String']>;
  search?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['String']>;
  strain?: Maybe<Scalars['String']>;
};

export type GqlProducts_CannabinoidInputV2 = {
  active?: Maybe<Scalars['Boolean']>;
  cannabinoidId?: Maybe<Scalars['ID']>;
  unit?: Maybe<PotencyUnit>;
  value?: Maybe<Scalars['Float']>;
};

export type GqlProducts_CannabinoidV2 = {
  __typename?: 'Products_CannabinoidV2';
  active?: Maybe<Scalars['Boolean']>;
  cannabinoid?: Maybe<GqlCannabinoid>;
  cannabinoidId?: Maybe<Scalars['ID']>;
  unit?: Maybe<PotencyUnit>;
  value?: Maybe<Scalars['Float']>;
};

export type GqlProducts_Images = {
  __typename?: 'Products_Images';
  _id?: Maybe<Scalars['String']>;
  active: Scalars['Boolean'];
  canonicalUrl?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  description?: Maybe<Scalars['String']>;
  digest?: Maybe<Scalars['String']>;
  etag?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  origin: ImageOrigin;
  updatedAt?: Maybe<Scalars['ISODateTime']>;
  url: Scalars['String'];
  userId?: Maybe<Scalars['String']>;
};

export type GqlProducts_ImagesInput = {
  _id?: Maybe<Scalars['String']>;
  active: Scalars['Boolean'];
  createdAt?: Maybe<Scalars['ISODateTime']>;
  description?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  origin: ImageOrigin;
  updatedAt?: Maybe<Scalars['ISODateTime']>;
  url: Scalars['String'];
  userId?: Maybe<Scalars['String']>;
};

export type GqlProducts_PosMetaData = {
  __typename?: 'Products_POSMetaData';
  canonicalBrandName?: Maybe<Scalars['String']>;
  canonicalCategory?: Maybe<Scalars['String']>;
  canonicalID?: Maybe<Scalars['String']>;
  canonicalImgUrl?: Maybe<Scalars['String']>;
  canonicalName?: Maybe<Scalars['String']>;
  canonicalSKU?: Maybe<Scalars['String']>;
  children?: Maybe<Array<Maybe<GqlProducts_PosMetaData_Children>>>;
  integrationID?: Maybe<Scalars['String']>;
};

export type GqlProducts_PosMetaData_Children = {
  __typename?: 'Products_POSMetaData_children';
  canonicalCategory?: Maybe<Scalars['String']>;
  canonicalID?: Maybe<Scalars['String']>;
  canonicalName?: Maybe<Scalars['String']>;
  canonicalSKU?: Maybe<Scalars['String']>;
  kioskQuantityAvailable?: Maybe<Scalars['Float']>;
  medPrice?: Maybe<Scalars['Float']>;
  option?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  quantityAvailable?: Maybe<Scalars['Float']>;
  recEquivalent?: Maybe<GqlProducts_PosMetaData_Children_Equivalent>;
  recPrice?: Maybe<Scalars['Float']>;
  standardEquivalent?: Maybe<GqlProducts_PosMetaData_Children_Equivalent>;
};

export type GqlProducts_PosMetaData_Children_Equivalent = {
  __typename?: 'Products_POSMetaData_children_equivalent';
  unit?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
};

export type GqlProducts_PosMetaData_Children_StandardEquivalent = {
  __typename?: 'Products_POSMetaData_children_standardEquivalent';
  unit?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
};

export type GqlProducts_Terpene = {
  __typename?: 'Products_Terpene';
  active?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  libraryTerpene?: Maybe<GqlTerpene>;
  name?: Maybe<Scalars['String']>;
  terpeneId?: Maybe<Scalars['ID']>;
  unit?: Maybe<PotencyUnit>;
  unitSymbol?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
};

export type GqlProducts_TerpeneInput = {
  active?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  terpeneId?: Maybe<Scalars['ID']>;
  unit?: Maybe<PotencyUnit>;
  value?: Maybe<Scalars['Float']>;
  values?: Maybe<Array<Maybe<Scalars['Float']>>>;
};

export type GqlProducts_AdminEdit = {
  __typename?: 'Products_adminEdit';
  updatedAt: Scalars['String'];
  updatedBy: Scalars['String'];
};

export type GqlProducts_Featured = {
  __typename?: 'Products_featured';
  current?: Maybe<Scalars['Boolean']>;
  endTime?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
};

export type GqlProducts_FeaturedInput = {
  endTime?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
};

export type GqlProducts_ImgixSettings = {
  __typename?: 'Products_imgixSettings';
  productCard?: Maybe<GqlImgixSettings>;
  productModal?: Maybe<GqlImgixSettings>;
};

export type GqlProducts_LimitPerCustomer = {
  __typename?: 'Products_limitPerCustomer';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlProducts_LimitPerCustomerInput = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlProducts_ManualInventory = {
  __typename?: 'Products_manualInventory';
  inventory?: Maybe<Scalars['Int']>;
  option?: Maybe<Scalars['String']>;
};

export type GqlProducts_ManualInventoryInput = {
  inventory?: Maybe<Scalars['Int']>;
  option?: Maybe<Scalars['String']>;
};

export type GqlProducts_MatchedLibraryItems = {
  __typename?: 'Products_matchedLibraryItems';
  _id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['Float']>;
};

export type GqlProducts_Measurement = {
  __typename?: 'Products_measurement';
  unit?: Maybe<Scalars['String']>;
  values?: Maybe<Array<Maybe<Scalars['Float']>>>;
};

export type GqlProducts_Measurements = {
  __typename?: 'Products_measurements';
  netWeight?: Maybe<GqlProducts_Measurement>;
  volume?: Maybe<GqlProducts_Measurement>;
};

export type GqlProducts_PricingTierData = {
  __typename?: 'Products_pricingTierData';
  generatedTiersId?: Maybe<Scalars['String']>;
  tiers?: Maybe<Array<Maybe<GqlProducts_PricingTierData_Tiers>>>;
  tiersId?: Maybe<Scalars['String']>;
  tiersName?: Maybe<Scalars['String']>;
};

export type GqlProducts_PricingTierData_Tiers = {
  __typename?: 'Products_pricingTierData_tiers';
  endWeight?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Int']>;
  pricePerGram?: Maybe<Scalars['Float']>;
  startWeight?: Maybe<Scalars['Float']>;
  weightUOM?: Maybe<Scalars['String']>;
};

export type GqlProducts_SpecialData = {
  __typename?: 'Products_specialData';
  bogoSpecials?: Maybe<Array<Maybe<GqlProducts_SpecialData_BogoSpecials>>>;
  /** @deprecated Need to apply more than one special 7/20/20 */
  discount?: Maybe<Scalars['Float']>;
  /** @deprecated Need to apply more than one special 7/20/20 */
  percentDiscount?: Maybe<Scalars['Boolean']>;
  saleSpecials?: Maybe<Array<Maybe<GqlProducts_SpecialData_SaleSpecials>>>;
};

export type GqlProducts_SpecialData_BogoSpecials = {
  __typename?: 'Products_specialData_bogoSpecials';
  bogoConditionLogicOperator?: Maybe<Scalars['String']>;
  bogoConditions?: Maybe<Array<Maybe<GqlProducts_SpecialData_BogoSpecials_BogoConditionItem>>>;
  bogoRewardLogicOperator?: Maybe<Scalars['String']>;
  bogoRewards?: Maybe<Array<Maybe<GqlProducts_SpecialData_BogoSpecials_BogoRewardItem>>>;
  /** @deprecated In favor of stackingBehavior 03/29/22 */
  discountBehavior?: Maybe<Scalars['String']>;
  discountBundle?: Maybe<GqlProducts_SpecialData_BogoSpecials_DiscountBundle>;
  discountPrecedence?: Maybe<Scalars['String']>;
  discountStacking?: Maybe<Scalars['Boolean']>;
  discountToCart?: Maybe<GqlDiscountToCart>;
  endStamp?: Maybe<Scalars['String']>;
  excludedProducts?: Maybe<GqlExcludedBogoProducts>;
  isRecurring?: Maybe<Scalars['Boolean']>;
  itemsForAPrice?: Maybe<GqlProducts_SpecialData_BogoSpecials_ItemsForAPrice>;
  menuType?: Maybe<Scalars['String']>;
  qualifyingOptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  recurringEndDate?: Maybe<Scalars['String']>;
  redemptionLimit?: Maybe<Scalars['Int']>;
  specialId?: Maybe<Scalars['String']>;
  specialName?: Maybe<Scalars['String']>;
  stackingBehavior?: Maybe<Scalars['String']>;
  totalQuantity?: Maybe<GqlTotalQuantity>;
  totalSpend?: Maybe<GqlTotalSpend>;
  totalWeight?: Maybe<GqlTotalWeight>;
};

export type GqlProducts_SpecialData_BogoSpecials_BogoConditionItem = {
  __typename?: 'Products_specialData_bogoSpecials_bogoConditionItem';
  _id?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  categoryName?: Maybe<Scalars['String']>;
  productGroup?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  selectedCategoriesAndSubcategories?: Maybe<Array<Maybe<Scalars['String']>>>;
  weight?: Maybe<Scalars['String']>;
  weightOperator?: Maybe<Products_SpecialData_ComparisonOperators>;
};

export type GqlProducts_SpecialData_BogoSpecials_BogoRewardItem = {
  __typename?: 'Products_specialData_bogoSpecials_bogoRewardItem';
  _id?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  categoryName?: Maybe<Scalars['String']>;
  dollarDiscount?: Maybe<Scalars['String']>;
  percentDiscount?: Maybe<Scalars['String']>;
  productGroup?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  selectedCategoriesAndSubcategories?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetPrice?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
};

export type GqlProducts_SpecialData_BogoSpecials_DiscountBundle = {
  __typename?: 'Products_specialData_bogoSpecials_discountBundle';
  _id?: Maybe<Scalars['String']>;
  applyTo?: Maybe<ApplicationScope>;
  discountType?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlProducts_SpecialData_BogoSpecials_DiscountToCart = {
  __typename?: 'Products_specialData_bogoSpecials_discountToCart';
  _id?: Maybe<Scalars['String']>;
  discountType?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlProducts_SpecialData_BogoSpecials_ItemsForAPrice = {
  __typename?: 'Products_specialData_bogoSpecials_itemsForAPrice';
  _id?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  value?: Maybe<Scalars['String']>;
};

export enum Products_SpecialData_ComparisonOperators {
  equalTo = 'equalTo',
  greaterThan = 'greaterThan',
  greaterThanEqualTo = 'greaterThanEqualTo'
}

export type GqlProducts_SpecialData_SaleSpecials = {
  __typename?: 'Products_specialData_saleSpecials';
  discount?: Maybe<Scalars['Float']>;
  discountStacking?: Maybe<Scalars['Boolean']>;
  menuType?: Maybe<Scalars['String']>;
  percentDiscount?: Maybe<Scalars['Boolean']>;
  source?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  specialId?: Maybe<Scalars['String']>;
  specialName?: Maybe<Scalars['String']>;
  specialRestrictions?: Maybe<Scalars['JSON']>;
  stackingBehavior?: Maybe<Scalars['String']>;
  stackingMode?: Maybe<Scalars['String']>;
  targetPrice?: Maybe<Scalars['Boolean']>;
};

export type GqlProgramResponse = {
  __typename?: 'ProgramResponse';
  rewardRedemption?: Maybe<GqlRewardRedemptionDetails>;
};

export type GqlPropertyTypes = {
  __typename?: 'PropertyTypes';
  contact?: Maybe<Array<Maybe<GqlContactCrmProperty>>>;
  deal?: Maybe<Array<Maybe<GqlDealCrmProperty>>>;
  product?: Maybe<Array<Maybe<GqlProductCrmProperty>>>;
};

export type GqlPublicAnalyticsData = {
  __typename?: 'PublicAnalyticsData';
  totalActiveMarkets?: Maybe<Scalars['Int']>;
  totalRetailers?: Maybe<Scalars['Int']>;
  totalTeamMembers?: Maybe<Scalars['Int']>;
};

export type GqlQuery = {
  __typename?: 'Query';
  AchReturnDetailReport?: Maybe<GqlAchReturnDetailReportResponse>;
  NsfAchReturnReport?: Maybe<GqlNsfAchReturnReportResponse>;
  activeDispensaries?: Maybe<GqlActiveDispenariesResult>;
  activeProductsCheck?: Maybe<Array<Maybe<GqlProducts>>>;
  addressResidentialCheck?: Maybe<GqlValidationResponse>;
  brandPortalProductSearch?: Maybe<GqlBrandPortalProductSearchResponse>;
  bulkLibraryProductUpdateStatus?: Maybe<GqlBulkLibraryProductStatusUpdateResponse>;
  bulkLibraryProductUploadStatus?: Maybe<GqlBulkLibraryProductUploadStatusResponse>;
  chainDispensariesByStatus?: Maybe<Array<Maybe<GqlDispensaries>>>;
  chainDispensaryIds: Array<Maybe<Scalars['String']>>;
  chainDispensaryNamesAndIds?: Maybe<Array<Maybe<GqlDispensaries>>>;
  changeRequestProduct?: Maybe<GqlProductChangeRequest>;
  checkAgeVerification: GqlAgeVerification;
  checkUserExistence?: Maybe<GqlGenericResponse>;
  contentStatistics?: Maybe<GqlContentStatistics>;
  /** @deprecated Use getCurbsideArrivals */
  curbsideArrivalsForDispensary?: Maybe<Array<Maybe<GqlCurbsideArrival>>>;
  currentDevice?: Maybe<GqlDevices>;
  dispensaryCustomers?: Maybe<GqlCustomersList>;
  dispensaryNamesAndIds?: Maybe<Array<Maybe<GqlDispensaries>>>;
  enterpriseProducts?: Maybe<GqlEnterpriseProducts>;
  enterpriseSpecials?: Maybe<Array<Maybe<GqlEnterpriseSpecial>>>;
  enterpriseSpecialsV3?: Maybe<GqlFilteredEnterpriseSpecials>;
  filteredCoupons?: Maybe<GqlCouponList>;
  /** @deprecated Use getDevices or getKioskTerminals */
  filteredDevices?: Maybe<Array<Maybe<GqlDevices>>>;
  filteredDispensaries?: Maybe<Array<Maybe<GqlDispensaries>>>;
  filteredIntegrations?: Maybe<Array<Maybe<GqlIntegrations>>>;
  filteredOrders?: Maybe<GqlOrderList>;
  filteredProducts?: Maybe<GqlProductsList>;
  filteredSpecials?: Maybe<GqlFilteredSpecials>;
  filteredStrains?: Maybe<GqlStrainList>;
  /** @deprecated Use getCustomerSubscriptions */
  filteredSubscriptions?: Maybe<Array<Maybe<GqlSubscriptionCustomers>>>;
  filteredTerpenes?: Maybe<Array<Maybe<GqlTerpene>>>;
  filteredUsers?: Maybe<Array<Maybe<GqlUsers>>>;
  findLibraryProducts?: Maybe<GqlFindLibraryProductsResponse>;
  geolocate?: Maybe<GqlIpInfo>;
  getAchPaymentDetails?: Maybe<GqlGetAchPaymentDetailsResponse>;
  /** @deprecated Use listBankAccounts query */
  getBankAccountsV2?: Maybe<GqlBankAccounts>;
  getBillingSubscriptions: Array<Maybe<GqlBillingSubscription>>;
  getBrand?: Maybe<GqlBrand>;
  getBrandMergeHistories?: Maybe<GqlBrandMergeHistoryList>;
  getBrandUser?: Maybe<GqlBrandUser>;
  getBrandUsers?: Maybe<GqlBrandUserList>;
  getBrandsV2?: Maybe<Array<Maybe<GqlBrand>>>;
  getBucket: GqlBucket;
  getBuckets: Array<Maybe<GqlBucket>>;
  getCannabinoids: Array<GqlCannabinoid>;
  getChainsV2?: Maybe<GqlChainList>;
  getChargebeeHostedPage?: Maybe<GqlChargeBeeHostedPage>;
  getCheckout?: Maybe<GqlCheckout>;
  getComplianceConfig?: Maybe<GqlComplianceConfig>;
  getComplianceConfigs: Array<GqlComplianceConfig>;
  getConsumerStreamToken?: Maybe<GqlConsumerStreamCredentials>;
  getConsumerUser?: Maybe<GqlConsumerUser>;
  getCurbsideArrivalByToken?: Maybe<GqlCurbsideArrival>;
  getCurbsideArrivals: Array<GqlCurbsideArrival>;
  getCustomerSubscriptions: Array<GqlCustomerSubscription>;
  getDeliveryInfo?: Maybe<GqlDispensaries_DeliveryInfo>;
  getDevices: Array<GqlDevices>;
  getEcommerceAbandonedCarts?: Maybe<GqlEcommerceAbandonedCartsResponse>;
  getEcommerceDataPoints?: Maybe<GqlEcommerceDataPointsResponse>;
  getEnrollmentStatus?: Maybe<GqlUserEnrollment>;
  getEnterprise?: Maybe<GqlEnterprise>;
  getEnterpriseByName?: Maybe<Array<Maybe<GqlEnterprise>>>;
  getEnterpriseSpecial?: Maybe<GqlEnterpriseSpecial>;
  getEnterpriseSpecialsHistory?: Maybe<GqlEnterpriseSpecialsHistory>;
  getExport: GqlExport;
  getFilteredBrandSummaries?: Maybe<GqlFilteredBrandSummaryResponse>;
  getFilteredProductSummaries?: Maybe<GqlFilteredProductSummaryResponse>;
  getInvoicePdf: GqlChargebeeDownload;
  getKioskTerminals: Array<GqlKioskTerminal>;
  getLibraryProduct?: Maybe<GqlLibraryProduct>;
  getMarketingCampaigns?: Maybe<GqlMarketingCampaignsResponse>;
  getMarketingCoupons?: Maybe<GqlMarketingCouponsResponse>;
  getMarketingDataPoints?: Maybe<GqlMarketingDataPointsResponse>;
  getMarketingSpecials?: Maybe<GqlMarketingSpecialsResponse>;
  /** get MarketplaceProduct information from a given id */
  getMarketplaceProduct: GqlMarketplaceProduct;
  /** Gets location based stats for a Marketplace Product */
  getMarketplaceProductLocationStats: GqlMarketplaceProductLocationStats;
  getMenuSections?: Maybe<Array<Maybe<GqlMenuSection>>>;
  getMonerisTokenizationProfile?: Maybe<GqlMonerisTokenizationProfile>;
  /** get Product information from a given Mongo id */
  getMongoProduct: GqlMongoProduct;
  getMostPurchasedProducts?: Maybe<Array<GqlMongoProduct>>;
  getOrder?: Maybe<GqlGetOrderType>;
  getOrderForDelivery?: Maybe<GqlOrders>;
  getOrders?: Maybe<GqlAdminOrderListType>;
  getPaymentsCheckoutCredentials?: Maybe<GqlPaymentsCheckoutCredentials>;
  getPlusApiKeys?: Maybe<Array<Maybe<GqlPlusApiKey>>>;
  getPlusEnterpriseApiKeys?: Maybe<Array<Maybe<GqlPlusApiKey>>>;
  getPopularDispensaries: Array<GqlPopularDispensary>;
  getProductBuyingOptions?: Maybe<GqlProductBuyingOptionsResult>;
  getProductSalesByCategory?: Maybe<GqlProductsSalesByCategory>;
  getPublicAnalyticsData?: Maybe<GqlPublicAnalyticsData>;
  getRawAchBatchFile?: Maybe<GqlGetRawAchBatchFileResponse>;
  getRecentlyViewedProducts?: Maybe<Array<GqlMongoProduct>>;
  getReservationSlotsByOrderType?: Maybe<GqlMaxReservationSlotsByOrderType>;
  getRetailer?: Maybe<GqlRetailer>;
  getRetailerByDispensaryId?: Maybe<Array<Maybe<GqlRetailer>>>;
  getRetailerEnrollmentStatus?: Maybe<GqlRetailerEnrollment>;
  getRetailerGroup?: Maybe<GqlRetailerGroup>;
  getRetailersByEnterpriseId?: Maybe<Array<Maybe<GqlRetailer>>>;
  getRewardsV2?: Maybe<GqlRewardsListV2>;
  getSpecialsHistory?: Maybe<GqlSpecialsHistory>;
  getStateLibraries: Array<GqlStateLibrary>;
  getStockImage?: Maybe<GqlStockImage>;
  getStrain?: Maybe<GqlStrain>;
  getSubscriptionsV2: Array<Maybe<GqlSubscriptionV2>>;
  getTerpene?: Maybe<GqlTerpene>;
  getTimezone?: Maybe<GqlGetTimezoneResult>;
  getTopProduct?: Maybe<GqlTopProduct>;
  getTrendingBrands?: Maybe<GqlTrendingBrandsResponse>;
  getUserQuery?: Maybe<GqlUsers>;
  hubspotCrmProperties?: Maybe<GqlCrmProperties>;
  /** @deprecated Use libraryProductChangeImpactV3 mutation */
  libraryProductChangeImpactV2?: Maybe<GqlLibraryProductChangeImpactResponse>;
  listAccountBalances?: Maybe<GqlListAccountBalancesResponse>;
  listAchBatches?: Maybe<GqlListAchBatchesResponse>;
  /** @deprecated Use listAchEntriesV4 */
  listAchEntries?: Maybe<GqlListAchEntriesResponse>;
  /** @deprecated Use listAchEntriesV4 */
  listAchEntriesV3?: Maybe<GqlListAchEntriesResponseV3>;
  listAchEntriesV4?: Maybe<GqlListAchEntriesResponseV3>;
  /** @deprecated Use listAchReturnsV5 */
  listAchReturns?: Maybe<GqlListAchReturnsResponse>;
  /** @deprecated Use listAchReturnsV5 */
  listAchReturnsV3?: Maybe<GqlListAchReturnsResponseV3>;
  /** @deprecated Use listAchReturnsV5 */
  listAchReturnsV4?: Maybe<GqlListAchReturnsResponseV4>;
  listAchReturnsV5?: Maybe<GqlListAchReturnsResponseV5>;
  listBankAccounts?: Maybe<GqlMxBankAccounts>;
  listBrands: GqlBrandList;
  listEntities?: Maybe<GqlListEntitiesResponse>;
  listEntityFraudAssessments?: Maybe<GqlGetAchPaymentFraudAssessmentsResponse>;
  listLibraryProducts?: Maybe<GqlLibraryProducts>;
  listTransactionFraudAssessments?: Maybe<GqlGetAchPaymentFraudAssessmentsResponse>;
  /** @deprecated Use moving to V2 for scope change */
  matchLibraryProducts?: Maybe<Array<Maybe<GqlLibraryProduct>>>;
  matchLibraryProductsV2?: Maybe<Array<Maybe<GqlLibraryProduct>>>;
  matchingProducts?: Maybe<Array<Maybe<GqlProducts>>>;
  meAdmin?: Maybe<GqlIdentityAdmin>;
  meConsumer?: Maybe<GqlIdentityConsumer>;
  menuFilters?: Maybe<GqlMenuFilters>;
  menuFiltersV2?: Maybe<GqlMenuFilters>;
  orderingSuspension?: Maybe<GqlOrderingSuspension>;
  pendingDispensaries?: Maybe<GqlPendingDispensariesResult>;
  productFilters?: Maybe<GqlProductFilters>;
  retailerAgents?: Maybe<Array<Maybe<GqlRetailerAgent>>>;
  salesOrdersQuery?: Maybe<GqlSalesOrdersQueryResponse>;
  searchBrandsV2?: Maybe<GqlBrandList>;
  searchBucketProducts?: Maybe<GqlSearchBucketProductsResponse>;
  searchDispensaries?: Maybe<GqlSearchDispensariesResult>;
  searchLibraryProducts?: Maybe<GqlLibraryProducts>;
  searchProductChangeRequests?: Maybe<GqlContentChangeRequests>;
  /** Gets valid filters for Products in the search radius */
  searchProductFilters: Array<GqlSearchProductCategoryFilter>;
  /** Search Products in the marketplace based on a series of filters */
  searchProducts: GqlSearchProductsResult;
  secureImageUrlV2?: Maybe<GqlIdUrl>;
  statesWithDispensaries: Array<GqlState>;
  superAdminCustomers?: Maybe<GqlCustomersList>;
  superProducts?: Maybe<GqlMenuCleanup>;
  unsubscribeCustomerQuery?: Maybe<GqlCustomerUnsubscribe>;
  /** @deprecated use the more secure checkUserExistence */
  userExistsCheck?: Maybe<GqlExists>;
  validateCouponQuery?: Maybe<GqlCouponValidationResponse>;
  validatePasswordResetTokenQuery?: Maybe<GqlValidationResponse>;
  validatePasswordTokenQuery?: Maybe<GqlValidationResponse>;
  verifyMxMember?: Maybe<GqlMxMemberVerification>;
  yearInReviewQuery?: Maybe<GqlYearInReviewResponse>;
};


export type GqlQueryAchReturnDetailReportArgs = {
  endDate?: Maybe<GqlPaymentsIsoDate>;
  startDate?: Maybe<GqlPaymentsIsoDate>;
};


export type GqlQueryNsfAchReturnReportArgs = {
  endDate?: Maybe<GqlPaymentsIsoDate>;
  startDate?: Maybe<GqlPaymentsIsoDate>;
};


export type GqlQueryActiveDispensariesArgs = {
  params?: Maybe<GqlActiveDispensariesInput>;
};


export type GqlQueryActiveProductsCheckArgs = {
  filter?: Maybe<GqlActiveProductsCheckInput>;
  includeEnterpriseSpecials?: Maybe<Scalars['Boolean']>;
};


export type GqlQueryAddressResidentialCheckArgs = {
  input?: Maybe<GqlAddressResidentialCheckInput>;
};


export type GqlQueryBrandPortalProductSearchArgs = {
  filters?: Maybe<GqlBrandPortalProductSearchFilters>;
  pagination?: Maybe<GqlPaginationInput>;
  search?: Maybe<Scalars['String']>;
  sort?: Maybe<GqlBrandPortalProductSearchSort>;
};


export type GqlQueryBulkLibraryProductUpdateStatusArgs = {
  jobId: Scalars['String'];
};


export type GqlQueryBulkLibraryProductUploadStatusArgs = {
  jobId: Scalars['ID'];
};


export type GqlQueryChainDispensariesByStatusArgs = {
  chainId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};


export type GqlQueryChainDispensaryIdsArgs = {
  chainId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};


export type GqlQueryChainDispensaryNamesAndIdsArgs = {
  chainId?: Maybe<Scalars['String']>;
};


export type GqlQueryChangeRequestProductArgs = {
  id: Scalars['String'];
};


export type GqlQueryCheckAgeVerificationArgs = {
  dispensaryId: Scalars['String'];
};


export type GqlQueryCheckUserExistenceArgs = {
  email: Scalars['String'];
};


export type GqlQueryCurbsideArrivalsForDispensaryArgs = {
  dispensaryId: Scalars['String'];
};


export type GqlQueryDispensaryCustomersArgs = {
  filter?: Maybe<GqlCustomersFilterInput>;
  pagination?: Maybe<GqlCustomersPaginationInput>;
  sort?: Maybe<GqlCustomersSortInput>;
};


export type GqlQueryEnterpriseProductsArgs = {
  enterpriseId: Scalars['ID'];
};


export type GqlQueryEnterpriseSpecialsArgs = {
  enterpriseId: Scalars['ID'];
};


export type GqlQueryEnterpriseSpecialsV3Args = {
  enterpriseId: Scalars['ID'];
  filter?: Maybe<GqlFilteredSpecialsInputV2>;
};


export type GqlQueryFilteredCouponsArgs = {
  filter?: Maybe<GqlCouponsFilterInput>;
  pagination?: Maybe<GqlCouponsPaginationInput>;
  sort?: Maybe<GqlCouponsSortInput>;
};


export type GqlQueryFilteredDevicesArgs = {
  filter?: Maybe<GqlDevicesFilterInput>;
};


export type GqlQueryFilteredDispensariesArgs = {
  filter?: Maybe<GqlDispensariesFilterInput>;
};


export type GqlQueryFilteredIntegrationsArgs = {
  dispensaryId?: Maybe<Scalars['String']>;
};


export type GqlQueryFilteredOrdersArgs = {
  filter?: Maybe<GqlOrdersFilterInput>;
  pagination?: Maybe<GqlOrdersPaginationInput>;
  sort?: Maybe<GqlOrdersSortInput>;
};


export type GqlQueryFilteredProductsArgs = {
  filter?: Maybe<GqlProductsFilterInput>;
  includeEnterpriseSpecials?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  showAllSpecialProducts?: Maybe<Scalars['Boolean']>;
  useCache?: Maybe<Scalars['Boolean']>;
};


export type GqlQueryFilteredSpecialsArgs = {
  filter?: Maybe<GqlFilteredSpecialsInput>;
  includeEnterpriseSpecials?: Maybe<Scalars['Boolean']>;
};


export type GqlQueryFilteredStrainsArgs = {
  filter?: Maybe<GqlStrainsFilterInput>;
  pagination?: Maybe<GqlPaginationInput>;
  sort?: Maybe<GqlStrainsSortInput>;
};


export type GqlQueryFilteredSubscriptionsArgs = {
  filter?: Maybe<GqlSubscriptionsFilterInput>;
};


export type GqlQueryFilteredTerpenesArgs = {
  filter?: Maybe<GqlTerpenesFilter>;
  sort?: Maybe<GqlTerpenesSort>;
};


export type GqlQueryFilteredUsersArgs = {
  filter?: Maybe<GqlUsersFilterInput>;
};


export type GqlQueryFindLibraryProductsArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetAchPaymentDetailsArgs = {
  paymentId: Scalars['String'];
};


export type GqlQueryGetBankAccountsV2Args = {
  entityId: Scalars['String'];
  entityType: EntityTypes;
  paymentMethodIds?: Maybe<Array<Scalars['String']>>;
};


export type GqlQueryGetBillingSubscriptionsArgs = {
  dispensaries?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type GqlQueryGetBrandArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetBrandMergeHistoriesArgs = {
  filters?: Maybe<GqlBrandMergeHistoriesFilters>;
  page?: Maybe<GqlBrandMergeHistoriesPagination>;
  sort?: Maybe<GqlBrandMergeHistoriesSort>;
};


export type GqlQueryGetBrandUserArgs = {
  id: Scalars['ID'];
};


export type GqlQueryGetBrandUsersArgs = {
  pagination?: Maybe<GqlPaginationInput>;
  sort?: Maybe<GqlBrandUsersSortInput>;
};


export type GqlQueryGetBrandsV2Args = {
  ids: Array<Maybe<Scalars['String']>>;
};


export type GqlQueryGetBucketArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetBucketsArgs = {
  sort?: Maybe<GqlBrandsSortInput>;
};


export type GqlQueryGetChainsV2Args = {
  filter?: Maybe<GqlChainFilterInput>;
  pagination?: Maybe<GqlChainPaginationInput>;
  sort?: Maybe<GqlChainSortInput>;
};


export type GqlQueryGetChargebeeHostedPageArgs = {
  chargebeeCustomerId: Scalars['String'];
  pageType: Scalars['String'];
};


export type GqlQueryGetCheckoutArgs = {
  checkoutId: Scalars['String'];
  dispensaryId: Scalars['String'];
};


export type GqlQueryGetComplianceConfigArgs = {
  code: Scalars['String'];
};


export type GqlQueryGetConsumerStreamTokenArgs = {
  orderId?: Maybe<Scalars['String']>;
};


export type GqlQueryGetConsumerUserArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetCurbsideArrivalByTokenArgs = {
  token: Scalars['String'];
};


export type GqlQueryGetCurbsideArrivalsArgs = {
  dispensaryId: Scalars['String'];
};


export type GqlQueryGetDeliveryInfoArgs = {
  input?: Maybe<GqlGetDeliveryInfoInput>;
};


export type GqlQueryGetDevicesArgs = {
  dispensaryId: Scalars['String'];
};


export type GqlQueryGetEcommerceAbandonedCartsArgs = {
  input: GqlAnalyticsInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlQueryGetEcommerceDataPointsArgs = {
  input: GqlAnalyticsInput;
};


export type GqlQueryGetEnrollmentStatusArgs = {
  entityId: Scalars['String'];
  entityType: EntityTypes;
};


export type GqlQueryGetEnterpriseArgs = {
  id: Scalars['ID'];
};


export type GqlQueryGetEnterpriseByNameArgs = {
  uniqueName: Scalars['ID'];
};


export type GqlQueryGetEnterpriseSpecialArgs = {
  enterpriseSpecialId: Scalars['ID'];
};


export type GqlQueryGetEnterpriseSpecialsHistoryArgs = {
  enterpriseId: Scalars['ID'];
  enterpriseSpecialId: Scalars['ID'];
};


export type GqlQueryGetExportArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetFilteredBrandSummariesArgs = {
  input: GqlBrandsSummaryInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlQueryGetFilteredProductSummariesArgs = {
  input: GqlProductsSummaryInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlQueryGetInvoicePdfArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetKioskTerminalsArgs = {
  dispensaryId: Scalars['String'];
};


export type GqlQueryGetLibraryProductArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetMarketingCampaignsArgs = {
  input: GqlAnalyticsInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlQueryGetMarketingCouponsArgs = {
  input: GqlAnalyticsInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlQueryGetMarketingDataPointsArgs = {
  input: GqlAnalyticsInput;
};


export type GqlQueryGetMarketingSpecialsArgs = {
  input: GqlAnalyticsInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlQueryGetMarketplaceProductArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetMarketplaceProductLocationStatsArgs = {
  bounds: GqlGeographicSearchBounds;
  marketplaceProductId: Scalars['ID'];
};


export type GqlQueryGetMenuSectionsArgs = {
  dispensaryId: Scalars['String'];
};


export type GqlQueryGetMonerisTokenizationProfileArgs = {
  dispensaryId: Scalars['String'];
};


export type GqlQueryGetMongoProductArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetMostPurchasedProductsArgs = {
  dispensaryId: Scalars['String'];
};


export type GqlQueryGetOrderArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetOrderForDeliveryArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetOrdersArgs = {
  input: GqlGetOrdersInput;
};


export type GqlQueryGetPaymentsCheckoutCredentialsArgs = {
  adapter: Scalars['String'];
  dispensaryId: Scalars['String'];
};


export type GqlQueryGetPlusApiKeysArgs = {
  dispensaryId: Scalars['String'];
};


export type GqlQueryGetPlusEnterpriseApiKeysArgs = {
  enterpriseId: Scalars['String'];
};


export type GqlQueryGetPopularDispensariesArgs = {
  lat: Scalars['String'];
  lon: Scalars['String'];
};


export type GqlQueryGetProductBuyingOptionsArgs = {
  bounds: GqlGeographicSearchBounds;
  marketplaceProductId: Scalars['String'];
  sortBy?: Maybe<Scalars['String']>;
  sortDirection?: Maybe<StringSortDirections>;
  weights?: Maybe<Array<Scalars['String']>>;
};


export type GqlQueryGetProductSalesByCategoryArgs = {
  input: GqlSharedSalesInput;
};


export type GqlQueryGetRawAchBatchFileArgs = {
  achBatchId: Scalars['String'];
};


export type GqlQueryGetRecentlyViewedProductsArgs = {
  dispensaryId: Scalars['String'];
  userId: Scalars['String'];
};


export type GqlQueryGetReservationSlotsByOrderTypeArgs = {
  dispensaryId: Scalars['ID'];
};


export type GqlQueryGetRetailerArgs = {
  id: Scalars['ID'];
};


export type GqlQueryGetRetailerByDispensaryIdArgs = {
  dispensaryIds: Array<Scalars['ID']>;
};


export type GqlQueryGetRetailerEnrollmentStatusArgs = {
  entityId: Scalars['String'];
  entityType: EntityTypes;
};


export type GqlQueryGetRetailerGroupArgs = {
  id: Scalars['ID'];
};


export type GqlQueryGetRetailersByEnterpriseIdArgs = {
  enterpriseIds: Array<Scalars['ID']>;
};


export type GqlQueryGetRewardsV2Args = {
  dispensaryId: Scalars['String'];
  dob?: Maybe<Scalars['String']>;
  phoneNumber: Scalars['String'];
  pin?: Maybe<Scalars['String']>;
};


export type GqlQueryGetSpecialsHistoryArgs = {
  specialId: Scalars['ID'];
};


export type GqlQueryGetStockImageArgs = {
  category?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
};


export type GqlQueryGetStrainArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetSubscriptionsV2Args = {
  retailers: Array<Maybe<GqlRetailerInput>>;
};


export type GqlQueryGetTerpeneArgs = {
  id: Scalars['String'];
};


export type GqlQueryGetTimezoneArgs = {
  lat?: Maybe<Scalars['Float']>;
  lng?: Maybe<Scalars['Float']>;
  timeStamp?: Maybe<Scalars['Int']>;
};


export type GqlQueryGetTopProductArgs = {
  input: GqlSharedSalesInput;
};


export type GqlQueryGetTrendingBrandsArgs = {
  input: GqlBrandsSummaryInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
};


export type GqlQueryGetUserQueryArgs = {
  id: Scalars['String'];
};


export type GqlQueryHubspotCrmPropertiesArgs = {
  integrationId?: Maybe<Scalars['String']>;
};


export type GqlQueryLibraryProductChangeImpactV2Args = {
  id: Scalars['String'];
  updates: GqlUpdatedLibraryProduct;
};


export type GqlQueryListAccountBalancesArgs = {
  userId: Scalars['String'];
};


export type GqlQueryListAchBatchesArgs = {
  effectiveEndDate?: Maybe<GqlPaymentsIsoDate>;
  effectiveStartDate?: Maybe<GqlPaymentsIsoDate>;
  fileName?: Maybe<Scalars['String']>;
  generatedEndDate?: Maybe<GqlPaymentsIsoDate>;
  generatedStartDate?: Maybe<GqlPaymentsIsoDate>;
  processedEndDate?: Maybe<GqlPaymentsIsoDate>;
  processedStartDate?: Maybe<GqlPaymentsIsoDate>;
  status?: Maybe<Scalars['String']>;
  submittedEndDate?: Maybe<GqlPaymentsIsoDate>;
  submittedStartDate?: Maybe<GqlPaymentsIsoDate>;
};


export type GqlQueryListAchEntriesArgs = {
  effectiveEndDate?: Maybe<GqlPaymentsIsoDate>;
  effectiveStartDate?: Maybe<GqlPaymentsIsoDate>;
  failedEndDate?: Maybe<GqlPaymentsIsoDate>;
  failedStartDate?: Maybe<GqlPaymentsIsoDate>;
  fileName?: Maybe<Scalars['String']>;
  sequenceNumber?: Maybe<Scalars['Int']>;
  submittedEndDate?: Maybe<GqlPaymentsIsoDate>;
  submittedStartDate?: Maybe<GqlPaymentsIsoDate>;
  traceNumber?: Maybe<Scalars['String']>;
};


export type GqlQueryListAchEntriesV3Args = {
  effectiveEndDate?: Maybe<GqlPaymentsIsoDate>;
  effectiveStartDate?: Maybe<GqlPaymentsIsoDate>;
  failedEndDate?: Maybe<GqlPaymentsIsoDate>;
  failedStartDate?: Maybe<GqlPaymentsIsoDate>;
  fileName?: Maybe<Scalars['String']>;
  retailerName?: Maybe<Scalars['String']>;
  sequenceNumber?: Maybe<Scalars['Int']>;
  submittedEndDate?: Maybe<GqlPaymentsIsoDate>;
  submittedStartDate?: Maybe<GqlPaymentsIsoDate>;
  traceNumber?: Maybe<Scalars['Int']>;
};


export type GqlQueryListAchEntriesV4Args = {
  achBatchId?: Maybe<Scalars['String']>;
  effectiveEndDate?: Maybe<GqlPaymentsIsoDate>;
  effectiveStartDate?: Maybe<GqlPaymentsIsoDate>;
  failedEndDate?: Maybe<GqlPaymentsIsoDate>;
  failedStartDate?: Maybe<GqlPaymentsIsoDate>;
  fileName?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  retailerName?: Maybe<Scalars['String']>;
  sequenceNumber?: Maybe<Scalars['Int']>;
  submittedEndDate?: Maybe<GqlPaymentsIsoDate>;
  submittedStartDate?: Maybe<GqlPaymentsIsoDate>;
  traceNumber?: Maybe<Scalars['String']>;
};


export type GqlQueryListAchReturnsArgs = {
  achEntryId?: Maybe<Scalars['String']>;
  originalTraceNumber?: Maybe<Scalars['String']>;
  responded?: Maybe<Scalars['Boolean']>;
  returnCode?: Maybe<Scalars['String']>;
  returnTraceNumber?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  sourceType?: Maybe<Scalars['String']>;
};


export type GqlQueryListAchReturnsV3Args = {
  achEntryId?: Maybe<Scalars['String']>;
  originalTraceNumber?: Maybe<Scalars['Int']>;
  responded?: Maybe<Scalars['Boolean']>;
  returnCode?: Maybe<Scalars['String']>;
  returnTraceNumber?: Maybe<Scalars['Int']>;
  sourceId?: Maybe<Scalars['String']>;
  sourceType?: Maybe<Scalars['String']>;
};


export type GqlQueryListAchReturnsV4Args = {
  achEntryId?: Maybe<Scalars['String']>;
  originalTraceNumber?: Maybe<Scalars['String']>;
  responded?: Maybe<Scalars['Boolean']>;
  returnCode?: Maybe<Scalars['String']>;
  returnTraceNumber?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  sourceType?: Maybe<Scalars['String']>;
};


export type GqlQueryListAchReturnsV5Args = {
  achEntryId?: Maybe<Scalars['String']>;
  originalTraceNumber?: Maybe<Scalars['String']>;
  responded?: Maybe<Scalars['Boolean']>;
  returnCode?: Maybe<Scalars['String']>;
  returnTraceNumber?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  sourceType?: Maybe<Scalars['String']>;
};


export type GqlQueryListBankAccountsArgs = {
  aggregator: Scalars['String'];
};


export type GqlQueryListBrandsArgs = {
  filters?: Maybe<GqlListBrandsFilters>;
  pagination?: Maybe<GqlPaginationInput>;
  sort?: Maybe<GqlListBrandsSort>;
};


export type GqlQueryListEntitiesArgs = {
  externalType?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};


export type GqlQueryListEntityFraudAssessmentsArgs = {
  externalId: Scalars['String'];
  externalType: Scalars['String'];
};


export type GqlQueryListLibraryProductsArgs = {
  filters?: Maybe<GqlListLibraryProductsFilters>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  pagination?: Maybe<GqlPaginationInput>;
  sort?: Maybe<GqlListLibraryProductsSort>;
};


export type GqlQueryListTransactionFraudAssessmentsArgs = {
  transactionId: Scalars['String'];
  transactionType: Scalars['String'];
};


export type GqlQueryMatchLibraryProductsArgs = {
  brand?: Maybe<Scalars['String']>;
  brandIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  productTemplate?: Maybe<Scalars['Boolean']>;
  state: Scalars['String'];
  subcategory?: Maybe<Scalars['String']>;
};


export type GqlQueryMatchLibraryProductsV2Args = {
  brand?: Maybe<Scalars['String']>;
  brandIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  scopes?: Maybe<Array<Maybe<Scalars['String']>>>;
  state: Scalars['String'];
  subcategory?: Maybe<Scalars['String']>;
};


export type GqlQueryMatchingProductsArgs = {
  bypassOnlineThresholds?: Maybe<Scalars['Boolean']>;
  dispensaryIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  productLibraryState?: Maybe<Scalars['String']>;
};


export type GqlQueryMenuFiltersArgs = {
  category?: Maybe<Scalars['String']>;
  dispensaryId: Scalars['String'];
  pricingType?: Maybe<Scalars['String']>;
  search?: Maybe<Scalars['String']>;
};


export type GqlQueryMenuFiltersV2Args = {
  category?: Maybe<Scalars['String']>;
  checkMinSpendOffers?: Maybe<Scalars['Boolean']>;
  dispensaryId: Scalars['String'];
  hasProductsOnSpecial?: Maybe<Scalars['Boolean']>;
  includeEnterpriseSpecials?: Maybe<Scalars['Boolean']>;
  inventoryFilters?: Maybe<GqlInventoryFiltersInput>;
  isKioskMenu?: Maybe<Scalars['Boolean']>;
  isOnSpecial?: Maybe<Scalars['Boolean']>;
  pricingType?: Maybe<MenuPricingTypes>;
  search?: Maybe<Scalars['String']>;
  showAllSpecialProducts?: Maybe<Scalars['Boolean']>;
  specialId?: Maybe<Scalars['String']>;
  specialType?: Maybe<Scalars['String']>;
};


export type GqlQueryOrderingSuspensionArgs = {
  active?: Maybe<Scalars['Boolean']>;
  dispensaryId: Scalars['String'];
};


export type GqlQueryPendingDispensariesArgs = {
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  searchStr?: Maybe<Scalars['String']>;
  sort?: Maybe<GqlSortInput>;
};


export type GqlQueryRetailerAgentsArgs = {
  filter?: Maybe<GqlRetailerAgentFilterInput>;
};


export type GqlQuerySalesOrdersQueryArgs = {
  input: GqlSharedSalesInput;
};


export type GqlQuerySearchBrandsV2Args = {
  filters?: Maybe<GqlSearchBrandsFilters>;
  pagination?: Maybe<GqlPaginationInput>;
  search?: Maybe<Scalars['String']>;
  sort?: Maybe<GqlSearchBrandsSort>;
};


export type GqlQuerySearchBucketProductsArgs = {
  filter?: Maybe<GqlSearchBucketProductFilter>;
  pagination?: Maybe<GqlPaginationInput>;
  sort?: Maybe<GqlSearchBucketProductSort>;
};


export type GqlQuerySearchDispensariesArgs = {
  bounds: GqlGeographicSearchBounds;
  consumerTypes?: Maybe<Array<ProductConsumerType>>;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
};


export type GqlQuerySearchLibraryProductsArgs = {
  filters?: Maybe<GqlSearchLibraryProductsFilters>;
  pagination?: Maybe<GqlPaginationInput>;
  search?: Maybe<Scalars['String']>;
  sort?: Maybe<GqlSearchLibraryProductsSort>;
};


export type GqlQuerySearchProductChangeRequestsArgs = {
  filters?: Maybe<GqlContentChangeRequestFilters>;
  pagination?: Maybe<GqlPaginationInput>;
  sort?: Maybe<GqlContentChangeRequestSort>;
};


export type GqlQuerySearchProductFiltersArgs = {
  bounds: GqlGeographicSearchBounds;
};


export type GqlQuerySearchProductsArgs = {
  filters: GqlSearchProductsInput;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  searchText?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Scalars['String']>;
  sortDirection?: Maybe<StringSortDirections>;
};


export type GqlQuerySecureImageUrlV2Args = {
  id: Scalars['String'];
};


export type GqlQuerySuperAdminCustomersArgs = {
  filter?: Maybe<GqlSuperAdminCustomersFilter>;
  pagination?: Maybe<GqlCustomersPaginationInput>;
  sort?: Maybe<GqlCustomersSortInput>;
};


export type GqlQuerySuperProductsArgs = {
  filter?: Maybe<GqlSuperProductsInput>;
};


export type GqlQueryUnsubscribeCustomerQueryArgs = {
  customerId: Scalars['String'];
};


export type GqlQueryUserExistsCheckArgs = {
  input?: Maybe<GqlUserIdExistsInput>;
};


export type GqlQueryValidateCouponQueryArgs = {
  code: Scalars['String'];
  dispensaryId: Scalars['String'];
  isReapplying?: Maybe<Scalars['Boolean']>;
  orderSubtotalInCents: Scalars['Int'];
  productIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  products?: Maybe<Array<Maybe<GqlCouponValidationProductInput>>>;
};


export type GqlQueryValidatePasswordResetTokenQueryArgs = {
  token?: Maybe<Scalars['String']>;
};


export type GqlQueryValidatePasswordTokenQueryArgs = {
  token?: Maybe<Scalars['String']>;
};


export type GqlQueryVerifyMxMemberArgs = {
  entityId: Scalars['String'];
  entityType: EntityTypes;
  isMobileApp?: Maybe<Scalars['Boolean']>;
  memberGuid: Scalars['String'];
};


export type GqlQueryYearInReviewQueryArgs = {
  dispensaryId?: Maybe<Scalars['String']>;
};

export enum RangeBehaviors {
  betweenXAndY = 'BETWEEN_X_AND_Y',
  everyX = 'EVERY_X',
  fromXToY = 'FROM_X_TO_Y'
}

export type GqlRecordUserAcceptanceResponse = {
  __typename?: 'RecordUserAcceptanceResponse';
  success?: Maybe<Scalars['Boolean']>;
};

export type GqlRedemptionInput = {
  dispensaryId: Scalars['String'];
  phoneNumber: Scalars['String'];
  program: Scalars['String'];
  rewardId: Scalars['String'];
  rewardType: Scalars['String'];
};

export enum RejectionReasons {
  compliance = 'compliance',
  incompleteInfo = 'incomplete_info',
  photoGuidelines = 'photo_guidelines'
}

export type GqlReservationConfig = {
  __typename?: 'ReservationConfig';
  /** @deprecated replaced by reservationsAvailableByOrderType */
  delivery?: Maybe<GqlReservationOptionsForOrderType>;
  /** @deprecated replaced by orderTypesConfigV2 */
  enabled?: Maybe<Scalars['Boolean']>;
  /** @deprecated replaced by reservationsAvailableByOrderType */
  pickup?: Maybe<GqlReservationOptionsForOrderType>;
};

export type GqlReservationConfigInput = {
  delivery?: Maybe<GqlReservationOptionsForOrderTypeInput>;
  enabled?: Maybe<Scalars['Boolean']>;
  pickup?: Maybe<GqlReservationOptionsForOrderTypeInput>;
};

export type GqlReservationOptionsForOrderType = {
  __typename?: 'ReservationOptionsForOrderType';
  advancedDayOrderingEnabled?: Maybe<Scalars['Boolean']>;
  advancedDayOrderingLimit?: Maybe<Scalars['Int']>;
  incrementInMinutes?: Maybe<Scalars['Int']>;
  maxReservationSlotsByDate?: Maybe<Array<Maybe<GqlMaxReservationSlot>>>;
  maxReservationSlotsByDay?: Maybe<GqlMaxReservationSlotsByDay>;
  nextAvailableInMinutes?: Maybe<Scalars['Int']>;
  orderLimitsEnabled?: Maybe<Scalars['Boolean']>;
};

export type GqlReservationOptionsForOrderTypeInput = {
  advancedDayOrderingEnabled?: Maybe<Scalars['Boolean']>;
  advancedDayOrderingLimit?: Maybe<Scalars['Int']>;
  incrementInMinutes: Scalars['Int'];
  maxReservationSlotsByDate?: Maybe<Array<Maybe<GqlMaxReservationSlotInput>>>;
  maxReservationSlotsByDay?: Maybe<GqlMaxReservationSlotsByDayInput>;
  nextAvailableInMinutes: Scalars['Int'];
  orderLimitsEnabled?: Maybe<Scalars['Boolean']>;
};

export enum ReservationSlotTypes {
  all = 'all',
  curbsidePickup = 'curbsidePickup',
  delivery = 'delivery',
  driveThruPickup = 'driveThruPickup',
  inStorePickup = 'inStorePickup'
}

export type GqlReservationSlotsForOrderType = {
  dayOfWeek?: Maybe<Scalars['String']>;
  isDisabled?: Maybe<Scalars['Boolean']>;
  label?: Maybe<Scalars['String']>;
  labelPrefix?: Maybe<Scalars['String']>;
  reservation?: Maybe<GqlReservationsAvailableForOrderType>;
  startTimeISO?: Maybe<Scalars['ISODateTime']>;
  value?: Maybe<Scalars['Int']>;
};

export type GqlReservationSlotsInfoForOrderTypeInput = {
  enableASAPOrdering?: Maybe<Scalars['Boolean']>;
  enableScheduledOrdering?: Maybe<Scalars['Boolean']>;
  hours?: Maybe<GqlWeeklyHoursInput>;
  scheduledOrderingConfig?: Maybe<GqlReservationOptionsForOrderTypeInput>;
  specialHours?: Maybe<Array<Maybe<GqlSpecialHoursSettingsInput>>>;
};

export type GqlReservationSlotsUpdateInput = {
  curbsidePickup?: Maybe<GqlReservationSlotsInfoForOrderTypeInput>;
  delivery?: Maybe<GqlReservationSlotsInfoForOrderTypeInput>;
  dispensaryId: Scalars['String'];
  driveThruPickup?: Maybe<GqlReservationSlotsInfoForOrderTypeInput>;
  inStorePickup?: Maybe<GqlReservationSlotsInfoForOrderTypeInput>;
  orderType?: Maybe<ReservationSlotTypes>;
  timezone: Scalars['String'];
};

export type GqlReservationsAvailable = {
  __typename?: 'ReservationsAvailable';
  endTimeISO?: Maybe<Scalars['ISODateTime']>;
  quantityRemaining?: Maybe<Scalars['Int']>;
  slotId?: Maybe<Scalars['String']>;
  startTimeISO?: Maybe<Scalars['ISODateTime']>;
};

export type GqlReservationsAvailableByOrderType = {
  __typename?: 'ReservationsAvailableByOrderType';
  curbsidePickup?: Maybe<Array<Maybe<GqlReservationsAvailable>>>;
  delivery?: Maybe<Array<Maybe<GqlReservationsAvailable>>>;
  driveThruPickup?: Maybe<Array<Maybe<GqlReservationsAvailable>>>;
  inStorePickup?: Maybe<Array<Maybe<GqlReservationsAvailable>>>;
  /** @deprecated replaced by inStorePickup via rollout.use-updated-ordering-configurations */
  pickup?: Maybe<Array<Maybe<GqlReservationsAvailable>>>;
};

export type GqlReservationsAvailableForOrderType = {
  endTimeISO?: Maybe<Scalars['ISODateTime']>;
  quantityRemaining?: Maybe<Scalars['Int']>;
  slotId?: Maybe<Scalars['String']>;
  startTimeISO?: Maybe<Scalars['ISODateTime']>;
};

export type GqlRespondToAchReturnResponse = {
  __typename?: 'RespondToAchReturnResponse';
  achReturnResponse: GqlAchReturnResponse;
};

export enum RestMethods {
  del = 'del',
  get = 'get',
  patch = 'patch',
  post = 'post',
  put = 'put'
}

export type GqlRestriction = {
  discountType?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  weightOperator?: Maybe<Scalars['String']>;
};

export enum RestrictionType {
  all = 'ALL',
  brand = 'BRAND',
  category = 'CATEGORY',
  product = 'PRODUCT',
  strain = 'STRAIN',
  subcategory = 'SUBCATEGORY',
  vendor = 'VENDOR',
  weight = 'WEIGHT'
}

export type GqlRetailer = {
  __typename?: 'Retailer';
  accountTier?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  assignedToBillingGroup?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  dispensaryId: Scalars['ID'];
  enterprise?: Maybe<GqlEnterprise>;
  enterpriseId?: Maybe<Scalars['ID']>;
  id: Scalars['ID'];
  medLicense?: Maybe<Scalars['Boolean']>;
  name: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  profile: GqlRetailerProfile;
  recLicense?: Maybe<Scalars['Boolean']>;
  retailerGroups: Array<GqlRetailerGroup>;
  status: RetailerStatus;
  updatedAt?: Maybe<Scalars['ISODateTime']>;
};

export type GqlRetailerAgent = {
  __typename?: 'RetailerAgent';
  dispensaryId: Scalars['String'];
  id: Scalars['String'];
  position: Scalars['String'];
  retailerId: Scalars['String'];
  userId: Scalars['String'];
  userName: Scalars['String'];
};

export enum RetailerAgentPositions {
  accountExecutive = 'AccountExecutive',
  accountManager = 'AccountManager',
  customerSuccessManager = 'CustomerSuccessManager'
}

export type GqlRetailerEnrollment = {
  __typename?: 'RetailerEnrollment';
  enrollment?: Maybe<GqlStatus>;
};

export type GqlRetailerGroup = {
  __typename?: 'RetailerGroup';
  createdAt: Scalars['ISODateTime'];
  enterpriseId: Scalars['ID'];
  groupType: RetailerGroupType;
  id: Scalars['ID'];
  name: Scalars['String'];
  notificationEmails: Array<Maybe<Scalars['String']>>;
  payment: GqlPaymentMethod;
  retailers: Array<GqlRetailer>;
  updatedAt: Scalars['ISODateTime'];
};

export enum RetailerGroupStatus {
  archived = 'archived',
  closed = 'closed',
  open = 'open',
  pending = 'pending'
}

export enum RetailerGroupType {
  billing = 'billing'
}

export type GqlRetailerInput = {
  assignedToBillingGroup?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
};

export type GqlRetailerProfile = {
  __typename?: 'RetailerProfile';
  location?: Maybe<GqlRetailerProfileLocation>;
  medicalDispensary?: Maybe<Scalars['Boolean']>;
  recDispensary?: Maybe<Scalars['Boolean']>;
};

export type GqlRetailerProfileLocation = {
  __typename?: 'RetailerProfileLocation';
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export enum RetailerStatus {
  archived = 'archived',
  closed = 'closed',
  open = 'open',
  pending = 'pending'
}

export type GqlReversePaymentResponse = {
  __typename?: 'ReversePaymentResponse';
  achReversal: GqlAchReversal;
};

export type GqlReverseSettlementResponse = {
  __typename?: 'ReverseSettlementResponse';
  achReversal: GqlAchReversal;
};

export type GqlReward = {
  __typename?: 'Reward';
  available?: Maybe<Scalars['Boolean']>;
  brand?: Maybe<Scalars['String']>;
  copy?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  operator?: Maybe<Scalars['String']>;
  redemptionAttempts?: Maybe<Array<Maybe<GqlRewardRedemptionResponse>>>;
  rewardType?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlRewardInput = {
  available?: Maybe<Scalars['Boolean']>;
  brand?: Maybe<Scalars['String']>;
  copy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  operator?: Maybe<Scalars['String']>;
  rewardType?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export enum RewardRedeemBy {
  dutchie = 'Dutchie',
  pos = 'POS'
}

export type GqlRewardRedemptionDetails = {
  __typename?: 'RewardRedemptionDetails';
  createdAt?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

export type GqlRewardRedemptionResponse = {
  __typename?: 'RewardRedemptionResponse';
  programResponse?: Maybe<GqlProgramResponse>;
  redeemBy?: Maybe<RewardRedeemBy>;
  status?: Maybe<RewardStatus>;
  success?: Maybe<Scalars['Boolean']>;
};

export enum RewardStatus {
  pending = 'pending',
  redeemed = 'redeemed'
}

export enum RewardType {
  discounttocart = 'DISCOUNTTOCART',
  discounttototal = 'DISCOUNTTOTOTAL',
  item = 'ITEM'
}

export type GqlRewardUserResponse = {
  __typename?: 'RewardUserResponse';
  success?: Maybe<Scalars['Boolean']>;
  wallet?: Maybe<GqlRewardsListV2>;
};

export type GqlRewardV2 = {
  __typename?: 'RewardV2';
  available: Scalars['Boolean'];
  brand: Scalars['String'];
  copy?: Maybe<Scalars['String']>;
  cost: Scalars['Int'];
  id: Scalars['ID'];
  operator: Scalars['String'];
  redemptionAttempts?: Maybe<Array<Maybe<GqlRewardRedemptionResponse>>>;
  rewardType: Scalars['String'];
  value: Scalars['String'];
};

export type GqlRewardsList = {
  __typename?: 'RewardsList';
  auth?: Maybe<GqlUserAuthInfo>;
  balance?: Maybe<Scalars['String']>;
  rewardBrand?: Maybe<Scalars['String']>;
  rewards: Array<Maybe<GqlReward>>;
  userHasWallet?: Maybe<Scalars['Boolean']>;
};

export type GqlRewardsListV2 = {
  __typename?: 'RewardsListV2';
  auth?: Maybe<GqlUserAuthInfo>;
  balance: Scalars['String'];
  rewardBrand: Scalars['String'];
  rewards: Array<Maybe<GqlRewardV2>>;
  userHasWallet: Scalars['Boolean'];
};

export type GqlRewards_Integration_Configuration = {
  __typename?: 'Rewards_integration_configuration';
  rewardsProgramDisplayName?: Maybe<Scalars['String']>;
};

export type GqlRewards_Integration_ConfigurationInput = {
  rewardsProgramDisplayName?: Maybe<Scalars['String']>;
};

export type GqlScheduledOrderingConfigInput = {
  advancedDayOrderingEnabled?: Maybe<Scalars['Boolean']>;
};

export type GqlScheduledOrderingConfigV2 = {
  __typename?: 'ScheduledOrderingConfigV2';
  advancedDayOrderingEnabled?: Maybe<Scalars['Boolean']>;
  advancedDayOrderingLimit?: Maybe<Scalars['Int']>;
  incrementInMinutes?: Maybe<Scalars['Int']>;
  nextAvailableInMinutes?: Maybe<Scalars['Int']>;
  orderLimitsEnabled?: Maybe<Scalars['Boolean']>;
};

export type GqlSearchBucketProductFilter = {
  reviewedBy?: Maybe<Scalars['ID']>;
  verified?: Maybe<Scalars['String']>;
};

export type GqlSearchBucketProductSort = {
  sortBy: SearchBucketProductSortByEnum;
  sortDirection: StringSortDirections;
};

export enum SearchBucketProductSortByEnum {
  reviewedAt = 'reviewedAt'
}

export type GqlSearchBucketProductsResponse = {
  __typename?: 'SearchBucketProductsResponse';
  bucketProducts?: Maybe<Array<Maybe<GqlBucketProduct>>>;
  meta?: Maybe<GqlMeta>;
};

export type GqlSearchDispensariesResult = {
  __typename?: 'SearchDispensariesResult';
  dispensaries: Array<GqlPopularDispensary>;
  meta: GqlSearchProductsMetaResult;
};

export type GqlSearchProductCategoryFilter = {
  __typename?: 'SearchProductCategoryFilter';
  brands?: Maybe<Array<GqlSearchProductFilterBrand>>;
  category: ProductCategory;
  consumerTypes?: Maybe<Array<ProductConsumerType>>;
  src: Scalars['String'];
  strainTypes?: Maybe<Array<Scalars['String']>>;
  subcategories?: Maybe<Array<Scalars['String']>>;
  weights?: Maybe<Array<Scalars['String']>>;
};

export type GqlSearchProductFilterBrand = {
  __typename?: 'SearchProductFilterBrand';
  id: Scalars['ID'];
  name: Scalars['String'];
};

/** Input object for the searchProducts query */
export type GqlSearchProductsInput = {
  bounds: GqlGeographicSearchBounds;
  brandIds?: Maybe<Array<Scalars['String']>>;
  cannabisTypes?: Maybe<Array<CannabisType>>;
  categories: Array<ProductCategory>;
  cbdPotency?: Maybe<GqlPotencyProductSearch>;
  consumerType?: Maybe<ProductConsumerType>;
  effects?: Maybe<Array<Effect>>;
  /** Deprecated: Remove with ticket ENG-14662. This field does nothing. Use cbdPotency and thcPotency instead. */
  potency?: Maybe<GqlPotencyProductSearch>;
  subcategories?: Maybe<Array<Scalars['String']>>;
  thcPotency?: Maybe<GqlPotencyProductSearch>;
  weights?: Maybe<Array<Scalars['String']>>;
};

export type GqlSearchProductsMetaResult = {
  __typename?: 'SearchProductsMetaResult';
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

/** Output from the searchProducts query */
export type GqlSearchProductsResult = {
  __typename?: 'SearchProductsResult';
  /** List of products found */
  marketplaceProducts?: Maybe<Array<GqlMarketplaceProductSearchResult>>;
  meta?: Maybe<GqlSearchProductsMetaResult>;
};

export type GqlSerializableContentChangeRequest = {
  __typename?: 'SerializableContentChangeRequest';
  actionType: ChangeRequestActionType;
  approvalStatus: Scalars['String'];
  approvedAt?: Maybe<Scalars['ISODateTime']>;
  authorId: Scalars['ID'];
  brand?: Maybe<GqlBrand>;
  brandId: Scalars['ID'];
  complianceRegionId?: Maybe<Scalars['ID']>;
  computedAttributes?: Maybe<GqlContentChangeRequestComputedAttributes>;
  contentAttributes?: Maybe<GqlContentChangeRequestAttributes>;
  createdAt: Scalars['ISODateTime'];
  createdBy?: Maybe<GqlUsers>;
  dispensary?: Maybe<GqlDispensaries>;
  feedback?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  product?: Maybe<GqlLibraryProduct>;
  productId?: Maybe<Scalars['ID']>;
  rejectedAt?: Maybe<Scalars['ISODateTime']>;
  reviewerId?: Maybe<Scalars['ID']>;
  updatedAt: Scalars['ISODateTime'];
};

export type GqlServiceFeeInput = {
  currency: Scalars['String'];
  flatFeeCents?: Maybe<Scalars['Int']>;
  percentageFee?: Maybe<Scalars['Float']>;
};

export enum Services {
  acceptancesService = 'AcceptancesService',
  accountBalancesService = 'AccountBalancesService',
  achBatchesService = 'AchBatchesService',
  achEntriesService = 'AchEntriesService',
  achReturnReportsService = 'AchReturnReportsService',
  achReturnsService = 'AchReturnsService',
  achReversalsService = 'AchReversalsService',
  bankAccountsService = 'BankAccountsService',
  billingAddressesService = 'BillingAddressesService',
  enrollmentsService = 'EnrollmentsService',
  entitiesService = 'EntitiesService',
  fraudAssessmentsService = 'FraudAssessmentsService',
  messageProxyService = 'MessageProxyService',
  paymentsService = 'PaymentsService',
  preAuthsService = 'PreAuthsService',
  registrationService = 'RegistrationService',
  retailerEnrollmentsService = 'RetailerEnrollmentsService',
  widgetUrlService = 'WidgetUrlService'
}

export type GqlSharedSalesInput = {
  chainId?: Maybe<Scalars['String']>;
  clientTimezone?: Maybe<Scalars['String']>;
  customerType?: Maybe<CustomerType>;
  dispensaryId?: Maybe<Scalars['String']>;
  endDate: Scalars['String'];
  orderType?: Maybe<OrderType>;
  prevEndDate?: Maybe<Scalars['String']>;
  prevStartDate?: Maybe<Scalars['String']>;
  startDate: Scalars['String'];
};

export enum SkipReasonEnum {
  combinedWeights = 'COMBINED_WEIGHTS',
  conflictingData = 'CONFLICTING_DATA',
  insufficientData = 'INSUFFICIENT_DATA',
  libraryGap = 'LIBRARY_GAP',
  libraryGapWithTemplate = 'LIBRARY_GAP_WITH_TEMPLATE',
  other = 'OTHER'
}

export type GqlSortOrderInput = {
  dispensaryId?: Maybe<Scalars['String']>;
  order?: Maybe<Array<Maybe<GqlSpecialSortOrder>>>;
};

export type GqlSortProductProxy = {
  DispensaryID: Scalars['String'];
  _id: Scalars['String'];
  weight: Scalars['Int'];
};

export enum SpecialApplicationMethodTypes {
  automatic = 'AUTOMATIC',
  byAlpineiq = 'BY_ALPINEIQ',
  byCode = 'BY_CODE',
  byFyllo = 'BY_FYLLO',
  bySpringbig = 'BY_SPRINGBIG',
  manual = 'MANUAL'
}

export type GqlSpecialEmail = {
  __typename?: 'SpecialEmail';
  description?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  heading?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
};

export type GqlSpecialEmailInput = {
  description?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  heading?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
};

export type GqlSpecialHours = {
  __typename?: 'SpecialHours';
  endDate: Scalars['String'];
  hoursPerDay?: Maybe<Array<Maybe<GqlSpecialHoursDay>>>;
  id: Scalars['ID'];
  name: Scalars['String'];
  startDate: Scalars['String'];
};

export type GqlSpecialHoursDay = {
  __typename?: 'SpecialHoursDay';
  date: Scalars['String'];
  /** @deprecated new SpecialHoursDay in hours-settings is order type agnostic */
  deliveryHours: GqlDayBounds;
  hours: GqlDayBounds;
  /** @deprecated new SpecialHoursDay in hours-settings is order type agnostic */
  pickupHours: GqlDayBounds;
};

export type GqlSpecialHoursSettingsDayInput = {
  date: Scalars['String'];
  hours: GqlDayBoundsInput;
};

export type GqlSpecialHoursSettingsInput = {
  endDate: Scalars['String'];
  hoursPerDay?: Maybe<Array<Maybe<GqlSpecialHoursSettingsDayInput>>>;
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  startDate: Scalars['String'];
};

export type GqlSpecialMenuDisplay = {
  __typename?: 'SpecialMenuDisplay';
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type GqlSpecialMenuDisplayInput = {
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export enum SpecialMenuType {
  both = 'BOTH',
  medical = 'MEDICAL',
  recreational = 'RECREATIONAL'
}

export type GqlSpecialRestriction = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<GqlRestriction>;
};

export type GqlSpecialRestrictions = {
  __typename?: 'SpecialRestrictions';
  key: Scalars['String'];
  weight?: Maybe<Scalars['String']>;
  weightOperator?: Maybe<Scalars['String']>;
  weights?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlSpecialRestrictionsInput = {
  key: Scalars['String'];
  weight?: Maybe<Scalars['String']>;
  weightOperator?: Maybe<Scalars['String']>;
};

export type GqlSpecialSchedule = {
  __typename?: 'SpecialSchedule';
  days?: Maybe<Array<Maybe<Scalars['Int']>>>;
  endDate?: Maybe<Scalars['ISODateTime']>;
  endStamp?: Maybe<Scalars['ISODateTime']>;
  endTime?: Maybe<Scalars['String']>;
  startStamp?: Maybe<Scalars['ISODateTime']>;
  startTime?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

export type GqlSpecialScheduleInput = {
  days?: Maybe<Array<Maybe<Scalars['Int']>>>;
  endDate?: Maybe<Scalars['ISODateTime']>;
  endStamp?: Maybe<Scalars['ISODateTime']>;
  endTime?: Maybe<Scalars['String']>;
  startStamp?: Maybe<Scalars['ISODateTime']>;
  startTime?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
};

export enum SpecialScopes {
  enterprise = 'enterprise',
  retailer = 'retailer'
}

export enum SpecialSortKey {
  email = 'EMAIL',
  endStamp = 'END_STAMP',
  name = 'NAME',
  specialType = 'SPECIAL_TYPE',
  startStamp = 'START_STAMP'
}

export type GqlSpecialSortOrder = {
  _id?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['Int']>;
};

export enum SpecialSource {
  dutchie = 'DUTCHIE',
  pos = 'POS'
}

export enum SpecialStatus {
  active = 'ACTIVE',
  archived = 'ARCHIVED'
}

export type GqlSpecialSummary = {
  __typename?: 'SpecialSummary';
  averageOrderValue?: Maybe<Scalars['Float']>;
  averageOrderValueChangePercentage?: Maybe<Scalars['Float']>;
  clickThroughPercentage?: Maybe<Scalars['Float']>;
  conversionChangePercentage?: Maybe<Scalars['Float']>;
  conversionPercentage?: Maybe<Scalars['Float']>;
  dispensaryId?: Maybe<Scalars['String']>;
  emailSent?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  specialId?: Maybe<Scalars['String']>;
  totalSales?: Maybe<Scalars['Float']>;
  type?: Maybe<Scalars['String']>;
};

export enum SpecialTemporalStatus {
  past = 'PAST',
  presentOrFuture = 'PRESENT_OR_FUTURE'
}

export enum SpecialType {
  coupon = 'COUPON',
  offer = 'OFFER',
  sale = 'SALE'
}

export enum SpecialTypes {
  bogo = 'bogo',
  sale = 'sale'
}

export type GqlSpecials = {
  __typename?: 'Specials';
  _id?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  applicableToItemsOnSpecial?: Maybe<Scalars['Boolean']>;
  applicationMethod?: Maybe<SpecialApplicationMethodTypes>;
  applyToNoGroups?: Maybe<Scalars['Boolean']>;
  bogoConditionLogicOperator?: Maybe<Scalars['String']>;
  bogoConditions?: Maybe<Array<Maybe<GqlBogoConditionItem>>>;
  bogoRewardLogicOperator?: Maybe<Scalars['String']>;
  bogoRewards?: Maybe<Array<Maybe<GqlBogoRewardItem>>>;
  clicks?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  complete?: Maybe<Scalars['Boolean']>;
  conditionLogicOperator?: Maybe<LogicOperator>;
  conditions?: Maybe<Array<Maybe<GqlV4Condition>>>;
  consumerGroupIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  consumerTypeIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  createdBy?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  discount?: Maybe<Scalars['String']>;
  discountBundle?: Maybe<GqlDiscountBundle>;
  discountPrecedence?: Maybe<Scalars['String']>;
  discountStacking?: Maybe<Scalars['Boolean']>;
  discountToCart?: Maybe<GqlDiscountToCart>;
  discountedPrices?: Maybe<Scalars['JSON']>;
  dispensaryId?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['Int']>;
  dollarDiscount?: Maybe<Scalars['Boolean']>;
  duplicatedFrom?: Maybe<Scalars['String']>;
  email?: Maybe<GqlSpecialEmail>;
  emailSpecial?: Maybe<Scalars['Boolean']>;
  endDay?: Maybe<Scalars['String']>;
  endStamp?: Maybe<Scalars['String']>;
  endTime?: Maybe<Scalars['String']>;
  endedAt?: Maybe<Scalars['String']>;
  endedBy?: Maybe<Scalars['String']>;
  excludedProducts?: Maybe<Array<Maybe<GqlSpecialsExcludedProducts>>>;
  firstTimeConsumerOnly?: Maybe<Scalars['Boolean']>;
  generatedByPOS?: Maybe<Scalars['Boolean']>;
  globalApplicationRules?: Maybe<Array<Maybe<GqlApplicationRule>>>;
  globalConditionThresholds?: Maybe<Array<Maybe<GqlGlobalThreshold>>>;
  globalReward?: Maybe<GqlGlobalReward>;
  globalRewardThresholds?: Maybe<Array<Maybe<GqlGlobalThreshold>>>;
  heading?: Maybe<Scalars['String']>;
  inactiveDispensaryIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  isAvailableOnline?: Maybe<Scalars['Boolean']>;
  isRecurring?: Maybe<Scalars['Boolean']>;
  itemsForAPrice?: Maybe<GqlItemsForAPrice>;
  loyaltyPointsToRedeem?: Maybe<Scalars['Int']>;
  manualDefaultApplyTo?: Maybe<ManualDefaultApplyTo>;
  menuDisplay?: Maybe<GqlSpecialMenuDisplay>;
  menuDisplayDescription?: Maybe<Scalars['String']>;
  menuDisplayImage?: Maybe<Scalars['String']>;
  menuDisplayName?: Maybe<Scalars['String']>;
  menuType?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  orderType?: Maybe<OrderType>;
  origin?: Maybe<Scalars['String']>;
  originId?: Maybe<Scalars['String']>;
  percentDiscount?: Maybe<Scalars['Boolean']>;
  productDiscounts?: Maybe<Scalars['JSON']>;
  productGroup?: Maybe<Scalars['String']>;
  productGroupRewards?: Maybe<Scalars['String']>;
  products?: Maybe<Array<Maybe<Scalars['String']>>>;
  quantityUsed?: Maybe<Scalars['Int']>;
  recurring?: Maybe<GqlSpecialsRecurring>;
  redemptionLimit?: Maybe<Scalars['Int']>;
  redemptionLimitPerCart?: Maybe<Scalars['Int']>;
  redemptionLimitPerUser?: Maybe<Scalars['Int']>;
  reimbursed?: Maybe<Scalars['Boolean']>;
  requireManagerApproval?: Maybe<Scalars['Boolean']>;
  rewardLogicOperator?: Maybe<LogicOperator>;
  rewards?: Maybe<Array<Maybe<GqlV4Reward>>>;
  schedule?: Maybe<GqlSpecialSchedule>;
  scope?: Maybe<SpecialScopes>;
  source?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  /** @deprecated Use _id instead 5/21/2021 */
  specialId?: Maybe<Scalars['String']>;
  specialRestrictions?: Maybe<Scalars['JSON']>;
  specialType?: Maybe<SpecialTypes>;
  specialVersion?: Maybe<Scalars['Int']>;
  stackingBehavior?: Maybe<Scalars['String']>;
  stackingMode?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['String']>;
  startDay?: Maybe<Scalars['String']>;
  startStamp?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  status?: Maybe<SpecialStatus>;
  subject?: Maybe<Scalars['String']>;
  targetPrice?: Maybe<Scalars['Boolean']>;
  totalAllowedUses?: Maybe<Scalars['Int']>;
  totalQuantity?: Maybe<GqlTotalQuantity>;
  totalSpend?: Maybe<GqlTotalSpend>;
  totalWeight?: Maybe<GqlTotalWeight>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  usedBy?: Maybe<Array<Maybe<Scalars['String']>>>;
  version?: Maybe<Scalars['Int']>;
};

export type GqlSpecialsExcludedBogo = {
  __typename?: 'SpecialsExcludedBOGO';
  Name?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

export type GqlSpecialsExcludedBogoInput = {
  Name?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
};

export type GqlSpecialsExcludedProducts = {
  __typename?: 'SpecialsExcludedProducts';
  Name?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['String']>;
  conditions?: Maybe<Array<Maybe<GqlSpecialsExcludedBogo>>>;
  key?: Maybe<Scalars['String']>;
  rewards?: Maybe<Array<Maybe<GqlSpecialsExcludedBogo>>>;
};

export type GqlSpecialsExcludedProductsInput = {
  Name?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['String']>;
  conditions?: Maybe<Array<Maybe<GqlSpecialsExcludedBogoInput>>>;
  key?: Maybe<Scalars['String']>;
  rewards?: Maybe<Array<Maybe<GqlSpecialsExcludedBogoInput>>>;
};

export type GqlSpecialsHistory = {
  __typename?: 'SpecialsHistory';
  id?: Maybe<Scalars['String']>;
  versions?: Maybe<Array<Maybe<GqlSpecials>>>;
};

export type GqlSpecialsInputV3 = {
  _id?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  applicableToItemsOnSpecial?: Maybe<Scalars['Boolean']>;
  applicationMethod?: Maybe<SpecialApplicationMethodTypes>;
  applyToNoGroups?: Maybe<Scalars['Boolean']>;
  bogoConditionLogicOperator?: Maybe<Scalars['String']>;
  bogoConditions?: Maybe<Array<Maybe<GqlBogoConditionItemInput>>>;
  bogoRewardLogicOperator?: Maybe<Scalars['String']>;
  bogoRewards?: Maybe<Array<Maybe<GqlBogoRewardItemInput>>>;
  code?: Maybe<Scalars['String']>;
  conditionLogicOperator?: Maybe<LogicOperator>;
  conditions?: Maybe<Array<Maybe<GqlV4ConditionInput>>>;
  consumerGroupIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  createdBy?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  discount?: Maybe<Scalars['String']>;
  discountBundle?: Maybe<GqlDiscountBundleInput>;
  discountPrecedence?: Maybe<Scalars['String']>;
  discountStacking?: Maybe<Scalars['Boolean']>;
  discountToCart?: Maybe<GqlDiscountToCartInput>;
  discountedPrices?: Maybe<Scalars['JSON']>;
  dispensaryId?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['Int']>;
  dollarDiscount?: Maybe<Scalars['Boolean']>;
  duplicatedFrom?: Maybe<Scalars['String']>;
  editedStartStamp?: Maybe<Scalars['String']>;
  email?: Maybe<GqlSpecialEmailInput>;
  emailSpecial?: Maybe<Scalars['Boolean']>;
  endDay?: Maybe<Scalars['String']>;
  endStamp?: Maybe<Scalars['String']>;
  endTime?: Maybe<Scalars['String']>;
  endedAt?: Maybe<Scalars['String']>;
  endedBy?: Maybe<Scalars['String']>;
  enterpriseId?: Maybe<Scalars['String']>;
  excludedProducts?: Maybe<Array<Maybe<GqlSpecialsExcludedProductsInput>>>;
  firstTimeConsumerOnly?: Maybe<Scalars['Boolean']>;
  generatedByPOS?: Maybe<Scalars['Boolean']>;
  globalApplicationRules?: Maybe<Array<Maybe<GqlApplicationRuleInput>>>;
  globalConditionThresholds?: Maybe<Array<Maybe<GqlGlobalThresholdInput>>>;
  globalReward?: Maybe<GqlGlobalRewardInput>;
  globalRewardThresholds?: Maybe<Array<Maybe<GqlGlobalThresholdInput>>>;
  heading?: Maybe<Scalars['String']>;
  inactiveDispensaryIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  isAvailableOnline?: Maybe<Scalars['Boolean']>;
  isRecurring?: Maybe<Scalars['Boolean']>;
  itemsForAPrice?: Maybe<GqlItemsForAPriceInput>;
  loyaltyPointsToRedeem?: Maybe<Scalars['Int']>;
  manualDefaultApplyTo?: Maybe<ManualDefaultApplyTo>;
  menuDisplay?: Maybe<GqlSpecialMenuDisplayInput>;
  menuDisplayDescription?: Maybe<Scalars['String']>;
  menuDisplayImage?: Maybe<Scalars['String']>;
  menuDisplayName?: Maybe<Scalars['String']>;
  menuType?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  orderType?: Maybe<OrderType>;
  origin?: Maybe<Scalars['String']>;
  originId?: Maybe<Scalars['String']>;
  percentDiscount?: Maybe<Scalars['Boolean']>;
  productDiscounts?: Maybe<Array<Maybe<GqlProductDiscount>>>;
  productGroup?: Maybe<Scalars['String']>;
  productGroupRewards?: Maybe<Scalars['String']>;
  products?: Maybe<Array<Maybe<Scalars['String']>>>;
  quantityUsed?: Maybe<Scalars['Int']>;
  recurring?: Maybe<GqlSpecialsInputRecurring>;
  redemptionLimit?: Maybe<Scalars['Int']>;
  redemptionLimitPerCart?: Maybe<Scalars['Int']>;
  redemptionLimitPerUser?: Maybe<Scalars['Int']>;
  requireManagerApproval?: Maybe<Scalars['Boolean']>;
  rewardLogicOperator?: Maybe<LogicOperator>;
  rewards?: Maybe<Array<Maybe<GqlV4RewardInput>>>;
  schedule?: Maybe<GqlSpecialScheduleInput>;
  scope?: Maybe<SpecialScopes>;
  source?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  specialId?: Maybe<Scalars['String']>;
  specialRestrictions?: Maybe<Array<Maybe<GqlSpecialRestriction>>>;
  specialType?: Maybe<Scalars['String']>;
  specialVersion?: Maybe<Scalars['Int']>;
  stackingBehavior?: Maybe<Scalars['String']>;
  stackingMode?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['String']>;
  startDay?: Maybe<Scalars['String']>;
  startStamp?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  targetPrice?: Maybe<Scalars['Boolean']>;
  totalAllowedUses?: Maybe<Scalars['Int']>;
  totalQuantity?: Maybe<GqlTotalQuantityInput>;
  totalSpend?: Maybe<GqlTotalSpendInput>;
  totalWeight?: Maybe<GqlTotalWeightInput>;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['Int']>;
};

export type GqlSpecialsRecurring = {
  __typename?: 'SpecialsRecurring';
  days?: Maybe<Array<Maybe<Scalars['Int']>>>;
  endDate?: Maybe<Scalars['String']>;
  endTime?: Maybe<Scalars['String']>;
  setEndDate?: Maybe<Scalars['Boolean']>;
  startTime?: Maybe<Scalars['String']>;
};

export type GqlSpecialsSettings = {
  __typename?: 'SpecialsSettings';
  discountBehavior?: Maybe<Scalars['String']>;
  discountPrecedence?: Maybe<Scalars['String']>;
  discountStacking?: Maybe<Scalars['Boolean']>;
  enableIndividualDiscountStacking?: Maybe<Scalars['Boolean']>;
  enableIndividualSpecialPrecedence?: Maybe<Scalars['Boolean']>;
  nonStackingBehavior?: Maybe<Scalars['String']>;
  stackingBehavior?: Maybe<Scalars['String']>;
};

export type GqlSpecialsSettingsInput = {
  discountBehavior?: Maybe<Scalars['String']>;
  discountPrecedence?: Maybe<Scalars['String']>;
  discountStacking?: Maybe<Scalars['Boolean']>;
  enableIndividualDiscountStacking?: Maybe<Scalars['Boolean']>;
  enableIndividualSpecialPrecedence?: Maybe<Scalars['Boolean']>;
  nonStackingBehavior?: Maybe<Scalars['String']>;
  stackingBehavior?: Maybe<Scalars['String']>;
};

export enum StackingBehavior {
  compounding = 'COMPOUNDING',
  cumulative = 'CUMULATIVE',
  prohibited = 'PROHIBITED'
}

export type GqlState = {
  __typename?: 'State';
  cities: Array<Maybe<Scalars['String']>>;
  country?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type GqlStateLibrary = {
  __typename?: 'StateLibrary';
  id: Scalars['String'];
  name: Scalars['String'];
  state: Scalars['String'];
};

export type GqlStatus = {
  __typename?: 'Status';
  mx?: Maybe<GqlMxResponse>;
  status: StatusTypes;
};

export enum StatusTypes {
  statusAcceptTerms = 'STATUS_ACCEPT_TERMS',
  statusAccountDisconnected = 'STATUS_ACCOUNT_DISCONNECTED',
  statusAccountPending = 'STATUS_ACCOUNT_PENDING',
  statusAggregatorError = 'STATUS_AGGREGATOR_ERROR',
  statusEnrolled = 'STATUS_ENROLLED',
  statusNoAccount = 'STATUS_NO_ACCOUNT',
  statusUnenrolled = 'STATUS_UNENROLLED',
  statusUnspecified = 'STATUS_UNSPECIFIED'
}

export type GqlStockImage = {
  __typename?: 'StockImage';
  aliasOrder?: Maybe<Scalars['Int']>;
  aliasRegex?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  isDefault: Scalars['Boolean'];
  url: Scalars['String'];
};

export type GqlStrain = {
  __typename?: 'Strain';
  /** @deprecated Use id */
  _id?: Maybe<Scalars['String']>;
  aromas?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  description?: Maybe<Scalars['String']>;
  effects?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  imageUrl?: Maybe<Scalars['String']>;
  labels?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  potentialHealthBenefits?: Maybe<Array<Maybe<Scalars['String']>>>;
  ratio?: Maybe<Scalars['String']>;
  terpenes?: Maybe<Array<Maybe<GqlTerpene>>>;
  updatedAt?: Maybe<Scalars['ISODateTime']>;
};

export type GqlStrainLabels = {
  __typename?: 'StrainLabels';
  labels?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlStrainList = {
  __typename?: 'StrainList';
  queryInfo?: Maybe<GqlQueryInfoType>;
  strains?: Maybe<Array<Maybe<GqlStrain>>>;
};

export enum StrainSortByEnum {
  description = 'description',
  effects = 'effects',
  imageUrl = 'imageUrl',
  name = 'name',
  potentialHealthBenefits = 'potentialHealthBenefits'
}

export enum StringSortDirections {
  asc = 'asc',
  desc = 'desc'
}

export type GqlSubscriptionCustomers = {
  __typename?: 'SubscriptionCustomers';
  _id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  dateAdded?: Maybe<Scalars['String']>;
  dispensary?: Maybe<GqlDispensaries>;
  dispensaryId?: Maybe<Scalars['String']>;
  dispensaryName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  emailSubscription?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  numOrders?: Maybe<Scalars['Float']>;
  orderTotal?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  textSubscription?: Maybe<Scalars['Boolean']>;
  userId?: Maybe<Scalars['String']>;
};

export type GqlSubscriptionV2 = {
  __typename?: 'SubscriptionV2';
  assignedToBillingGroup?: Maybe<Scalars['Boolean']>;
  chargebeePlan?: Maybe<GqlChargebeePlan>;
  chargebeeSubscription?: Maybe<GqlChargebeeSubscriptionV2>;
  dispensaryBilling?: Maybe<GqlDispensaryBillingV2>;
  id: Scalars['ID'];
  manualPayments?: Maybe<Scalars['Boolean']>;
  retailerId: Scalars['ID'];
};

export enum TaxType {
  bottleDeposit = 'bottleDeposit',
  cannabis = 'cannabis',
  sales = 'sales'
}

export type GqlTemporalLocation = {
  __typename?: 'TemporalLocation';
  coordinates?: Maybe<Scalars['JSONObject']>;
  lastUpdatedAt?: Maybe<Scalars['ISODateTime']>;
  onDuty?: Maybe<Scalars['Boolean']>;
};

export type GqlTerminalReceiptOptions = {
  __typename?: 'TerminalReceiptOptions';
  birthdate?: Maybe<Scalars['Boolean']>;
  customerNameOption?: Maybe<Scalars['String']>;
  deliveryAddress?: Maybe<Scalars['Boolean']>;
  disableSocialImpact?: Maybe<Scalars['Boolean']>;
  medical?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['Boolean']>;
  potencyInfo?: Maybe<Scalars['Boolean']>;
};

export type GqlTerpene = {
  __typename?: 'Terpene';
  aliasList?: Maybe<Array<Maybe<Scalars['String']>>>;
  aromas?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  description?: Maybe<Scalars['String']>;
  effects?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  potentialHealthBenefits?: Maybe<Array<Maybe<Scalars['String']>>>;
  strainIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  strains: Array<Maybe<GqlStrain>>;
  unitSymbol?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISODateTime']>;
};

export type GqlThreshold = {
  __typename?: 'Threshold';
  comparisonOperator?: Maybe<ComparisonOperators>;
  price?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  thresholdType?: Maybe<ThresholdType>;
  weight?: Maybe<GqlWeight>;
};

export type GqlThresholdInput = {
  comparisonOperator?: Maybe<ComparisonOperators>;
  price?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  thresholdType?: Maybe<ThresholdType>;
  weight?: Maybe<GqlWeightInput>;
};

export enum ThresholdType {
  price = 'PRICE',
  quantity = 'QUANTITY',
  totalPrice = 'TOTAL_PRICE',
  totalQuantity = 'TOTAL_QUANTITY',
  totalWeight = 'TOTAL_WEIGHT',
  weight = 'WEIGHT'
}

export type GqlTopProduct = {
  __typename?: 'TopProduct';
  product?: Maybe<GqlProducts>;
  total?: Maybe<Scalars['Float']>;
};

export type GqlTotalQuantity = {
  __typename?: 'TotalQuantity';
  enabled: Scalars['Boolean'];
  maxQuantity?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  quantityOperator?: Maybe<ComparisonOperators>;
};

export type GqlTotalQuantityInput = {
  enabled: Scalars['Boolean'];
  maxQuantity?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  quantityOperator: ComparisonOperators;
};

export type GqlTotalSpend = {
  __typename?: 'TotalSpend';
  enabled: Scalars['Boolean'];
  maximumSpend?: Maybe<Scalars['Float']>;
  minimumSpend?: Maybe<Scalars['Float']>;
  spendOperator?: Maybe<ComparisonOperators>;
};

export type GqlTotalSpendInput = {
  enabled: Scalars['Boolean'];
  maximumSpend?: Maybe<Scalars['Float']>;
  minimumSpend: Scalars['Float'];
  spendOperator: ComparisonOperators;
};

export type GqlTotalWeight = {
  __typename?: 'TotalWeight';
  enabled: Scalars['Boolean'];
  weight?: Maybe<Scalars['String']>;
  weightOperator?: Maybe<ComparisonOperators>;
};

export type GqlTotalWeightInput = {
  enabled: Scalars['Boolean'];
  weight: Scalars['String'];
  weightOperator: ComparisonOperators;
};

export type GqlTrending = {
  __typename?: 'Trending';
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  dollarHistoryThisPeriod?: Maybe<Array<Maybe<GqlChangeHistoryObject>>>;
  percentChangeFromLastPeriod?: Maybe<Scalars['Float']>;
};

export type GqlTrendingBrandsResponse = {
  __typename?: 'TrendingBrandsResponse';
  meta?: Maybe<GqlAnalyticsMeta>;
  trending?: Maybe<Array<Maybe<GqlTrending>>>;
};

export type GqlUpdateBillingGroupInput = {
  enterpriseId: Scalars['ID'];
  id: Scalars['ID'];
  name: Scalars['String'];
  notificationEmails: Array<Maybe<Scalars['String']>>;
  payment: GqlPaymentMethodInput;
  retailers: Array<Maybe<Scalars['ID']>>;
};

export type GqlUpdateImageBannerInput = {
  _id: Scalars['String'];
  alt?: Maybe<Scalars['String']>;
  image: Scalars['String'];
  link?: Maybe<Scalars['String']>;
  mobileImage: Scalars['String'];
  position: Scalars['Int'];
};

export type GqlUpdateImageBannersInput = {
  imageBanners: Array<Maybe<GqlUpdateImageBannerInput>>;
};

export type GqlUpdateLibraryProductResponse = {
  __typename?: 'UpdateLibraryProductResponse';
  libraryProduct?: Maybe<GqlLibraryProduct>;
};

export type GqlUpdateWebCustomizationSettingsInput = {
  colorSettings: GqlColorSettingsInputV2;
  fontSettings: GqlFontSettingsInput;
};

export type GqlUpdatedLibraryProduct = {
  AdditionalOptions?: Maybe<Array<Scalars['String']>>;
  CBD?: Maybe<Scalars['String']>;
  CBDContent?: Maybe<GqlLibraryProductPotencyInput>;
  Description: Scalars['String'];
  DispensaryID?: Maybe<Scalars['String']>;
  Image?: Maybe<Scalars['String']>;
  Name?: Maybe<Scalars['String']>;
  Options?: Maybe<Array<Maybe<Scalars['String']>>>;
  Prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  Status?: Maybe<Scalars['String']>;
  THC?: Maybe<Scalars['String']>;
  THCContent?: Maybe<GqlLibraryProductPotencyInput>;
  _id?: Maybe<Scalars['String']>;
  bottleDepositTaxCents?: Maybe<Scalars['Int']>;
  brandId?: Maybe<Scalars['String']>;
  cannabinoids?: Maybe<Array<GqlLibraryProductCannabinoidsInputV2>>;
  cannabinoidsV2?: Maybe<Array<GqlLibraryProductCannabinoidsInputV2>>;
  comingSoon?: Maybe<Scalars['Boolean']>;
  complianceRegionId?: Maybe<Scalars['String']>;
  connectedCount?: Maybe<Scalars['Int']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  duplicatedProductId?: Maybe<Scalars['String']>;
  effects?: Maybe<Scalars['JSON']>;
  flavors?: Maybe<Array<Scalars['String']>>;
  gtin?: Maybe<Scalars['String']>;
  images?: Maybe<Array<Maybe<GqlProducts_ImagesInput>>>;
  integrationKey?: Maybe<Scalars['String']>;
  limitsPerCustomer?: Maybe<Array<GqlLibraryProductLimitPerCustomerInput>>;
  manualInventory?: Maybe<Array<GqlLibraryProductManualInventoryInput>>;
  medicalOnly?: Maybe<Scalars['Boolean']>;
  medicalPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  productTemplate?: Maybe<Scalars['Boolean']>;
  recOnly?: Maybe<Scalars['Boolean']>;
  recPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  sku?: Maybe<Scalars['String']>;
  stockImage?: Maybe<Scalars['String']>;
  stockImageAliases?: Maybe<Scalars['String']>;
  stockImageCategory?: Maybe<Scalars['String']>;
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  terpenes?: Maybe<Array<GqlLibraryProductTerpenesInput>>;
  type?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['Float']>;
};

export type GqlUserAuthInfo = {
  __typename?: 'UserAuthInfo';
  authTextMessageSent?: Maybe<Scalars['Boolean']>;
  incorrectPinProvided?: Maybe<Scalars['Boolean']>;
  pinConfirmed?: Maybe<Scalars['Boolean']>;
};

export type GqlUserEmail = {
  __typename?: 'UserEmail';
  email?: Maybe<Scalars['String']>;
};

export type GqlUserEmails = {
  __typename?: 'UserEmails';
  address: Scalars['String'];
};

export type GqlUserEnrollment = {
  __typename?: 'UserEnrollment';
  bankAccounts: Array<GqlBankAccount>;
  enrollment?: Maybe<GqlStatus>;
};

export enum UserRoles {
  super = 'SUPER',
  user = 'USER'
}

export type GqlUsers = {
  __typename?: 'Users';
  _id?: Maybe<Scalars['String']>;
  audioNotificationsOnNewArrivalsDisabled?: Maybe<Scalars['Boolean']>;
  audioNotificationsOnNewOrdersDisabled?: Maybe<Scalars['Boolean']>;
  availableRetailerAgentPositions?: Maybe<Array<Maybe<RetailerAgentPositions>>>;
  chainID?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  isWeeklyReportEnabled?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  permissions?: Maybe<GqlUsers_Permissions>;
  phone?: Maybe<Scalars['String']>;
  roleAtDispensary?: Maybe<DispensaryRoles>;
  textNotifications?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  unsubscribedDispensaries?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlUsers_Permissions = {
  __typename?: 'Users_permissions';
  allLocations?: Maybe<Scalars['Boolean']>;
  analytics?: Maybe<Scalars['Boolean']>;
  billing?: Maybe<Scalars['Boolean']>;
  customers?: Maybe<Scalars['Boolean']>;
  dispensaryIds?: Maybe<Array<Scalars['String']>>;
  driver?: Maybe<Scalars['Boolean']>;
  enterpriseAdmin?: Maybe<Scalars['Boolean']>;
  enterpriseSpecials?: Maybe<Scalars['Boolean']>;
  menu?: Maybe<Scalars['Boolean']>;
  menuReview?: Maybe<Scalars['Boolean']>;
  messaging?: Maybe<Scalars['Boolean']>;
  orders?: Maybe<Scalars['Boolean']>;
  promote?: Maybe<Scalars['Boolean']>;
  settings?: Maybe<Scalars['Boolean']>;
  superMenuReview?: Maybe<Scalars['Boolean']>;
  tasks?: Maybe<Scalars['Boolean']>;
  users?: Maybe<Scalars['Boolean']>;
};

export type GqlValidationResponse = {
  __typename?: 'ValidationResponse';
  isValid?: Maybe<Scalars['Boolean']>;
};

export enum Versions {
  v1 = 'v1',
  v2 = 'v2',
  v3 = 'v3',
  v4 = 'v4'
}

export type GqlWebCustomizationSettings = {
  __typename?: 'WebCustomizationSettings';
  colorSettings: GqlColorSettingsV2;
  fontSettings: GqlFontSettings;
};

export type GqlWeeklyHours = {
  __typename?: 'WeeklyHours';
  Friday?: Maybe<GqlDayBounds>;
  Monday?: Maybe<GqlDayBounds>;
  Saturday?: Maybe<GqlDayBounds>;
  Sunday?: Maybe<GqlDayBounds>;
  Thursday?: Maybe<GqlDayBounds>;
  Tuesday?: Maybe<GqlDayBounds>;
  Wednesday?: Maybe<GqlDayBounds>;
};

export type GqlWeeklyHoursInput = {
  Friday?: Maybe<GqlDayBoundsInput>;
  Monday?: Maybe<GqlDayBoundsInput>;
  Saturday?: Maybe<GqlDayBoundsInput>;
  Sunday?: Maybe<GqlDayBoundsInput>;
  Thursday?: Maybe<GqlDayBoundsInput>;
  Tuesday?: Maybe<GqlDayBoundsInput>;
  Wednesday?: Maybe<GqlDayBoundsInput>;
};

export type GqlWeight = {
  __typename?: 'Weight';
  amount?: Maybe<Scalars['Float']>;
  weightUom?: Maybe<WeightUom>;
};

export type GqlWeightInput = {
  amount?: Maybe<Scalars['Float']>;
  weightUom?: Maybe<WeightUom>;
};

export enum WeightUom {
  g = 'G',
  gc = 'GC',
  mg = 'MG',
  oz = 'OZ'
}

export type GqlYearInReviewResponse = {
  __typename?: 'YearInReviewResponse';
  busiestDay?: Maybe<GqlBusiestDay>;
  categories?: Maybe<Array<Maybe<GqlCategory>>>;
  conversionRate?: Maybe<Scalars['Float']>;
  largestOrder?: Maybe<GqlLargestOrder>;
  orderTypes?: Maybe<Array<Maybe<GqlOrderType>>>;
  pngUrl?: Maybe<Scalars['String']>;
  topSeller?: Maybe<GqlTopSeller>;
  totalPounds?: Maybe<Scalars['Float']>;
  totalSales?: Maybe<GqlTotalSales>;
};

export type GqlActiveDispensariesInput = {
  accountExecutiveId?: Maybe<Scalars['String']>;
  accountManagerId?: Maybe<Scalars['String']>;
  chainId?: Maybe<Scalars['String']>;
  customerSuccessManagerId?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['String']>;
  orderType?: Maybe<DispensaryOrderType>;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  searchStr?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Scalars['String']>;
  sortDirection?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type GqlActiveProductsCheckInput = {
  bypassThresholds?: Maybe<Scalars['Boolean']>;
  dispensaryId?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['String']>>>;
  isKiosk?: Maybe<Scalars['Boolean']>;
};

export type GqlAddCustomerToOrderInput = {
  orderId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type GqlAddressResidentialCheckInput = {
  city?: Maybe<Scalars['String']>;
  ln1?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type GqlArchiveOrderInput = {
  orderId?: Maybe<Scalars['String']>;
  otherReasonText?: Maybe<Scalars['String']>;
  reasonId?: Maybe<Orders_CancellationReasonIDs>;
  shouldNotifyCustomer?: Maybe<Scalars['Boolean']>;
};

export type GqlBrandCollisionInput = {
  isAllowed: Scalars['Boolean'];
};

export type GqlBrandInput = {
  aliasList?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  parentBrandId?: Maybe<Scalars['ID']>;
  regions?: Maybe<Array<Scalars['String']>>;
};

export type GqlBrandMergeHistoriesFilters = {
  destinationBrandId?: Maybe<Scalars['String']>;
  destinationDispensaryId?: Maybe<Scalars['String']>;
  reverted?: Maybe<Scalars['Boolean']>;
  sourceBrandId?: Maybe<Scalars['String']>;
  sourceDispensaryId?: Maybe<Scalars['String']>;
};

export type GqlBrandMergeHistoriesPagination = {
  number?: Maybe<Scalars['Int']>;
  size?: Maybe<Scalars['Int']>;
};

export type GqlBrandMergeHistoriesSort = {
  sortBy?: Maybe<BrandMergeHistoriesSortByEnum>;
  sortDirection?: Maybe<StringSortDirections>;
};

export type GqlBrandPortalProductSearchFilters = {
  approvalStatus?: Maybe<BrandPortalProductSearchApprovalStatusFilterEnum>;
  brandIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<Scalars['String']>;
  complianceRegion?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['Float']>;
};

export type GqlBrandPortalProductSearchSort = {
  sortBy?: Maybe<BrandPortalProductSearchSortByEnum>;
  sortDirection?: Maybe<StringSortDirections>;
};

export type GqlBrandUserCreateInput = {
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  manageBrandGroup?: Maybe<Scalars['Boolean']>;
  manageBrands?: Maybe<Scalars['Boolean']>;
  managedBrandIds?: Maybe<Array<Scalars['ID']>>;
  parentBrandId: Scalars['ID'];
  phone: Scalars['String'];
};

export type GqlBrandUserUpdateAccountInput = {
  currentPassword?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  newPassword?: Maybe<Scalars['String']>;
  phone: Scalars['String'];
};

export type GqlBrandUserUpdateInput = {
  active?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  manageBrandGroup?: Maybe<Scalars['Boolean']>;
  manageBrands?: Maybe<Scalars['Boolean']>;
  managedBrandIds?: Maybe<Array<Scalars['ID']>>;
  parentBrandId?: Maybe<Scalars['ID']>;
  phone?: Maybe<Scalars['String']>;
};

export type GqlBrandUsersSortInput = {
  sortBy?: Maybe<BrandUsersSortBy>;
  sortDirection?: Maybe<StringSortDirections>;
};

export type GqlBrandsSortInput = {
  sortBy: Scalars['String'];
  sortDirection: Scalars['String'];
};

export type GqlBusiestDay = {
  __typename?: 'busiestDay';
  averageFill?: Maybe<Scalars['Float']>;
  day?: Maybe<Scalars['String']>;
  percentageIncrease?: Maybe<Scalars['Float']>;
  totalDeliveries?: Maybe<Scalars['Int']>;
  totalOrders?: Maybe<Scalars['Int']>;
  totalSales?: Maybe<Scalars['Float']>;
};

export type GqlCategory = {
  __typename?: 'category';
  category?: Maybe<Scalars['String']>;
  sales?: Maybe<Scalars['Float']>;
  salesPercent?: Maybe<Scalars['Float']>;
};

export type GqlCategoryPhotoInput = {
  category?: Maybe<Scalars['String']>;
  src?: Maybe<Scalars['String']>;
};

export type GqlColorSettingsInput = {
  linkColor?: Maybe<Scalars['String']>;
  navBarColor?: Maybe<Scalars['String']>;
};

export type GqlConsumerSignupDataInput = {
  dispensaryId?: Maybe<Scalars['String']>;
  embedded: Scalars['Boolean'];
};

export type GqlConsumerSignupInput = {
  data: GqlConsumerSignupDataInput;
  email: Scalars['String'];
  password: Scalars['String'];
  profile: GqlConsumerSignupProfileInput;
};

export type GqlConsumerSignupMedicalCardInput = {
  expirationDate: Scalars['String'];
  number: Scalars['String'];
  photo?: Maybe<Scalars['String']>;
  state: Scalars['String'];
};

export type GqlConsumerSignupProfileInput = {
  address?: Maybe<GqlConsumerUserProfileAddress>;
  birthday: Scalars['String'];
  driversLicense?: Maybe<Scalars['String']>;
  emailNotifications: Scalars['Boolean'];
  emailOptIn?: Maybe<Scalars['Boolean']>;
  emailSubscription?: Maybe<Scalars['Boolean']>;
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  medicalCard?: Maybe<GqlConsumerSignupMedicalCardInput>;
  phone?: Maybe<Scalars['String']>;
  photoId?: Maybe<Scalars['String']>;
  textNotifications: Scalars['Boolean'];
};

export type GqlConsumerUserMedicalCard = {
  __typename?: 'consumerUserMedicalCard';
  expirationDate?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type GqlConsumerUserMedicalCardInput = {
  expirationDate?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type GqlConsumerUserProfile = {
  __typename?: 'consumerUserProfile';
  birthday?: Maybe<Scalars['String']>;
  emailNotifications?: Maybe<Scalars['Boolean']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  medicalCard?: Maybe<GqlConsumerUserMedicalCard>;
  phone?: Maybe<Scalars['String']>;
  photoId?: Maybe<Scalars['String']>;
  textNotifications?: Maybe<Scalars['Boolean']>;
};

export type GqlConsumerUserProfileAddress = {
  city?: Maybe<Scalars['String']>;
  lat?: Maybe<Scalars['Float']>;
  ln1?: Maybe<Scalars['String']>;
  ln2?: Maybe<Scalars['String']>;
  lng?: Maybe<Scalars['Float']>;
  state?: Maybe<Scalars['String']>;
  zipcode?: Maybe<Scalars['String']>;
};

export type GqlConsumerUserProfileAddressType = {
  __typename?: 'consumerUserProfileAddressType';
  city?: Maybe<Scalars['String']>;
  lat?: Maybe<Scalars['Float']>;
  ln1?: Maybe<Scalars['String']>;
  ln2?: Maybe<Scalars['String']>;
  lng?: Maybe<Scalars['Float']>;
  state?: Maybe<Scalars['String']>;
  zipcode?: Maybe<Scalars['String']>;
};

export type GqlConsumerUserProfileInput = {
  _id?: Maybe<Scalars['String']>;
  address?: Maybe<GqlConsumerUserProfileAddress>;
  birthday?: Maybe<Scalars['String']>;
  driversLicense?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  emailNotifications?: Maybe<Scalars['Boolean']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  medicalCard?: Maybe<GqlConsumerUserMedicalCardInput>;
  phone?: Maybe<Scalars['String']>;
  photoId?: Maybe<Scalars['String']>;
  textNotifications?: Maybe<Scalars['Boolean']>;
};

export type GqlContactUsInput = {
  companyName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type GqlCopuonApplicableCategoryInput = {
  category?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
};

export type GqlCouponApplicableCategory = {
  __typename?: 'couponApplicableCategory';
  category?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
};

export type GqlCouponRestrictions = {
  __typename?: 'couponRestrictions';
  minimumPurchase?: Maybe<Scalars['Boolean']>;
  minimumPurchaseInCents?: Maybe<Scalars['Int']>;
  noSpecials?: Maybe<Scalars['Boolean']>;
};

export type GqlCouponRestrictionsInput = {
  minimumPurchase?: Maybe<Scalars['Boolean']>;
  minimumPurchaseInCents?: Maybe<Scalars['Int']>;
  noSpecials?: Maybe<Scalars['Boolean']>;
};

export type GqlCouponValidationProductInput = {
  brandId?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
};

export type GqlCouponsFilterInput = {
  active?: Maybe<Scalars['Boolean']>;
  applicableCategories?: Maybe<Array<Maybe<GqlApplicableCategoryInput>>>;
  code?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  searchStr?: Maybe<Scalars['String']>;
};

export type GqlCouponsPaginationInput = {
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};

export type GqlCouponsSortInput = {
  sortBy: Scalars['String'];
  sortDirection: Scalars['String'];
};

export type GqlCreateBucketInput = {
  brandIds?: Array<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  chainId?: Maybe<Scalars['String']>;
  connectionStatus?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  dispensaryStatus?: Maybe<Scalars['String']>;
  minimumConfidenceScore?: Maybe<Scalars['Int']>;
  reviewStatus?: Maybe<Scalars['String']>;
  score: Scalars['Float'];
  search?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  thresholdFilter?: Maybe<Scalars['String']>;
};

export type GqlCreateBucketInputV3 = {
  brandIds?: Array<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  chainId?: Maybe<Scalars['String']>;
  connectionStatus?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  dispensaryStatus?: Maybe<Scalars['String']>;
  reviewStatus?: Maybe<Scalars['String']>;
  score: Scalars['Float'];
  search?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  thresholdFilter?: Maybe<Scalars['String']>;
};

export type GqlCreateCouponInput = {
  active?: Maybe<Scalars['Boolean']>;
  addedDate: Scalars['String'];
  applicableCategories?: Maybe<Array<Maybe<GqlCopuonApplicableCategoryInput>>>;
  code: Scalars['String'];
  dispensaryId: Scalars['String'];
  expDate: Scalars['String'];
  fixedDiscountInCents?: Maybe<Scalars['Int']>;
  numAllowedUses?: Maybe<Scalars['Int']>;
  numUses?: Maybe<Scalars['Int']>;
  oneUsePerCustomer?: Maybe<Scalars['Boolean']>;
  percentDiscount?: Maybe<Scalars['Float']>;
  restrictions?: Maybe<GqlCouponRestrictionsInput>;
};

export type GqlCustomCategoryPhotoInput = {
  category?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type GqlCustomerExportInput = {
  columns?: Maybe<Array<Maybe<Scalars['String']>>>;
  dispensaryId: Scalars['String'];
  email: Scalars['String'];
  subscriptionsEnabled?: Maybe<Scalars['Boolean']>;
};

export type GqlCustomerImportInput = {
  data: Scalars['String'];
  dispensaryId: Scalars['String'];
  dispensaryName: Scalars['String'];
  filename: Scalars['String'];
};

export type GqlCustomerUpdateInput = {
  _id: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type GqlCustomersFilterInput = {
  dispensaryId?: Maybe<Scalars['String']>;
  search?: Maybe<Scalars['String']>;
};

export type GqlCustomersPaginationInput = {
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};

export type GqlCustomersSortInput = {
  sortBy?: Maybe<Scalars['String']>;
  sortDirection?: Maybe<Scalars['String']>;
};

export type GqlDayBounds = {
  __typename?: 'dayBounds';
  active?: Maybe<Scalars['Boolean']>;
  end?: Maybe<Scalars['String']>;
  start?: Maybe<Scalars['String']>;
};

export type GqlDayBoundsInput = {
  active?: Maybe<Scalars['Boolean']>;
  end?: Maybe<Scalars['String']>;
  start?: Maybe<Scalars['String']>;
};

export type GqlDeliveryZipCodesInput = {
  fee?: Maybe<Scalars['Int']>;
  feeType?: Maybe<FeeTypes>;
  minimum?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  percentFee?: Maybe<Scalars['Float']>;
  zipCode?: Maybe<Scalars['String']>;
};

export type GqlDeliveryZonesInput = {
  area?: Maybe<GqlPolygonInput>;
  fee?: Maybe<Scalars['Int']>;
  feeType?: Maybe<FeeTypes>;
  minimum?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  percentFee?: Maybe<Scalars['Float']>;
};

export type GqlDevicesFilterInput = {
  _id?: Maybe<Scalars['String']>;
  buildNumber?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  printerConnected?: Maybe<Scalars['Boolean']>;
  versionNumber?: Maybe<Scalars['String']>;
};

export type GqlDispensariesFilterInput = {
  acceptsCreditCardsDelivery?: Maybe<Scalars['Boolean']>;
  acceptsCreditCardsPickup?: Maybe<Scalars['Boolean']>;
  acceptsDutchiePay?: Maybe<Scalars['Boolean']>;
  activeOnly?: Maybe<Scalars['Boolean']>;
  cName?: Maybe<Scalars['String']>;
  cNameOrID?: Maybe<Scalars['String']>;
  chain?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  creditCards?: Maybe<Scalars['Boolean']>;
  deliversToAddress?: Maybe<Scalars['Boolean']>;
  destinationTaxState?: Maybe<Scalars['String']>;
  destinationTaxZipcode?: Maybe<Scalars['String']>;
  distance?: Maybe<Scalars['Float']>;
  freeDelivery?: Maybe<Scalars['Boolean']>;
  getIntegration?: Maybe<Scalars['Boolean']>;
  hostDomain?: Maybe<Scalars['String']>;
  includePending?: Maybe<Scalars['Boolean']>;
  includeStealthMode?: Maybe<Scalars['Boolean']>;
  medical?: Maybe<Scalars['Boolean']>;
  nearLat?: Maybe<Scalars['Float']>;
  nearLng?: Maybe<Scalars['Float']>;
  noMinimum?: Maybe<Scalars['Boolean']>;
  offerCurbsidePickup?: Maybe<Scalars['Boolean']>;
  offerDelivery?: Maybe<Scalars['Boolean']>;
  offerPickup?: Maybe<Scalars['Boolean']>;
  openForDelivery?: Maybe<Scalars['Boolean']>;
  openForDeliveryRightNow?: Maybe<Scalars['Boolean']>;
  openNowForDelivery?: Maybe<Scalars['Boolean']>;
  openNowForPickup?: Maybe<Scalars['Boolean']>;
  recreational?: Maybe<Scalars['Boolean']>;
  sortBy?: Maybe<DispensarySortByType>;
  state?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  zipCode?: Maybe<Scalars['String']>;
};

export type GqlDispensaryCustomerInput = {
  _id?: Maybe<Scalars['String']>;
  ageVerified?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  dispensaryName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  emailSubscription?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  textSubscription?: Maybe<Scalars['Boolean']>;
  userId?: Maybe<Scalars['String']>;
};

export type GqlDispensaryDemoRequestInput = {
  dispensaryContactEmail?: Maybe<Scalars['String']>;
  dispensaryContactFirstName?: Maybe<Scalars['String']>;
  dispensaryContactLastName?: Maybe<Scalars['String']>;
  dispensaryContactName?: Maybe<Scalars['String']>;
  dispensaryContactPhoneNumber?: Maybe<Scalars['String']>;
  dispensaryName?: Maybe<Scalars['String']>;
  dispensaryPos?: Maybe<Scalars['String']>;
  dispensaryState?: Maybe<Scalars['String']>;
  dispensaryType?: Maybe<Scalars['String']>;
  roleAtDispensary?: Maybe<DispensaryRoles>;
};

export type GqlDispensaryFeatureFlagOptions = {
  enableArrivals?: Maybe<Scalars['Boolean']>;
  enableDriveThruPickup?: Maybe<Scalars['Boolean']>;
  enableMenuImport?: Maybe<Scalars['Boolean']>;
  enableMerrco?: Maybe<Scalars['Boolean']>;
  enableMixAndMatch?: Maybe<Scalars['Boolean']>;
  enableNonTerminalAutoConfirm?: Maybe<Scalars['Boolean']>;
  enablePausedOrders?: Maybe<Scalars['Boolean']>;
  hideDeliveryEstimate?: Maybe<Scalars['Boolean']>;
  hideMyAccount?: Maybe<Scalars['Boolean']>;
  hideStoreHours?: Maybe<Scalars['Boolean']>;
  publicAPIAccess?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaryMessagingSettingsInput = {
  disableConfirmation?: Maybe<Scalars['Boolean']>;
  disableReadyForPickup?: Maybe<Scalars['Boolean']>;
  disableStartDelivery?: Maybe<Scalars['Boolean']>;
  notifySid?: Maybe<Scalars['String']>;
};

export type GqlDispensaryOnboardingInput = {
  dispensaryContactMethod?: Maybe<Scalars['String']>;
  dispensaryContactMethodValue?: Maybe<Scalars['String']>;
  dispensaryContactName?: Maybe<Scalars['String']>;
  dispensaryDelivery?: Maybe<Scalars['String']>;
  dispensaryLogo?: Maybe<Scalars['String']>;
  dispensaryLogoFileId?: Maybe<Scalars['String']>;
  dispensaryName?: Maybe<Scalars['String']>;
  dispensaryPhoneNumber?: Maybe<Scalars['String']>;
  dispensaryPhoto?: Maybe<Scalars['String']>;
  dispensaryPhotoFileId?: Maybe<Scalars['String']>;
  dispensaryPos?: Maybe<Scalars['String']>;
  dispensaryPosOther?: Maybe<Scalars['String']>;
  dispensarySocialEquityEnrollment?: Maybe<Scalars['Boolean']>;
  dispensaryState?: Maybe<Scalars['String']>;
  dispensaryTypeMedical?: Maybe<Scalars['Boolean']>;
  dispensaryTypeRecreational?: Maybe<Scalars['Boolean']>;
  roleAtDispensary?: Maybe<DispensaryRoles>;
};

export type GqlDispensaryRemoveFromChainInput = {
  id?: Maybe<Scalars['String']>;
};

export type GqlDispensaryStoreInfoCustomDomainSettings = {
  domain?: Maybe<Scalars['String']>;
};

export type GqlDispensaryStoreInfoStoreSettings = {
  subscriptions?: Maybe<GqlDispensaries_SubscriptionsInput>;
};

export type GqlDispensaryStoreSettingsOptions = {
  defaultViewStyle?: Maybe<Scalars['Boolean']>;
  disableGuestCheckout?: Maybe<Scalars['Boolean']>;
  disableGuestDOB?: Maybe<Scalars['Boolean']>;
  disablePurchaseLimits?: Maybe<Scalars['Boolean']>;
  displayPhoneConfirmation?: Maybe<Scalars['Boolean']>;
  dontCombineWeightedProducts?: Maybe<Scalars['Boolean']>;
  dontMapSubcategoriesByProductName?: Maybe<Scalars['Boolean']>;
  enableCustomerMessaging?: Maybe<Scalars['Boolean']>;
  enableLimitPerCustomer?: Maybe<Scalars['Boolean']>;
  enableOrderStatusEmails?: Maybe<Scalars['Boolean']>;
  enableStorefrontAgeGate?: Maybe<Scalars['Boolean']>;
  hideAddressFromDutchieMain?: Maybe<Scalars['Boolean']>;
  hideEffects?: Maybe<Scalars['Boolean']>;
  hideFilters?: Maybe<Scalars['Boolean']>;
  isolatedMenus?: Maybe<Scalars['Boolean']>;
  keepUncombinedWeights?: Maybe<Scalars['Boolean']>;
  prioritizeStaffPicksInSearchResults?: Maybe<Scalars['Boolean']>;
  quantityLimit?: Maybe<Scalars['Boolean']>;
  requireEmailAddressForGuestCheckout?: Maybe<Scalars['Boolean']>;
  requireMedCardPhotoForDelivery?: Maybe<Scalars['Boolean']>;
  requireMedCardPhotoForPickup?: Maybe<Scalars['Boolean']>;
  stealthMode?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaryUpdateCategoryLimits = {
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GqlDispensaryUpdateCustomDomainSettings = {
  domain?: Maybe<Scalars['String']>;
};

export type GqlDispensaryUpdateDangerIntervals = {
  confirmedInMinutes?: Maybe<Scalars['Int']>;
  inTransitClosedInMinutes?: Maybe<Scalars['Int']>;
  inTransitInMinutes?: Maybe<Scalars['Int']>;
  readyForPickupInMinutes?: Maybe<Scalars['Int']>;
};

export type GqlDispensaryUpdateEmbedSettings = {
  applyToAllLocations?: Maybe<Scalars['Boolean']>;
  autoGTM?: Maybe<Scalars['Boolean']>;
  autoScroll?: Maybe<Scalars['Boolean']>;
  autoScrollOffset?: Maybe<Scalars['Int']>;
  disablePageLoadsAtTop?: Maybe<Scalars['Boolean']>;
  disableRouting?: Maybe<Scalars['Boolean']>;
  disclaimerText?: Maybe<Scalars['String']>;
  disclaimerTextHtml?: Maybe<Scalars['String']>;
  enableIntercom?: Maybe<Scalars['Boolean']>;
  iframeCSS?: Maybe<Scalars['String']>;
  pageCSS?: Maybe<Scalars['String']>;
};

export type GqlDispensaryUpdateExciseTax = {
  local?: Maybe<Scalars['Float']>;
  medicalLocal?: Maybe<Scalars['Float']>;
  medicalState?: Maybe<Scalars['Float']>;
  state?: Maybe<Scalars['Float']>;
};

export type GqlDispensaryUpdateFeatureFlags = {
  checkoutV2?: Maybe<Scalars['Boolean']>;
  enableAdvancedDiscountSettings?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrdering?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrderingForPickup?: Maybe<Scalars['Boolean']>;
  enableAnalyticsBeta?: Maybe<Scalars['Boolean']>;
  enableArrivals?: Maybe<Scalars['Boolean']>;
  enableBogoSpecials?: Maybe<Scalars['Boolean']>;
  enableBogoTotalQuantityAndWeight?: Maybe<Scalars['Boolean']>;
  enableDriveThruPickup?: Maybe<Scalars['Boolean']>;
  enableHypur?: Maybe<Scalars['Boolean']>;
  enableMenuImport?: Maybe<Scalars['Boolean']>;
  enableMerrco?: Maybe<Scalars['Boolean']>;
  enableMixAndMatch?: Maybe<Scalars['Boolean']>;
  enableNonTerminalAutoConfirm?: Maybe<Scalars['Boolean']>;
  enableOnfleet?: Maybe<Scalars['Boolean']>;
  enablePausedOrders?: Maybe<Scalars['Boolean']>;
  enableScheduledOrdering?: Maybe<Scalars['Boolean']>;
  enableSprout?: Maybe<Scalars['Boolean']>;
  enableV3Beta?: Maybe<Scalars['Boolean']>;
  hasEffectsFilter?: Maybe<Scalars['Boolean']>;
  hideDeliveryEstimate?: Maybe<Scalars['Boolean']>;
  hideMyAccount?: Maybe<Scalars['Boolean']>;
  hideStoreHours?: Maybe<Scalars['Boolean']>;
  publicAPIAccess?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaryUpdateFeeTiers = {
  fee?: Maybe<Scalars['String']>;
  feeType?: Maybe<FeeTypes>;
  max?: Maybe<Scalars['String']>;
  min?: Maybe<Scalars['String']>;
  percentFee?: Maybe<Scalars['Float']>;
};

export type GqlDispensaryUpdateHours = {
  Friday?: Maybe<GqlDispensaryUpdateHoursDay>;
  Monday?: Maybe<GqlDispensaryUpdateHoursDay>;
  Saturday?: Maybe<GqlDispensaryUpdateHoursDay>;
  Sunday?: Maybe<GqlDispensaryUpdateHoursDay>;
  Thursday?: Maybe<GqlDispensaryUpdateHoursDay>;
  Tuesday?: Maybe<GqlDispensaryUpdateHoursDay>;
  Wednesday?: Maybe<GqlDispensaryUpdateHoursDay>;
};

export type GqlDispensaryUpdateHoursDay = {
  active?: Maybe<Scalars['Boolean']>;
  end?: Maybe<Scalars['String']>;
  start?: Maybe<Scalars['String']>;
};

export type GqlDispensaryUpdateHoursSettingsInput = {
  id?: Maybe<Scalars['String']>;
  profile?: Maybe<GqlDispensaryUpdateHoursSettingsProfileInput>;
};

export type GqlDispensaryUpdateHoursSettingsProfileInput = {
  deliveryHours?: Maybe<GqlDispensaryUpdateHours>;
  pickupHours?: Maybe<GqlDispensaryUpdateHours>;
  reservationConfig?: Maybe<GqlReservationConfigInput>;
  specialHours?: Maybe<Array<Maybe<GqlSpecialHoursInput>>>;
  storeSettings?: Maybe<GqlDispensaryUpdateStoreSettings>;
};

export type GqlDispensaryUpdateInput = {
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  profile?: Maybe<GqlDispensaryUpdateProfileInput>;
};

export type GqlDispensaryUpdateKioskConfig = {
  directedOrders?: Maybe<Scalars['Boolean']>;
  fullNameOnly?: Maybe<Scalars['Boolean']>;
  hideEmailField?: Maybe<Scalars['Boolean']>;
  hidePhoneField?: Maybe<Scalars['Boolean']>;
  notesField?: Maybe<Scalars['Boolean']>;
  phoneRequired?: Maybe<Scalars['Boolean']>;
  showBirthdateField?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaryUpdateOptionsSettings = {
  acceptsDutchiePayTips?: Maybe<Scalars['Boolean']>;
  acceptsTips?: Maybe<Scalars['Boolean']>;
  featureFlags?: Maybe<GqlDispensaryFeatureFlagOptions>;
  messagingSettings?: Maybe<GqlDispensaryMessagingSettingsInput>;
  orderStatusEmailSettings?: Maybe<GqlOrderStatusEmailSettingsInput>;
  ordersConfig?: Maybe<GqlDispensaryUpdateOrdersConfig>;
  removeMedicalCardFieldsAtCheckout?: Maybe<Scalars['Boolean']>;
  requirePhotoIdForDelivery?: Maybe<Scalars['Boolean']>;
  requirePhotoIdForPickup?: Maybe<Scalars['Boolean']>;
  requiresDriversLicense?: Maybe<Scalars['Boolean']>;
  requiresDriversLicenseForPickup?: Maybe<Scalars['Boolean']>;
  storeSettings?: Maybe<GqlDispensaryStoreSettingsOptions>;
};

export type GqlDispensaryUpdateOptionsSettingsInput = {
  id?: Maybe<Scalars['String']>;
  updatedSettings?: Maybe<GqlDispensaryUpdateOptionsSettings>;
};

export type GqlDispensaryUpdateOrderTypeConfig = {
  enabled?: Maybe<Scalars['Boolean']>;
  paymentTypes?: Maybe<GqlDispensaryUpdatePaymentTypeConfig>;
};

export type GqlDispensaryUpdateOrderTypesConfig = {
  curbsidePickup?: Maybe<GqlDispensaryUpdateOrderTypeConfig>;
  delivery?: Maybe<GqlDispensaryUpdateOrderTypeConfig>;
  driveThruPickup?: Maybe<GqlDispensaryUpdateOrderTypeConfig>;
  kiosk?: Maybe<GqlDispensaryUpdateOrderTypeConfig>;
  pickup?: Maybe<GqlDispensaryUpdateOrderTypeConfig>;
};

export type GqlDispensaryUpdateOrdersConfig = {
  autoClose?: Maybe<Scalars['Boolean']>;
  autoConfirm?: Maybe<Scalars['Boolean']>;
  posItemNames?: Maybe<Scalars['Boolean']>;
  terminalReceiptOptions?: Maybe<GqlDispensaryUpdateTerminalReceiptOptions>;
};

export type GqlDispensaryUpdatePaymentFees = {
  fee?: Maybe<Scalars['Float']>;
  feeType?: Maybe<Scalars['String']>;
  paymentType?: Maybe<Scalars['String']>;
};

export type GqlDispensaryUpdatePaymentTypeConfig = {
  aeropay?: Maybe<Scalars['Boolean']>;
  alt36?: Maybe<Scalars['Boolean']>;
  canPay?: Maybe<Scalars['Boolean']>;
  cash?: Maybe<Scalars['Boolean']>;
  check?: Maybe<Scalars['Boolean']>;
  creditCardAtDoor?: Maybe<Scalars['Boolean']>;
  creditCardByPhone?: Maybe<Scalars['Boolean']>;
  debit?: Maybe<Scalars['Boolean']>;
  dutchiePay?: Maybe<Scalars['Boolean']>;
  linx?: Maybe<Scalars['Boolean']>;
  payOnlineChase?: Maybe<Scalars['Boolean']>;
  payOnlineHypur?: Maybe<Scalars['Boolean']>;
  payOnlineMerrco?: Maybe<Scalars['Boolean']>;
  payOnlineMoneris?: Maybe<Scalars['Boolean']>;
  paytender?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaryUpdatePlusSettings = {
  checkoutUrl?: Maybe<Scalars['String']>;
  defaultReturnUrl?: Maybe<Scalars['String']>;
};

export type GqlDispensaryUpdateProfileInput = {
  SpecialLogoImage?: Maybe<Scalars['String']>;
  acceptsDutchiePayTips?: Maybe<Scalars['Boolean']>;
  acceptsTips?: Maybe<Scalars['Boolean']>;
  address?: Maybe<Scalars['String']>;
  aeropay?: Maybe<Scalars['Boolean']>;
  ageVerificationBannerColor?: Maybe<Scalars['String']>;
  ageVerificationBannerHtml?: Maybe<Scalars['String']>;
  alt36?: Maybe<Scalars['Boolean']>;
  applyExciseToPOS?: Maybe<Scalars['Boolean']>;
  arrivalInformationInstructions?: Maybe<Scalars['String']>;
  bannerImage?: Maybe<Scalars['String']>;
  callConfirmation?: Maybe<Scalars['Boolean']>;
  canPay?: Maybe<Scalars['Boolean']>;
  cashOnly?: Maybe<Scalars['Boolean']>;
  cashless?: Maybe<Scalars['Boolean']>;
  categoryLimits?: Maybe<Array<Maybe<GqlDispensaryUpdateCategoryLimits>>>;
  categoryLimitsEnabled?: Maybe<Scalars['Boolean']>;
  categoryPhotos?: Maybe<Array<Maybe<GqlCategoryPhotoInput>>>;
  chain?: Maybe<Scalars['String']>;
  check?: Maybe<Scalars['Boolean']>;
  colorSettings?: Maybe<GqlColorSettingsInput>;
  complianceCode?: Maybe<Scalars['String']>;
  creditCardAtDoor?: Maybe<Scalars['Boolean']>;
  creditCardByPhone?: Maybe<Scalars['Boolean']>;
  customCategoryPhotos?: Maybe<Array<Maybe<GqlCustomCategoryPhotoInput>>>;
  customDomainSettings?: Maybe<GqlDispensaryUpdateCustomDomainSettings>;
  dangerIntervals?: Maybe<GqlDispensaryUpdateDangerIntervals>;
  debitOnly?: Maybe<Scalars['Boolean']>;
  deliveryHours?: Maybe<GqlDispensaryUpdateHours>;
  deliveryMin?: Maybe<Scalars['String']>;
  deliveryMode?: Maybe<DeliveryModes>;
  deliveryZipCodes?: Maybe<Array<Maybe<GqlDeliveryZipCodesInput>>>;
  deliveryZones?: Maybe<Array<Maybe<GqlDeliveryZonesInput>>>;
  description?: Maybe<Scalars['String']>;
  durationEstimateOverrides?: Maybe<GqlDurationEstimatesInput>;
  email?: Maybe<Scalars['String']>;
  emailConfirmation?: Maybe<Scalars['Boolean']>;
  embedBackUrl?: Maybe<Scalars['String']>;
  embedSettings?: Maybe<GqlDispensaryUpdateEmbedSettings>;
  embeddedLogoImage?: Maybe<Scalars['String']>;
  embeddedMenuUrl?: Maybe<Scalars['String']>;
  exciseTax?: Maybe<GqlDispensaryUpdateExciseTax>;
  excludeExciseFromMenu?: Maybe<Scalars['Boolean']>;
  exclusiveExciseTax?: Maybe<Scalars['String']>;
  featureFlags?: Maybe<GqlDispensaryUpdateFeatureFlags>;
  feeTiers?: Maybe<Array<Maybe<GqlDispensaryUpdateFeeTiers>>>;
  hiddenOnDanger?: Maybe<Scalars['Boolean']>;
  hideFromCCT?: Maybe<Scalars['Boolean']>;
  hypur?: Maybe<Scalars['Boolean']>;
  includeSalesTaxInMenu?: Maybe<Scalars['Boolean']>;
  inclusiveSalesTax?: Maybe<Scalars['Boolean']>;
  kioskConfig?: Maybe<GqlDispensaryUpdateKioskConfig>;
  kioskInstructions?: Maybe<Scalars['String']>;
  kioskOrderingEnabled?: Maybe<Scalars['Boolean']>;
  linx?: Maybe<Scalars['Boolean']>;
  listImage?: Maybe<Scalars['String']>;
  logoImage?: Maybe<Scalars['String']>;
  maxDeliveryDistance?: Maybe<Scalars['Float']>;
  medSubjectToExciseTax?: Maybe<Scalars['Boolean']>;
  medicalDispensary?: Maybe<Scalars['Boolean']>;
  menuBannerColor?: Maybe<Scalars['String']>;
  menuBannerHtml?: Maybe<Scalars['String']>;
  menuOrder?: Maybe<Scalars['String']>;
  menuUrl?: Maybe<Scalars['String']>;
  menuWeights?: Maybe<Scalars['String']>;
  messagingSettings?: Maybe<GqlDispensaryMessagingSettingsInput>;
  mixAndMatchPricingWeights?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  offerCurbsidePickup?: Maybe<Scalars['Boolean']>;
  offerDelivery?: Maybe<Scalars['Boolean']>;
  offerDriveThruPickup?: Maybe<Scalars['Boolean']>;
  offerPickup?: Maybe<Scalars['Boolean']>;
  orderTypesConfig?: Maybe<GqlDispensaryUpdateOrderTypesConfig>;
  ordersConfig?: Maybe<GqlDispensaryUpdateOrdersConfig>;
  payInStore?: Maybe<Scalars['Boolean']>;
  payOnlineHypur?: Maybe<Scalars['Boolean']>;
  payOnlineMerrco?: Maybe<Scalars['Boolean']>;
  paymentFees?: Maybe<Array<Maybe<GqlDispensaryUpdatePaymentFees>>>;
  paytender?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  phoneTree?: Maybe<Scalars['String']>;
  pickupHours?: Maybe<GqlDispensaryUpdateHours>;
  pickupMinimum?: Maybe<GqlPickupMinimumInput>;
  plusSettings?: Maybe<GqlDispensaryUpdatePlusSettings>;
  printedMenuSettings?: Maybe<GqlPrintedMenuSettingsInput>;
  recDispensary?: Maybe<Scalars['Boolean']>;
  removeMedicalCardFieldsAtCheckout?: Maybe<Scalars['Boolean']>;
  requirePhotoIdForDelivery?: Maybe<Scalars['Boolean']>;
  requirePhotoIdForPickup?: Maybe<Scalars['Boolean']>;
  requiresDriversLicense?: Maybe<Scalars['Boolean']>;
  requiresDriversLicenseForPickup?: Maybe<Scalars['Boolean']>;
  reservationConfig?: Maybe<GqlReservationConfigInput>;
  salesTax?: Maybe<Scalars['Float']>;
  specialHours?: Maybe<Array<Maybe<GqlSpecialHoursInput>>>;
  specialsSettings?: Maybe<GqlSpecialsSettingsInput>;
  storeSettings?: Maybe<GqlDispensaryUpdateStoreSettings>;
  taxCalculationMethod?: Maybe<Scalars['String']>;
  taxConfig?: Maybe<GqlDispensaryUpdateTaxConfig>;
  timezone?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
};

export type GqlDispensaryUpdateStatusInput = {
  dispensaryId: Scalars['String'];
  status: Scalars['String'];
};

export type GqlDispensaryUpdateStoreSettings = {
  customerMessagingTermsAccepted?: Maybe<Scalars['Boolean']>;
  defaultViewStyle?: Maybe<MenuViewStyles>;
  disableGuestCheckout?: Maybe<Scalars['Boolean']>;
  disableGuestDOB?: Maybe<Scalars['Boolean']>;
  disablePurchaseLimits?: Maybe<Scalars['Boolean']>;
  displayBrands?: Maybe<Scalars['Boolean']>;
  displayPhoneConfirmation?: Maybe<Scalars['Boolean']>;
  dontCombineWeightedProducts?: Maybe<Scalars['Boolean']>;
  dontMapSubcategoriesByProductName?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrderingForDelivery?: Maybe<Scalars['Boolean']>;
  enableAfterHoursOrderingForPickup?: Maybe<Scalars['Boolean']>;
  enableCustomerMessaging?: Maybe<Scalars['Boolean']>;
  enableLLxSaleDiscountSync?: Maybe<Scalars['Boolean']>;
  enableLimitPerCustomer?: Maybe<Scalars['Boolean']>;
  enableMixAndMatchPricingForDelivery?: Maybe<Scalars['Boolean']>;
  enableMixAndMatchPricingForPickup?: Maybe<Scalars['Boolean']>;
  enableOrderStatusEmails?: Maybe<Scalars['Boolean']>;
  enableScheduledOrderingForDelivery?: Maybe<Scalars['Boolean']>;
  enableScheduledOrderingForPickup?: Maybe<Scalars['Boolean']>;
  enableStorefrontAgeGate?: Maybe<Scalars['Boolean']>;
  enableV3?: Maybe<Scalars['Boolean']>;
  hideAddressFromDutchieMain?: Maybe<Scalars['Boolean']>;
  hideEffects?: Maybe<Scalars['Boolean']>;
  hideFilters?: Maybe<Scalars['Boolean']>;
  isolatedMenus?: Maybe<Scalars['Boolean']>;
  keepUncombinedWeights?: Maybe<Scalars['Boolean']>;
  prioritizeStaffPicksInSearchResults?: Maybe<Scalars['Boolean']>;
  quantityLimit?: Maybe<Scalars['Int']>;
  requireEmailAddressForGuestCheckout?: Maybe<Scalars['Boolean']>;
  requireMedCardPhotoForDelivery?: Maybe<Scalars['Boolean']>;
  requireMedCardPhotoForPickup?: Maybe<Scalars['Boolean']>;
  rewardsIntegrationConfiguration?: Maybe<GqlRewards_Integration_ConfigurationInput>;
  stealthMode?: Maybe<Scalars['Boolean']>;
  subscriptions?: Maybe<GqlDispensaries_SubscriptionsInput>;
  v3PreviouslyEnabled?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaryUpdateSuperAdminsInput = {
  name: Scalars['String'];
  role: Dispensaries_SuperAdminRole;
  userId: Scalars['String'];
};

export type GqlDispensaryUpdateTaxConfig = {
  calculationMethod?: Maybe<Scalars['String']>;
  discountTaxOrder?: Maybe<Scalars['String']>;
  taxes?: Maybe<Array<Maybe<GqlDispensaryUpdateTaxConfigTaxes>>>;
  version?: Maybe<Scalars['Int']>;
};

export type GqlDispensaryUpdateTaxConfigTaxApplyTo = {
  hemp?: Maybe<Scalars['Boolean']>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlDispensaryUpdateTaxConfigTaxStage = {
  op?: Maybe<Dispensaries_TaxConfig_Tax_Stage_Ops>;
  type?: Maybe<Dispensaries_TaxConfig_Tax_Stage_Types>;
};

export type GqlDispensaryUpdateTaxConfigTaxes = {
  applyTo?: Maybe<GqlDispensaryUpdateTaxConfigTaxApplyTo>;
  deliveryPolicy?: Maybe<DeliveryPolicy>;
  id?: Maybe<Scalars['String']>;
  includeStateSalesTaxInDestinationRate?: Maybe<Scalars['Boolean']>;
  medical?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  potency?: Maybe<PotencyType>;
  potencyRate?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  recreational?: Maybe<Scalars['Boolean']>;
  stages?: Maybe<Array<Maybe<GqlDispensaryUpdateTaxConfigTaxStage>>>;
  taxBasis?: Maybe<Scalars['String']>;
  type?: Maybe<TaxType>;
};

export type GqlDispensaryUpdateTerminalReceiptOptions = {
  birthdate?: Maybe<Scalars['Boolean']>;
  customerNameOption?: Maybe<Scalars['String']>;
  deliveryAddress?: Maybe<Scalars['Boolean']>;
  disableSocialImpact?: Maybe<Scalars['Boolean']>;
  medical?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['Boolean']>;
  potencyInfo?: Maybe<Scalars['Boolean']>;
};

export type GqlDispensaryUserStreamTokenInput = {
  dispensaryId: Scalars['String'];
  isSuperAdmin?: Maybe<Scalars['Boolean']>;
};

export type GqlDurationEstimateRangeInput = {
  enabled?: Maybe<Scalars['Boolean']>;
  highInMinutes?: Maybe<Scalars['Int']>;
  lowInMinutes?: Maybe<Scalars['Int']>;
};

export type GqlDurationEstimatesInput = {
  delivery?: Maybe<GqlDurationEstimateRangeInput>;
  pickup?: Maybe<GqlDurationEstimateRangeInput>;
};

export type GqlEndSpecialsInput = {
  dispensaryId: Scalars['String'];
  ids: Array<Maybe<Scalars['String']>>;
  source?: Maybe<SpecialSource>;
  triggeredByIntegration: Scalars['Boolean'];
};

export type GqlExportCustomerReportInput = {
  category?: Maybe<Array<Scalars['String']>>;
  customerType?: Maybe<Scalars['String']>;
  dispensaryId: Scalars['String'];
  email: Scalars['String'];
  lastOrder?: Maybe<Scalars['String']>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  subscribed?: Maybe<Scalars['Boolean']>;
};

export type GqlExportOrderReportInput = {
  dispensaryId: Scalars['String'];
  email: Scalars['String'];
  endDate?: Maybe<Scalars['ISODate']>;
  menuType?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['ISODate']>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlFilteredSpecialsInput = {
  current?: Maybe<Scalars['Boolean']>;
  dispensaryId?: Maybe<Scalars['String']>;
  excludeSourcePOS?: Maybe<Scalars['Boolean']>;
  past?: Maybe<Scalars['Boolean']>;
  searchStr?: Maybe<Scalars['String']>;
  sortInput?: Maybe<GqlSpecialsSortInput>;
  specialIds?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlFilteredSpecialsInputV2 = {
  pageInput?: Maybe<GqlSpecialsPageInput>;
  searchStr?: Maybe<Scalars['String']>;
  sortInput?: Maybe<Array<Maybe<GqlSpecialsSortInputV2>>>;
  source?: Maybe<SpecialSource>;
  specialIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  status?: Maybe<SpecialTemporalStatus>;
};

export type GqlGetDeliveryInfoInput = {
  city?: Maybe<Scalars['String']>;
  dispensaryId: Scalars['String'];
  lat: Scalars['Float'];
  lng: Scalars['Float'];
  state?: Maybe<Scalars['String']>;
  zipcode?: Maybe<Scalars['String']>;
};

export type GqlGetOrdersInput = {
  chainId?: Maybe<Scalars['String']>;
  createdAt?: Maybe<GqlDateRange>;
  dispensaryId?: Maybe<Scalars['String']>;
  filterBy?: Maybe<OrderTypes>;
  hasPhone?: Maybe<Scalars['Boolean']>;
  kiosk?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<GqlGetOrderSortInput>;
  status?: Maybe<OrderQueryStatuses>;
};

export type GqlGetTimezoneResult = {
  __typename?: 'getTimezoneResult';
  timezone?: Maybe<Scalars['String']>;
};

export type GqlGuestCustomerInput = {
  birthDay?: Maybe<Scalars['String']>;
  birthMonth?: Maybe<Scalars['String']>;
  birthYear?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  emailNotifications?: Maybe<Scalars['Boolean']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  emailSubscription?: Maybe<Scalars['Boolean']>;
  externalUserId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  photoId?: Maybe<Scalars['String']>;
};

export type GqlImageUploadInput = {
  image?: Maybe<Scalars['String']>;
};

export type GqlImageUrl = {
  __typename?: 'imageUrl';
  url?: Maybe<Scalars['String']>;
};

export type GqlIncrementClicksInput = {
  _id?: Maybe<Scalars['String']>;
};

export type GqlIntegrationCredsInput = {
  adHoc1?: Maybe<Scalars['String']>;
  dispensary?: Maybe<Scalars['String']>;
  integrationName?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

export type GqlLargestOrder = {
  __typename?: 'largestOrder';
  dateOfLargestOrder?: Maybe<Scalars['String']>;
  orderAmount?: Maybe<Scalars['Float']>;
  percentageHigher?: Maybe<Scalars['Float']>;
};

export type GqlListBrandsFilters = {
  active?: Maybe<Scalars['Boolean']>;
  local?: Maybe<Scalars['Boolean']>;
};

export type GqlListBrandsSort = {
  sortBy?: Maybe<ListBrandsSortByEnum>;
  sortDirection?: Maybe<StringSortDirections>;
};

export type GqlListLibraryProductsFilters = {
  status: LibraryProductStatusEnum;
};

export type GqlListLibraryProductsSort = {
  sortBy?: Maybe<ListLibraryProductsSortByEnum>;
  sortDirection?: Maybe<StringSortDirections>;
};

export type GqlLocationInput = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  lat?: Maybe<Scalars['Float']>;
  ln1?: Maybe<Scalars['String']>;
  ln2?: Maybe<Scalars['String']>;
  lng?: Maybe<Scalars['Float']>;
  state?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  streetNumber?: Maybe<Scalars['String']>;
  zipcode?: Maybe<Scalars['String']>;
};

export type GqlMarkOrderAutoPrintedInput = {
  autoPrintSuccess?: Maybe<Scalars['Boolean']>;
  deviceId?: Maybe<Scalars['String']>;
  orderId?: Maybe<Scalars['String']>;
};

export type GqlMarkOrderPosFailedInput = {
  orderId?: Maybe<Scalars['String']>;
  sessionName?: Maybe<Scalars['String']>;
};

export type GqlMarkOrderPrintedInput = {
  action?: Maybe<PrintAction>;
  deviceId?: Maybe<Scalars['String']>;
  durationInMs?: Maybe<Scalars['Int']>;
  endTime?: Maybe<Scalars['ISODateTime']>;
  failed?: Maybe<Scalars['Boolean']>;
  failureReason?: Maybe<Scalars['String']>;
  orderId?: Maybe<Scalars['String']>;
  printId?: Maybe<Scalars['String']>;
  printerPreviouslyConnected?: Maybe<Scalars['Boolean']>;
  startTime?: Maybe<Scalars['ISODateTime']>;
};

export type GqlMarkOrdersBatchPrintedInput = {
  action?: Maybe<PrintAction>;
  deviceId?: Maybe<Scalars['String']>;
  endTime?: Maybe<Scalars['ISODateTime']>;
  orderIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  printId?: Maybe<Scalars['String']>;
};

export type GqlMedicalCardInput = {
  expirationDate?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export enum MenuPricingTypes {
  med = 'med',
  rec = 'rec'
}

export type GqlMenuSectionCreateInput = {
  brandId?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  dispensaryId: Scalars['String'];
  products?: Maybe<Array<Scalars['ID']>>;
  sectionName?: Maybe<Scalars['String']>;
  sectionType: MenuSectionType;
  subcategory?: Maybe<Scalars['String']>;
};

export type GqlMenuSectionUpdateInput = {
  brandId?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  products?: Maybe<Array<Scalars['ID']>>;
  sectionName?: Maybe<Scalars['String']>;
  sectionType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
};

export type GqlMonerisInput = {
  cardToken?: Maybe<Scalars['String']>;
  cvv?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
};

export type GqlOrderStatusEmailSettingsInput = {
  disableConfirmed?: Maybe<Scalars['Boolean']>;
  disableOutForDelivery?: Maybe<Scalars['Boolean']>;
  disableReadyForPickup?: Maybe<Scalars['Boolean']>;
  disableSubmitted?: Maybe<Scalars['Boolean']>;
};

export enum OrderStatuses {
  closed = 'closed',
  confirmed = 'confirmed',
  inTransit = 'inTransit',
  open = 'open'
}

export type GqlOrderType = {
  __typename?: 'orderType';
  name?: Maybe<Scalars['String']>;
  orders?: Maybe<Scalars['Float']>;
  percentage?: Maybe<Scalars['Float']>;
  value?: Maybe<Scalars['Float']>;
};

export type GqlOrdersCreateInput = {
  address?: Maybe<Scalars['String']>;
  appliedRewards?: Maybe<Array<Maybe<GqlRewardInput>>>;
  channelSource?: Maybe<ChannelSources>;
  checkoutId?: Maybe<Scalars['String']>;
  checkoutToken?: Maybe<Scalars['String']>;
  couponId?: Maybe<Scalars['String']>;
  customerState?: Maybe<Scalars['String']>;
  deliveryOption: Scalars['Boolean'];
  destinationTerminal?: Maybe<Scalars['String']>;
  dispensaryId: Scalars['String'];
  driverName?: Maybe<Scalars['String']>;
  driverNumber?: Maybe<Scalars['String']>;
  driversLicense?: Maybe<Scalars['String']>;
  embedded?: Maybe<Scalars['Boolean']>;
  expectedTotal?: Maybe<Scalars['Float']>;
  guestCustomer?: Maybe<GqlGuestCustomerInput>;
  hypurAccessToken?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  includeEnterpriseSpecials?: Maybe<Scalars['Boolean']>;
  isAfterHoursOrder?: Maybe<Scalars['Boolean']>;
  isAnonymous?: Maybe<Scalars['Boolean']>;
  isCurbsidePickupOrder?: Maybe<Scalars['Boolean']>;
  isDriveThruPickupOrder?: Maybe<Scalars['Boolean']>;
  isExternalOrder?: Maybe<Scalars['Boolean']>;
  isGuestOrder?: Maybe<Scalars['Boolean']>;
  isKioskOrder?: Maybe<Scalars['Boolean']>;
  isPTPOT?: Maybe<Scalars['Boolean']>;
  isPreviewOrder?: Maybe<Scalars['Boolean']>;
  location?: Maybe<GqlLocationInput>;
  manualDiscount?: Maybe<GqlUpdateCouponInput>;
  medicalCard?: Maybe<GqlMedicalCardInput>;
  medicalOrder: Scalars['Boolean'];
  mixAndMatch?: Maybe<Scalars['Float']>;
  mobile?: Maybe<Scalars['Boolean']>;
  monerisInput?: Maybe<GqlMonerisInput>;
  paymentMethod?: Maybe<Scalars['String']>;
  paymentMethodId?: Maybe<Scalars['String']>;
  paysafeInput?: Maybe<GqlPaysafeInput>;
  photoId?: Maybe<Scalars['String']>;
  products: Array<GqlProductsInput>;
  reservation?: Maybe<GqlOrderReservationInput>;
  reservationType?: Maybe<Scalars['String']>;
  sardineSessionId?: Maybe<Scalars['String']>;
  saveGuestInfo?: Maybe<Scalars['Boolean']>;
  schedulingData?: Maybe<GqlOrderSchedulingDataInput>;
  specialInstructions?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  tip?: Maybe<Array<Maybe<GqlTipInput>>>;
  userId?: Maybe<Scalars['String']>;
  utmData?: Maybe<GqlUtmDataInput>;
  utmSource?: Maybe<Scalars['String']>;
  variantSource?: Maybe<Scalars['String']>;
};

export type GqlOrdersFilterInput = {
  destinationTerminal?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  dispensaryIds?: Maybe<Array<Scalars['String']>>;
  getDeliveryOrders?: Maybe<Scalars['Boolean']>;
  getKioskOrders?: Maybe<Scalars['Boolean']>;
  getPickupOrders?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  orderId?: Maybe<Scalars['String']>;
  orderSource?: Maybe<Scalars['String']>;
  statuses?: Maybe<Array<Maybe<OrderStatuses>>>;
  userId?: Maybe<Scalars['String']>;
};

export type GqlOrdersPaginationInput = {
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};

export type GqlOrdersSortInput = {
  sortBy: Scalars['String'];
  sortDirection: StringSortDirections;
};

export type GqlOrdersStatusUpdateInput = {
  closedByDriver?: Maybe<Scalars['Boolean']>;
  dispensaryId?: Maybe<Scalars['String']>;
  driverEmail?: Maybe<Scalars['String']>;
  driverName?: Maybe<Scalars['String']>;
  driverNumber?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  noNotification?: Maybe<Scalars['Boolean']>;
  noText?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
  terminal?: Maybe<Scalars['String']>;
};

export enum Orders_CancellationReasonIDs {
  badinfo = 'BADINFO',
  cancelled = 'CANCELLED',
  complianceviolation = 'COMPLIANCEVIOLATION',
  noidentification = 'NOIDENTIFICATION',
  nopayment = 'NOPAYMENT',
  nopickup = 'NOPICKUP',
  other = 'OTHER',
  soldout = 'SOLDOUT'
}

export type GqlPaginationInput = {
  limit?: Maybe<Scalars['Int']>;
  offset: Scalars['Int'];
};

export type GqlPaysafeInput = {
  token?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type GqlPermissionsInput = {
  allLocations?: Maybe<Scalars['Boolean']>;
  analytics?: Maybe<Scalars['Boolean']>;
  billing?: Maybe<Scalars['Boolean']>;
  customers?: Maybe<Scalars['Boolean']>;
  dispensaryIds?: Maybe<Array<Scalars['String']>>;
  driver?: Maybe<Scalars['Boolean']>;
  enterpriseAdmin?: Maybe<Scalars['Boolean']>;
  enterpriseSpecials?: Maybe<Scalars['Boolean']>;
  menu?: Maybe<Scalars['Boolean']>;
  menuReview?: Maybe<Scalars['Boolean']>;
  messaging?: Maybe<Scalars['Boolean']>;
  orders?: Maybe<Scalars['Boolean']>;
  promote?: Maybe<Scalars['Boolean']>;
  settings?: Maybe<Scalars['Boolean']>;
  superMenuReview?: Maybe<Scalars['Boolean']>;
  tasks?: Maybe<Scalars['Boolean']>;
  users?: Maybe<Scalars['Boolean']>;
};

export type GqlPrintOrderInput = {
  deviceId?: Maybe<Scalars['String']>;
  orderId?: Maybe<Scalars['String']>;
};

export type GqlPrintedMenuSettingsInput = {
  Categories?: Maybe<Array<Maybe<GqlPrintedMenuSettings_CategoryEntryInput>>>;
  FooterText?: Maybe<GqlPrintedMenuSettings_TextInput>;
  HeaderText?: Maybe<GqlPrintedMenuSettings_TextInput>;
  MenuType?: Maybe<GqlPrintedMenuSettings_TypeInput>;
  Order?: Maybe<GqlPrintedMenuSettings_TypeInput>;
  PageBreaks?: Maybe<GqlPrintedMenuSettings_PageBreaksInput>;
  Photos?: Maybe<GqlPrintedMenuSettings_PhotosInput>;
  StrainTypes?: Maybe<Array<Maybe<GqlPrintedMenuSettings_StrainTypesEntryInput>>>;
};

export type GqlProductCreateInput = {
  AdditionalOptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  CBD?: Maybe<Scalars['String']>;
  CBDContent?: Maybe<GqlProductsPotencyInput>;
  Description?: Maybe<Scalars['String']>;
  DispensaryID?: Maybe<Scalars['String']>;
  Image?: Maybe<Scalars['String']>;
  Name?: Maybe<Scalars['String']>;
  Options?: Maybe<Array<Maybe<Scalars['String']>>>;
  Prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  Status?: Maybe<Scalars['String']>;
  THC?: Maybe<Scalars['String']>;
  THCContent?: Maybe<GqlProductsPotencyInput>;
  _id?: Maybe<Scalars['String']>;
  addedUsingCCT?: Maybe<Scalars['Boolean']>;
  bottleDepositTaxCents?: Maybe<Scalars['Int']>;
  brandDescription?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['String']>;
  brandLogo?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  cName?: Maybe<Scalars['String']>;
  cannabinoidsV2?: Maybe<Array<Maybe<GqlProducts_CannabinoidInputV2>>>;
  comingSoon?: Maybe<Scalars['Boolean']>;
  createdBy?: Maybe<Scalars['String']>;
  dateCreated?: Maybe<Scalars['String']>;
  descriptionHtml?: Maybe<Scalars['String']>;
  duplicatedProductId?: Maybe<Scalars['String']>;
  effects?: Maybe<Scalars['JSON']>;
  featured?: Maybe<GqlProducts_FeaturedInput>;
  images?: Maybe<Array<Maybe<GqlProducts_ImagesInput>>>;
  integrationKey?: Maybe<Scalars['String']>;
  limitsPerCustomer?: Maybe<Array<Maybe<GqlProducts_LimitPerCustomerInput>>>;
  manualInventory?: Maybe<Array<Maybe<GqlProducts_ManualInventoryInput>>>;
  medicalOnly?: Maybe<Scalars['Boolean']>;
  medicalPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  medicalSpecialPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  originalPrices?: Maybe<Array<Maybe<Scalars['String']>>>;
  overrides?: Maybe<Array<Maybe<Scalars['String']>>>;
  pastCNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  preCropImage?: Maybe<Scalars['String']>;
  qaRejectionReason?: Maybe<Scalars['String']>;
  recOnly?: Maybe<Scalars['Boolean']>;
  recPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  recSpecialPrices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  score?: Maybe<Scalars['Float']>;
  special?: Maybe<Scalars['Boolean']>;
  stockImage?: Maybe<Scalars['String']>;
  stockImageAliases?: Maybe<Scalars['String']>;
  stockImageCategory?: Maybe<Scalars['String']>;
  strainType?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  terpenes?: Maybe<Array<Maybe<GqlProducts_TerpeneInput>>>;
  type?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['Float']>;
};

export enum ProductsFilterByOption {
  highCbd = 'highCBD',
  highPotency = 'highPotency',
  newProducts = 'newProducts'
}

export type GqlProductsFilterInput = {
  CBDContent?: Maybe<GqlProductsPotencyInput>;
  Status?: Maybe<Scalars['String']>;
  THCContent?: Maybe<GqlProductsPotencyInput>;
  brandId?: Maybe<Scalars['String']>;
  brandIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  bypassKioskThresholds?: Maybe<Scalars['Boolean']>;
  bypassOnlineThresholds?: Maybe<Scalars['Boolean']>;
  bypassSpecials?: Maybe<Scalars['Boolean']>;
  bypassThresholds?: Maybe<Scalars['Boolean']>;
  cName?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  filterBy?: Maybe<ProductsFilterByOption>;
  includeEnterpriseSpecials?: Maybe<Scalars['Boolean']>;
  inventoryFilters?: Maybe<GqlInventoryFiltersInput>;
  isDefaultSort?: Maybe<Scalars['Boolean']>;
  isKioskMenu?: Maybe<Scalars['Boolean']>;
  isOnSpecial?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  option?: Maybe<Scalars['String']>;
  pricingType?: Maybe<MenuPricingTypes>;
  productId?: Maybe<Scalars['String']>;
  productIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  query?: Maybe<Scalars['String']>;
  removeProductsBelowOptionThresholds?: Maybe<Scalars['Boolean']>;
  sortBy?: Maybe<Scalars['String']>;
  sortDirection?: Maybe<Scalars['Int']>;
  specialId?: Maybe<Scalars['String']>;
  specialType?: Maybe<Scalars['String']>;
  staffPicks?: Maybe<Scalars['Boolean']>;
  strainTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  subcategories?: Maybe<Array<Maybe<Scalars['String']>>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
  useCache?: Maybe<Scalars['Boolean']>;
};

export type GqlProductsInput = {
  AdditionalOptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  Options?: Maybe<Array<Maybe<Scalars['String']>>>;
  Prices?: Maybe<Array<Maybe<Scalars['Float']>>>;
  additionalOption?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  image?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  option?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  quantity: Scalars['Int'];
  special?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
};

export type GqlProductsPotencyInput = {
  range?: Maybe<Array<Maybe<Scalars['Float']>>>;
  unit: Scalars['String'];
  value?: Maybe<Scalars['String']>;
};

export type GqlQueryInfoType = {
  __typename?: 'queryInfoType';
  perPage?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GqlRequestAccessCodeInput = {
  requestedAt?: Maybe<Scalars['String']>;
};

export type GqlResetPasswordInput = {
  password?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

export type GqlRetailerAgentFilterInput = {
  position?: Maybe<Scalars['String']>;
  retailerId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type GqlSalesOrdersQueryResponse = {
  __typename?: 'salesOrdersQueryResponse';
  ordersByDate?: Maybe<Array<Maybe<GqlAnalyticsOrdersByDate>>>;
  percentChange?: Maybe<Scalars['Float']>;
  revenueChange?: Maybe<Scalars['Float']>;
  totalOrders?: Maybe<Scalars['Float']>;
  totalSales?: Maybe<Scalars['Float']>;
};

export type GqlSearchBrandsFilters = {
  active?: Maybe<Scalars['Boolean']>;
  dispensaryId?: Maybe<Scalars['String']>;
  hasCollisions?: Maybe<Scalars['Boolean']>;
  hasParent?: Maybe<Scalars['Boolean']>;
  local?: Maybe<Scalars['Boolean']>;
  missingDescription?: Maybe<Scalars['Boolean']>;
  missingLogo?: Maybe<Scalars['Boolean']>;
  parentBrandId?: Maybe<Scalars['ID']>;
};

export type GqlSearchBrandsInput = {
  filters?: Maybe<GqlSearchBrandsFilters>;
  pagination?: Maybe<GqlPaginationInput>;
  search?: Maybe<Scalars['String']>;
  sort?: Maybe<GqlSearchBrandsSort>;
};

export type GqlSearchBrandsSort = {
  sortBy: BrandSortByEnum;
  sortDirection: StringSortDirections;
};

export type GqlSearchLibraryProductsFilters = {
  brandIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['Float']>;
  stateLibrary?: Maybe<Scalars['String']>;
  updatedByBrand?: Maybe<Scalars['Boolean']>;
};

export type GqlSearchLibraryProductsSort = {
  sortBy: LibraryProductSortByEnum;
  sortDirection: StringSortDirections;
};

export type GqlSecureImageUrlInput = {
  id?: Maybe<Scalars['String']>;
};

export type GqlSetPasswordInput = {
  password?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

export type GqlSortInput = {
  sortBy: Scalars['String'];
  sortDirection: Scalars['Int'];
};

export type GqlSpecialHoursDayInput = {
  date: Scalars['String'];
  deliveryHours?: Maybe<GqlDispensaryUpdateHoursDay>;
  pickupHours?: Maybe<GqlDispensaryUpdateHoursDay>;
};

export type GqlSpecialHoursInput = {
  endDate: Scalars['String'];
  hoursPerDay?: Maybe<Array<Maybe<GqlSpecialHoursDayInput>>>;
  name: Scalars['String'];
  startDate: Scalars['String'];
};

export type GqlSpecialsInputRecurring = {
  days?: Maybe<Array<Maybe<Scalars['Int']>>>;
  endDate?: Maybe<Scalars['String']>;
  endTime?: Maybe<Scalars['String']>;
  setEndDate?: Maybe<Scalars['Boolean']>;
  startTime?: Maybe<Scalars['String']>;
};

export type GqlSpecialsPageInput = {
  limit?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

export type GqlSpecialsSortInput = {
  limit?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<Scalars['JSON']>;
};

export type GqlSpecialsSortInputV2 = {
  direction: Scalars['Int'];
  key: SpecialSortKey;
};

export type GqlStrainInput = {
  aromas?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  effects?: Maybe<Array<Maybe<Scalars['String']>>>;
  imageUrl?: Maybe<Scalars['String']>;
  labels?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  potentialHealthBenefits?: Maybe<Array<Maybe<Scalars['String']>>>;
  ratio?: Maybe<Scalars['String']>;
  terpenes?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlStrainsFilterInput = {
  missingDescription?: Maybe<Scalars['Boolean']>;
  missingImage?: Maybe<Scalars['Boolean']>;
  searchStr?: Maybe<Scalars['String']>;
};

export type GqlStrainsSortInput = {
  sortBy: StrainSortByEnum;
  sortDirection: StringSortDirections;
};

export type GqlSubscriptionsFilterInput = {
  dispensaryId?: Maybe<Scalars['String']>;
};

export type GqlSuperAdminCustomersFilter = {
  search?: Maybe<Scalars['String']>;
};

export type GqlSuperProductsInput = {
  brandIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<Scalars['String']>;
  connectionStatus: Scalars['String'];
  dispensaryID?: Maybe<Scalars['String']>;
  dispensaryState?: Maybe<Scalars['String']>;
  page: Scalars['Int'];
  perPage: Scalars['Int'];
  reviewed?: Maybe<Scalars['String']>;
  score: Scalars['Float'];
  search?: Maybe<Scalars['String']>;
  sortBy: Scalars['String'];
  sortDirection: Scalars['Int'];
  status?: Maybe<Scalars['String']>;
  thresholdFilter?: Maybe<Scalars['String']>;
};

export type GqlTerpeneInput = {
  aliasList?: Maybe<Array<Maybe<Scalars['String']>>>;
  aromas?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  effects?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  potentialHealthBenefits?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlTerpenesFilter = {
  searchStr?: Maybe<Scalars['String']>;
};

export type GqlTerpenesSort = {
  sortBy: Scalars['String'];
  sortDirection: Scalars['String'];
};

export type GqlTipInput = {
  dollar?: Maybe<Scalars['Float']>;
  percent?: Maybe<Scalars['Float']>;
};

export type GqlTopSeller = {
  __typename?: 'topSeller';
  brandName?: Maybe<Scalars['String']>;
  productImage?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  totalSale?: Maybe<Scalars['Float']>;
};

export type GqlTotalSales = {
  __typename?: 'totalSales';
  onlineOrdersTotal?: Maybe<Scalars['Float']>;
  salesTotal?: Maybe<Scalars['Float']>;
};

export type GqlUnsubscribeDispensaryCustomersInput = {
  _id?: Maybe<Array<Maybe<Scalars['String']>>>;
  dispensaryId: Scalars['String'];
};

export type GqlUpdateCouponInput = {
  _id?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  applicableCategories?: Maybe<Array<Maybe<GqlCopuonApplicableCategoryInput>>>;
  code?: Maybe<Scalars['String']>;
  expDate?: Maybe<Scalars['String']>;
  fixedDiscountInCents?: Maybe<Scalars['Int']>;
  numAllowedUses?: Maybe<Scalars['Int']>;
  numUses?: Maybe<Scalars['Int']>;
  oneUsePerCustomer?: Maybe<Scalars['Boolean']>;
  percentDiscount?: Maybe<Scalars['Float']>;
  reimbursed?: Maybe<Scalars['Boolean']>;
  restrictions?: Maybe<GqlCouponRestrictionsInput>;
  usedBy?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GqlUpdateDeviceInput = {
  _id?: Maybe<Scalars['String']>;
  config?: Maybe<GqlDevice_Config_Input>;
  nickname?: Maybe<Scalars['String']>;
};

export type GqlUpdateProductSortInput = {
  dispensaryId?: Maybe<Scalars['String']>;
  menuOrder?: Maybe<Scalars['String']>;
  menuSortSetting?: Maybe<GqlMenuSortSettingInput>;
  sortProductProxies?: Maybe<Array<Maybe<GqlSortProductProxy>>>;
};

export type GqlUserIdExistsInput = {
  email?: Maybe<Scalars['String']>;
};

export type GqlUserUnsubscribeInput = {
  _id?: Maybe<Scalars['String']>;
  dispensaryUnsubscribeId?: Maybe<Scalars['String']>;
};

export type GqlUsersCreateInput = {
  chain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  dispensaryId: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  legacyChain?: Maybe<Scalars['Boolean']>;
  permissions?: Maybe<GqlPermissionsInput>;
  phone?: Maybe<Scalars['String']>;
  roleAtDispensary?: Maybe<DispensaryRoles>;
  textNotifications?: Maybe<Scalars['Boolean']>;
};

export type GqlUsersDeleteInput = {
  _id?: Maybe<Scalars['String']>;
};

export type GqlUsersFilterInput = {
  availableRetailerAgentPositions?: Maybe<Array<Maybe<RetailerAgentPositions>>>;
  chainID?: Maybe<Scalars['String']>;
  dispensaryId?: Maybe<Scalars['String']>;
  driver?: Maybe<Scalars['Boolean']>;
  superadmin?: Maybe<Scalars['Boolean']>;
};

export type GqlUsersUpdateInput = {
  _id?: Maybe<Scalars['String']>;
  audioNotificationsOnNewArrivalsDisabled?: Maybe<Scalars['Boolean']>;
  audioNotificationsOnNewOrdersDisabled?: Maybe<Scalars['Boolean']>;
  browserNotification?: Maybe<Scalars['Boolean']>;
  chain?: Maybe<Scalars['String']>;
  desktopNotification?: Maybe<Scalars['Boolean']>;
  dispensaryId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  emailNotifications?: Maybe<Scalars['Boolean']>;
  emailOptIn?: Maybe<Scalars['Boolean']>;
  fullName?: Maybe<Scalars['String']>;
  isWeeklyReportEnabled?: Maybe<Scalars['Boolean']>;
  legacyChain?: Maybe<Scalars['Boolean']>;
  permissions?: Maybe<GqlPermissionsInput>;
  phone?: Maybe<Scalars['String']>;
  roleAtDispensary?: Maybe<DispensaryRoles>;
  textNotifications?: Maybe<Scalars['Boolean']>;
};

export type GqlUtmDataInput = {
  utm_campaign?: Maybe<Scalars['String']>;
  utm_content?: Maybe<Scalars['String']>;
  utm_medium?: Maybe<Scalars['String']>;
  utm_source?: Maybe<Scalars['String']>;
  utm_term?: Maybe<Scalars['String']>;
};

export type GqlV4Condition = {
  __typename?: 'v4Condition';
  conditionType?: Maybe<ConditionType>;
  exclusions?: Maybe<Array<Maybe<GqlV4Restriction>>>;
  groupBySku?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  includeCannabis?: Maybe<Scalars['Boolean']>;
  inclusions?: Maybe<Array<Maybe<GqlV4Restriction>>>;
  thresholds?: Maybe<Array<Maybe<GqlThreshold>>>;
};

export type GqlV4ConditionInput = {
  conditionType?: Maybe<ConditionType>;
  exclusions?: Maybe<Array<Maybe<GqlV4RestrictionInput>>>;
  groupBySku?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  includeCannabis?: Maybe<Scalars['Boolean']>;
  inclusions?: Maybe<Array<Maybe<GqlV4RestrictionInput>>>;
  thresholds?: Maybe<Array<Maybe<GqlThresholdInput>>>;
};

export type GqlV4Restriction = {
  __typename?: 'v4Restriction';
  brandId?: Maybe<Scalars['String']>;
  categoryId?: Maybe<Scalars['String']>;
  categoryName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  pricingTierId?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  restrictionType?: Maybe<RestrictionType>;
  strainId?: Maybe<Scalars['String']>;
  subcategoryId?: Maybe<Scalars['String']>;
  subcategoryName?: Maybe<Scalars['String']>;
  tagId?: Maybe<Scalars['String']>;
  vendorId?: Maybe<Scalars['String']>;
  weight?: Maybe<GqlWeight>;
};

export type GqlV4RestrictionInput = {
  brandId?: Maybe<Scalars['String']>;
  categoryId?: Maybe<Scalars['String']>;
  categoryName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  pricingTierId?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  restrictionType?: Maybe<RestrictionType>;
  strainId?: Maybe<Scalars['String']>;
  subcategoryId?: Maybe<Scalars['String']>;
  subcategoryName?: Maybe<Scalars['String']>;
  tagId?: Maybe<Scalars['String']>;
  vendorId?: Maybe<Scalars['String']>;
  weight?: Maybe<GqlWeightInput>;
};

export type GqlV4Reward = {
  __typename?: 'v4Reward';
  amountOff?: Maybe<Scalars['Int']>;
  discountType?: Maybe<DiscountType>;
  discountedPrice?: Maybe<Scalars['Int']>;
  exclusions?: Maybe<Array<Maybe<GqlV4Restriction>>>;
  groupBySku?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  includeNonCannabis?: Maybe<Scalars['Boolean']>;
  inclusions?: Maybe<Array<Maybe<GqlV4Restriction>>>;
  percentDiscount?: Maybe<Scalars['Float']>;
  rangeBehavior?: Maybe<RangeBehaviors>;
  rewardType?: Maybe<RewardType>;
  thresholds?: Maybe<Array<Maybe<GqlThreshold>>>;
};

export type GqlV4RewardInput = {
  amountOff?: Maybe<Scalars['Int']>;
  discountType?: Maybe<DiscountType>;
  discountedPrice?: Maybe<Scalars['Int']>;
  exclusions?: Maybe<Array<Maybe<GqlV4RestrictionInput>>>;
  groupBySku?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  includeNonCannabis?: Maybe<Scalars['Boolean']>;
  inclusions?: Maybe<Array<Maybe<GqlV4RestrictionInput>>>;
  percentDiscount?: Maybe<Scalars['Float']>;
  rangeBehavior?: Maybe<RangeBehaviors>;
  rewardType?: Maybe<RewardType>;
  thresholds?: Maybe<Array<Maybe<GqlThresholdInput>>>;
};

export type GqlV4Special = {
  __typename?: 'v4Special';
  allowedUsesPerUser?: Maybe<Scalars['Int']>;
  applicableToItemsOnSpecial?: Maybe<Scalars['Boolean']>;
  applicationMethod?: Maybe<SpecialApplicationMethodTypes>;
  cipher?: Maybe<Scalars['JSON']>;
  code?: Maybe<Scalars['String']>;
  conditionLogicOperator?: Maybe<LogicOperator>;
  conditions?: Maybe<Array<Maybe<GqlV4Condition>>>;
  consumerGroupIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt?: Maybe<Scalars['ISODateTime']>;
  createdBy?: Maybe<Scalars['String']>;
  discountPrecedence?: Maybe<Scalars['String']>;
  dispensaries?: Maybe<Array<Maybe<Scalars['String']>>>;
  dispensaryId?: Maybe<Scalars['String']>;
  displayRank?: Maybe<Scalars['Int']>;
  email?: Maybe<GqlSpecialEmail>;
  endedAt?: Maybe<Scalars['ISODateTime']>;
  endedBy?: Maybe<Scalars['String']>;
  enterpriseId?: Maybe<Scalars['String']>;
  enterpriseSpecialId?: Maybe<Scalars['String']>;
  firstTimeConsumerOnly?: Maybe<Scalars['Boolean']>;
  generatedByPOS?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  inactiveDispensaryIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  isAvailableOnline?: Maybe<Scalars['Boolean']>;
  loyaltyPointsToRedeem?: Maybe<Scalars['Int']>;
  manualDefaultApplyTo?: Maybe<ManualDefaultApplyTo>;
  menuDisplay?: Maybe<GqlSpecialMenuDisplay>;
  menuType?: Maybe<SpecialMenuType>;
  name?: Maybe<Scalars['String']>;
  orderType?: Maybe<OrderType>;
  origin?: Maybe<Scalars['String']>;
  originId?: Maybe<Scalars['String']>;
  quantityUsed?: Maybe<Scalars['Int']>;
  redemptionLimitPerCart?: Maybe<Scalars['Int']>;
  redemptionLimitPerUser?: Maybe<Scalars['Int']>;
  reimbursed?: Maybe<Scalars['Boolean']>;
  requireManagerApproval?: Maybe<Scalars['Boolean']>;
  rewardLogicOperator?: Maybe<LogicOperator>;
  rewards?: Maybe<Array<Maybe<GqlV4Reward>>>;
  schedule?: Maybe<GqlSpecialSchedule>;
  scope?: Maybe<Scalars['String']>;
  specialType?: Maybe<SpecialType>;
  specialVersion?: Maybe<Scalars['Int']>;
  stackingBehavior?: Maybe<StackingBehavior>;
  status?: Maybe<SpecialStatus>;
  totalAllowedUses?: Maybe<Scalars['Int']>;
  updatedAt?: Maybe<Scalars['ISODateTime']>;
  updatedBy?: Maybe<Scalars['String']>;
  usedBy?: Maybe<Array<Maybe<Scalars['String']>>>;
  version?: Maybe<Scalars['Int']>;
};

export type GqlPersistCheckoutV2MutationVariables = Exact<{
  order: Scalars['JSON'];
  dispensaryId: Scalars['String'];
  token?: Maybe<Scalars['String']>;
}>;


export type GqlPersistCheckoutV2Mutation = (
  { __typename?: 'Mutation' }
  & { persistCheckoutV2?: Maybe<(
    { __typename?: 'PersistCheckoutResponse' }
    & Pick<GqlPersistCheckoutResponse, 'checkoutToken'>
  )> }
);

export type GqlPersistCheckoutMutationVariables = Exact<{
  order: Scalars['JSON'];
  dispensaryId: Scalars['String'];
  token: Scalars['String'];
}>;


export type GqlPersistCheckoutMutation = (
  { __typename?: 'Mutation' }
  & { persistCheckout?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlReservationConfigQueryQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlReservationConfigQueryQuery = (
  { __typename?: 'Query' }
  & { filteredDispensaries?: Maybe<Array<Maybe<(
    { __typename?: 'Dispensaries' }
    & { reservationConfig?: Maybe<(
      { __typename?: 'ReservationConfig' }
      & Pick<GqlReservationConfig, 'enabled'>
      & { pickup?: Maybe<(
        { __typename?: 'ReservationOptionsForOrderType' }
        & Pick<GqlReservationOptionsForOrderType, 'advancedDayOrderingEnabled' | 'advancedDayOrderingLimit' | 'nextAvailableInMinutes'>
      )>, delivery?: Maybe<(
        { __typename?: 'ReservationOptionsForOrderType' }
        & Pick<GqlReservationOptionsForOrderType, 'advancedDayOrderingEnabled' | 'advancedDayOrderingLimit' | 'nextAvailableInMinutes'>
      )> }
    )> }
  )>>> }
);

export type GqlBrandDispensaryFragmentFragment = (
  { __typename?: 'Brand' }
  & { dispensary?: Maybe<(
    { __typename?: 'Dispensaries' }
    & Pick<GqlDispensaries, 'id' | 'name'>
  )> }
);

export type GqlBrandFragmentForDropdownFragment = (
  { __typename?: 'Brand' }
  & Pick<GqlBrand, '_id' | 'id' | 'name' | 'imageUrl'>
);

export type GqlBrandFragmentFragment = (
  { __typename?: 'Brand' }
  & Pick<GqlBrand, '_id' | 'aliasList' | 'createdAt' | 'description' | 'id' | 'imageUrl' | 'libraryProductsCount' | 'name' | 'productsCount' | 'updatedAt'>
);

export type GqlCreateBrandMutationVariables = Exact<{
  brand: GqlBrandInput;
}>;


export type GqlCreateBrandMutation = (
  { __typename?: 'Mutation' }
  & { createBrandV2?: Maybe<(
    { __typename?: 'Brand' }
    & GqlBrandFragmentFragment
  )> }
);

export type GqlDeleteBrandMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlDeleteBrandMutation = (
  { __typename?: 'Mutation' }
  & { deleteBrand?: Maybe<(
    { __typename?: 'Brand' }
    & Pick<GqlBrand, '_id'>
  )> }
);

export type GqlUpdateBrandMutationVariables = Exact<{
  id: Scalars['String'];
  brand: GqlBrandInput;
}>;


export type GqlUpdateBrandMutation = (
  { __typename?: 'Mutation' }
  & { updateBrandV2?: Maybe<(
    { __typename?: 'Brand' }
    & GqlBrandFragmentFragment
  )> }
);

export type GqlBrandsForDropdownQueryVariables = Exact<{
  dispensaryId?: Maybe<Scalars['String']>;
  searchString?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  parentBrandId?: Maybe<Scalars['ID']>;
  hasParent?: Maybe<Scalars['Boolean']>;
}>;


export type GqlBrandsForDropdownQuery = (
  { __typename?: 'Query' }
  & { searchBrandsV2?: Maybe<(
    { __typename?: 'BrandList' }
    & { brands: Array<Maybe<(
      { __typename?: 'Brand' }
      & Pick<GqlBrand, 'isGlobal'>
      & GqlBrandFragmentForDropdownFragment
    )>> }
  )> }
);

export type GqlGetBrandQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlGetBrandQuery = (
  { __typename?: 'Query' }
  & { getBrand?: Maybe<(
    { __typename?: 'Brand' }
    & Pick<GqlBrand, 'isGlobal' | 'source' | 'creatorUserId' | 'parentBrandId'>
    & { dispensary?: Maybe<(
      { __typename?: 'Dispensaries' }
      & Pick<GqlDispensaries, 'name' | 'id'>
    )> }
    & GqlBrandFragmentFragment
  )> }
);

export type GqlSuperBrandsIndexQueryVariables = Exact<{
  filters?: Maybe<GqlSearchBrandsFilters>;
  pagination?: Maybe<GqlPaginationInput>;
  search?: Maybe<Scalars['String']>;
  sort?: Maybe<GqlSearchBrandsSort>;
}>;


export type GqlSuperBrandsIndexQuery = (
  { __typename?: 'Query' }
  & { searchBrandsV2?: Maybe<(
    { __typename?: 'BrandList' }
    & { brands: Array<Maybe<(
      { __typename?: 'Brand' }
      & GqlBrandFragmentFragment
      & GqlBrandDispensaryFragmentFragment
    )>>, queryInfo?: Maybe<(
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    )> }
  )> }
);

export type GqlBucketListFragmentFragment = (
  { __typename?: 'Bucket' }
  & Pick<GqlBucket, 'checkedOutAt' | 'completedReviewsCount' | 'id' | 'name' | 'productsCount' | 'teamName'>
  & { createdBy?: Maybe<(
    { __typename?: 'Users' }
    & Pick<GqlUsers, '_id' | 'firstName' | 'lastName'>
  )>, checkedOutBy?: Maybe<(
    { __typename?: 'Users' }
    & Pick<GqlUsers, '_id' | 'firstName' | 'lastName'>
  )> }
);

export type GqlGetCannabinoidsQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlGetCannabinoidsQuery = (
  { __typename?: 'Query' }
  & { getCannabinoids: Array<(
    { __typename?: 'Cannabinoid' }
    & Pick<GqlCannabinoid, 'name' | 'id'>
  )> }
);

export type GqlCouponFragmentFragment = (
  { __typename?: 'Coupons' }
  & Pick<GqlCoupons, '_id' | 'active' | 'addedDate' | 'code' | 'dispensaryId' | 'expDate' | 'fixedDiscountInCents' | 'numAllowedUses' | 'numUses' | 'percentDiscount' | 'oneUsePerCustomer' | 'usedBy'>
  & { applicableCategories?: Maybe<Array<Maybe<(
    { __typename?: 'couponApplicableCategory' }
    & Pick<GqlCouponApplicableCategory, 'category' | 'subcategory'>
  )>>>, restrictions?: Maybe<(
    { __typename?: 'couponRestrictions' }
    & Pick<GqlCouponRestrictions, 'minimumPurchase' | 'minimumPurchaseInCents' | 'noSpecials'>
  )> }
);

export type GqlCreateCouponV2MutationVariables = Exact<{
  input: GqlCreateCouponInput;
}>;


export type GqlCreateCouponV2Mutation = (
  { __typename?: 'Mutation' }
  & { createCouponV2?: Maybe<(
    { __typename?: 'Coupons' }
    & GqlCouponFragmentFragment
  )> }
);

export type GqlDeleteCouponMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlDeleteCouponMutation = (
  { __typename?: 'Mutation' }
  & { deleteCoupon?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlDeleteCouponV2MutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlDeleteCouponV2Mutation = (
  { __typename?: 'Mutation' }
  & { deleteCouponV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlUpdateCouponMutationVariables = Exact<{
  input: GqlUpdateCouponInput;
}>;


export type GqlUpdateCouponMutation = (
  { __typename?: 'Mutation' }
  & { updateCoupon?: Maybe<(
    { __typename?: 'Coupons' }
    & GqlCouponFragmentFragment
  )> }
);

export type GqlFilteredCouponsQueryVariables = Exact<{
  filter?: Maybe<GqlCouponsFilterInput>;
  sort?: Maybe<GqlCouponsSortInput>;
  pagination?: Maybe<GqlCouponsPaginationInput>;
}>;


export type GqlFilteredCouponsQuery = (
  { __typename?: 'Query' }
  & { filteredCoupons?: Maybe<(
    { __typename?: 'CouponList' }
    & { queryInfo?: Maybe<(
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    )>, coupons?: Maybe<Array<Maybe<(
      { __typename?: 'Coupons' }
      & Pick<GqlCoupons, 'dispensary' | 'reimbursed'>
      & GqlCouponFragmentFragment
    )>>> }
  )> }
);

export type GqlClearAllCurbsideArrivalsMutationVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlClearAllCurbsideArrivalsMutation = (
  { __typename?: 'Mutation' }
  & { clearAllCurbsideArrivals: (
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  ) }
);

export type GqlClearCurbsideArrivalMutationVariables = Exact<{
  arrivalId: Scalars['String'];
}>;


export type GqlClearCurbsideArrivalMutation = (
  { __typename?: 'Mutation' }
  & { clearCurbsideArrival: (
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  ) }
);

export type GqlMarkCurbsideArrivalArrivedV2MutationVariables = Exact<{
  token: Scalars['String'];
}>;


export type GqlMarkCurbsideArrivalArrivedV2Mutation = (
  { __typename?: 'Mutation' }
  & { markCurbsideArrivalArrivedV2: (
    { __typename?: 'CurbsideArrival' }
    & Pick<GqlCurbsideArrival, 'id'>
  ) }
);

export type GqlUpdateCurbsideArrivalV2MutationVariables = Exact<{
  token: Scalars['String'];
  arrivalInformation: Scalars['String'];
}>;


export type GqlUpdateCurbsideArrivalV2Mutation = (
  { __typename?: 'Mutation' }
  & { updateCurbsideArrivalV2?: Maybe<(
    { __typename?: 'CurbsideArrival' }
    & Pick<GqlCurbsideArrival, 'id'>
  )> }
);

export type GqlGetCurbsideArrivalByTokenQueryVariables = Exact<{
  token: Scalars['String'];
}>;


export type GqlGetCurbsideArrivalByTokenQuery = (
  { __typename?: 'Query' }
  & { getCurbsideArrivalByToken?: Maybe<(
    { __typename?: 'CurbsideArrival' }
    & Pick<GqlCurbsideArrival, 'id' | 'arrivalInformation' | 'arrivedAt' | 'clearedAt' | 'createdAt' | 'updatedAt'>
    & { dispensary?: Maybe<(
      { __typename?: 'Dispensaries' }
      & Pick<GqlDispensaries, 'id' | 'phone' | 'arrivalInformationInstructions'>
      & { orderTypesConfigV2?: Maybe<(
        { __typename?: 'OrderTypesConfigV2' }
        & { curbsidePickup?: Maybe<(
          { __typename?: 'CurbsidePickupOrderingSettings' }
          & Pick<GqlCurbsidePickupOrderingSettings, 'arrivalInformationInstructions'>
        )> }
      )> }
    )> }
  )> }
);

export type GqlGetCurbsideArrivalsForBannerQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlGetCurbsideArrivalsForBannerQuery = (
  { __typename?: 'Query' }
  & { getCurbsideArrivals: Array<(
    { __typename?: 'CurbsideArrival' }
    & Pick<GqlCurbsideArrival, 'id'>
  )> }
);

export type GqlGetCurbsideArrivalsQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlGetCurbsideArrivalsQuery = (
  { __typename?: 'Query' }
  & { getCurbsideArrivals: Array<(
    { __typename?: 'CurbsideArrival' }
    & Pick<GqlCurbsideArrival, 'id' | 'arrivalInformation' | 'arrivedAt' | 'clearedAt' | 'createdAt' | 'updatedAt'>
    & { order?: Maybe<(
      { __typename?: 'Orders' }
      & Pick<GqlOrders, 'id' | 'orderId'>
      & { customer?: Maybe<(
        { __typename?: 'Orders_customer' }
        & { profile?: Maybe<(
          { __typename?: 'Orders_customer_profile' }
          & Pick<GqlOrders_Customer_Profile, 'firstName' | 'lastName' | 'phone'>
        )> }
      )>, guestCustomer?: Maybe<(
        { __typename?: 'Orders_guestCustomer' }
        & Pick<GqlOrders_GuestCustomer, 'firstName' | 'lastName' | 'phone'>
      )> }
    )> }
  )> }
);

export type GqlUpdateCustomerSubscriptionMutationVariables = Exact<{
  customerId: Scalars['String'];
  subscribed: Scalars['Boolean'];
}>;


export type GqlUpdateCustomerSubscriptionMutation = (
  { __typename?: 'Mutation' }
  & { updateCustomerSubscription?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlDeviceFragmentFragment = (
  { __typename?: 'Devices' }
  & Pick<GqlDevices, '_id' | 'accessCode' | 'autoPrintDevice' | 'buildNumber' | 'dispensaryId' | 'lastSeenAt' | 'nickname' | 'online' | 'printerConnected' | 'updatedAt' | 'versionNumber'>
  & { config?: Maybe<(
    { __typename?: 'Device_config' }
    & Pick<GqlDevice_Config, 'getDeliveryOrders' | 'getKioskOrders' | 'getPickupOrders' | 'orderSource'>
  )> }
);

export type GqlGetDevicesQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlGetDevicesQuery = (
  { __typename?: 'Query' }
  & { getDevices: Array<(
    { __typename?: 'Devices' }
    & GqlDeviceFragmentFragment
  )> }
);

export type GqlGetKioskTerminalsQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlGetKioskTerminalsQuery = (
  { __typename?: 'Query' }
  & { getKioskTerminals: Array<(
    { __typename?: 'KioskTerminal' }
    & Pick<GqlKioskTerminal, 'id' | 'dispensaryId' | 'nickname'>
  )> }
);

export type GqlAddSubscriptionToChainMutationVariables = Exact<{
  dispensaryIds: Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>;
  chargebeeCustomerId: Scalars['String'];
}>;


export type GqlAddSubscriptionToChainMutation = (
  { __typename?: 'Mutation' }
  & { addSubscriptionToChain?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlRemoveSubscriptionFromChainMutationVariables = Exact<{
  ids: Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>;
  chargebeeCustomerId: Scalars['String'];
}>;


export type GqlRemoveSubscriptionFromChainMutation = (
  { __typename?: 'Mutation' }
  & { removeSubscriptionFromChain?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlGetChainBillingInfoQueryVariables = Exact<{
  dispensaries?: Maybe<Array<Scalars['String']> | Scalars['String']>;
}>;


export type GqlGetChainBillingInfoQuery = (
  { __typename?: 'Query' }
  & { getBillingSubscriptions: Array<Maybe<(
    { __typename?: 'BillingSubscription' }
    & { dispensaryBilling?: Maybe<(
      { __typename?: 'DispensaryBilling' }
      & Pick<GqlDispensaryBilling, 'chain' | 'chargebeeCustomerId'>
    )> }
  )>> }
);

export type GqlGetSubscriptionsForChainQueryVariables = Exact<{
  dispensaries?: Maybe<Array<Scalars['String']> | Scalars['String']>;
}>;


export type GqlGetSubscriptionsForChainQuery = (
  { __typename?: 'Query' }
  & { getBillingSubscriptions: Array<Maybe<(
    { __typename?: 'BillingSubscription' }
    & { dispensaryBilling?: Maybe<(
      { __typename?: 'DispensaryBilling' }
      & Pick<GqlDispensaryBilling, 'chain'>
      & { chargebeeCustomer?: Maybe<(
        { __typename?: 'ChargebeeCustomer' }
        & Pick<GqlChargebeeCustomer, 'company'>
      )> }
    )> }
  )>> }
);

export type GqlGetSubscriptionsV2PaymentSourcesFragment = (
  { __typename?: 'DispensaryBillingV2' }
  & { paymentSources?: Maybe<Array<Maybe<(
    { __typename?: 'ChargebeePaymentSource' }
    & Pick<GqlChargebeePaymentSource, 'type'>
    & { card?: Maybe<(
      { __typename?: 'ChargebeeCard' }
      & Pick<GqlChargebeeCard, 'brand' | 'last4'>
    )> }
  )>>> }
);

export type GqlGetSubscriptionsV2QueryVariables = Exact<{
  retailers: Array<Maybe<GqlRetailerInput>> | Maybe<GqlRetailerInput>;
}>;


export type GqlGetSubscriptionsV2Query = (
  { __typename?: 'Query' }
  & { getSubscriptionsV2: Array<Maybe<(
    { __typename?: 'SubscriptionV2' }
    & Pick<GqlSubscriptionV2, 'manualPayments' | 'retailerId'>
    & { dispensaryBilling?: Maybe<(
      { __typename?: 'DispensaryBillingV2' }
      & Pick<GqlDispensaryBillingV2, 'chain'>
      & { chargebeeCustomer?: Maybe<(
        { __typename?: 'ChargebeeCustomer' }
        & Pick<GqlChargebeeCustomer, 'id' | 'company' | 'locationCount'>
        & { contacts?: Maybe<Array<Maybe<(
          { __typename?: 'ChargebeeContact' }
          & Pick<GqlChargebeeContact, 'email' | 'sendBillingEmail'>
        )>>> }
      )> }
      & GqlGetSubscriptionsV2PaymentSourcesFragment
    )>, chargebeeSubscription?: Maybe<(
      { __typename?: 'ChargebeeSubscriptionV2' }
      & Pick<GqlChargebeeSubscriptionV2, 'status' | 'trialStart' | 'trialEnd' | 'currentTermStart' | 'currentTermEnd' | 'nextBillingAt' | 'createdAt' | 'startedAt' | 'activatedAt' | 'planAmount'>
      & { invoices?: Maybe<Array<(
        { __typename?: 'Invoice' }
        & Pick<GqlInvoice, 'id' | 'total' | 'status' | 'amountPaid' | 'amountDue' | 'creditsApplied'>
        & { lineItems?: Maybe<Array<Maybe<(
          { __typename?: 'ChargebeeLineItem' }
          & Pick<GqlChargebeeLineItem, 'dateFrom' | 'dateTo' | 'quantity' | 'amount'>
        )>>> }
      )>> }
    )>, chargebeePlan?: Maybe<(
      { __typename?: 'ChargebeePlan' }
      & Pick<GqlChargebeePlan, 'period' | 'periodUnit'>
    )> }
  )>> }
);

export type GqlGetSubscriptionsQueryVariables = Exact<{
  dispensaries?: Maybe<Array<Scalars['String']> | Scalars['String']>;
}>;


export type GqlGetSubscriptionsQuery = (
  { __typename?: 'Query' }
  & { getBillingSubscriptions: Array<Maybe<(
    { __typename?: 'BillingSubscription' }
    & Pick<GqlBillingSubscription, 'dispensaryId' | 'chargebeeSubscriptionId' | 'manualPayments'>
    & { dispensaryBilling?: Maybe<(
      { __typename?: 'DispensaryBilling' }
      & Pick<GqlDispensaryBilling, 'chain' | 'chargebeeCustomerId'>
      & { chargebeeCustomer?: Maybe<(
        { __typename?: 'ChargebeeCustomer' }
        & Pick<GqlChargebeeCustomer, 'company' | 'locationCount'>
        & { contacts?: Maybe<Array<Maybe<(
          { __typename?: 'ChargebeeContact' }
          & Pick<GqlChargebeeContact, 'email' | 'sendBillingEmail'>
        )>>> }
      )>, paymentSources?: Maybe<Array<Maybe<(
        { __typename?: 'ChargebeePaymentSource' }
        & Pick<GqlChargebeePaymentSource, 'type'>
        & { card?: Maybe<(
          { __typename?: 'ChargebeeCard' }
          & Pick<GqlChargebeeCard, 'brand' | 'last4'>
        )> }
      )>>> }
    )>, chargebeeSubscription?: Maybe<(
      { __typename?: 'ChargebeeSubscription' }
      & Pick<GqlChargebeeSubscription, 'status' | 'trialStart' | 'trialEnd' | 'currentTermStart' | 'currentTermEnd' | 'nextBillingAt' | 'createdAt' | 'startedAt' | 'activatedAt' | 'planAmount'>
      & { invoices?: Maybe<Array<Maybe<(
        { __typename?: 'Invoice' }
        & Pick<GqlInvoice, 'id' | 'total' | 'status' | 'amountPaid' | 'amountDue' | 'creditsApplied'>
        & { lineItems?: Maybe<Array<Maybe<(
          { __typename?: 'ChargebeeLineItem' }
          & Pick<GqlChargebeeLineItem, 'dateFrom' | 'dateTo' | 'quantity' | 'amount'>
        )>>> }
      )>>> }
    )>, chargebeePlan: (
      { __typename?: 'ChargebeePlan' }
      & Pick<GqlChargebeePlan, 'period' | 'periodUnit'>
    ) }
  )>> }
);

export type GqlBaseDispensaryFragmentFragment = (
  { __typename?: 'Dispensaries' }
  & Pick<GqlDispensaries, 'id' | 'complianceCode' | 'distance' | 'name' | 'cName' | 'timezone' | 'phone' | 'address' | 'description' | 'status' | 'chain' | 'offerAnyPickupService' | 'offerPickup' | 'offerCurbsidePickup' | 'offerDriveThruPickup' | 'offerDelivery' | 'listImage' | 'bannerImage' | 'logoImage' | 'embeddedLogoImage' | 'embeddedMenuUrl' | 'SpecialLogoImage' | 'embedBackUrl' | 'alt36' | 'check' | 'creditCardAtDoor' | 'payOnlineHypur' | 'payOnlineMerrco' | 'creditCardByPhone' | 'debitOnly' | 'cashOnly' | 'cashless' | 'linx' | 'canPay' | 'paytender' | 'aeropay' | 'recDispensary' | 'medicalDispensary' | 'maxDeliveryDistance' | 'mixAndMatchPricingWeights' | 'acceptsTips' | 'acceptsDutchiePayTips' | 'requiresDriversLicense' | 'requiresDriversLicenseForPickup' | 'requirePhotoIdForDelivery' | 'requirePhotoIdForPickup' | 'removeMedicalCardFieldsAtCheckout' | 'menuOrder' | 'callConfirmation' | 'phoneTree' | 'email' | 'emailConfirmation' | 'stealthMode' | 'kioskOrderingEnabled' | 'kioskInstructions' | 'categoryLimitsEnabled' | 'menuScore' | 'updatedAt' | 'updatedAtISO' | 'updatedBy' | 'ordersArePaused' | 'ageVerificationBannerHtml' | 'ageVerificationBannerColor' | 'menuBannerHtml' | 'menuBannerColor' | 'menuUrl'>
  & { customDomainSettings?: Maybe<(
    { __typename?: 'Dispensaries_profile_customDomain_settings' }
    & Pick<GqlDispensaries_Profile_CustomDomain_Settings, 'domain'>
  )>, plusSettings?: Maybe<(
    { __typename?: 'Dispensaries_profile_plus_settings' }
    & Pick<GqlDispensaries_Profile_Plus_Settings, 'checkoutUrl' | 'defaultReturnUrl'>
  )>, location?: Maybe<(
    { __typename?: 'Dispensaries_profile_location' }
    & Pick<GqlDispensaries_Profile_Location, 'ln1' | 'ln2' | 'city' | 'state' | 'country'>
    & { geometry?: Maybe<(
      { __typename?: 'Dispensaries_profile_location_geometry' }
      & Pick<GqlDispensaries_Profile_Location_Geometry, 'coordinates'>
    )> }
  )>, temporalLocation?: Maybe<(
    { __typename?: 'TemporalLocation' }
    & Pick<GqlTemporalLocation, 'lastUpdatedAt' | 'coordinates' | 'onDuty'>
  )>, deliveryHours?: Maybe<(
    { __typename?: 'Dispensaries_profile_hours' }
    & GqlHourSetFragmentFragment
  )>, pickupHours?: Maybe<(
    { __typename?: 'Dispensaries_profile_hours' }
    & GqlHourSetFragmentFragment
  )>, categoryPhotos?: Maybe<Array<Maybe<(
    { __typename?: 'CategoryPhoto' }
    & Pick<GqlCategoryPhoto, 'src' | 'category'>
  )>>>, customCategoryPhotos?: Maybe<Array<Maybe<(
    { __typename?: 'CustomCategoryPhoto' }
    & Pick<GqlCustomCategoryPhoto, 'url' | 'category'>
  )>>>, specialHours?: Maybe<Array<Maybe<(
    { __typename?: 'SpecialHours' }
    & Pick<GqlSpecialHours, 'name' | 'startDate' | 'endDate'>
    & { hoursPerDay?: Maybe<Array<Maybe<(
      { __typename?: 'SpecialHoursDay' }
      & Pick<GqlSpecialHoursDay, 'date'>
      & { pickupHours: (
        { __typename?: 'dayBounds' }
        & Pick<GqlDayBounds, 'active' | 'start' | 'end'>
      ), deliveryHours: (
        { __typename?: 'dayBounds' }
        & Pick<GqlDayBounds, 'active' | 'start' | 'end'>
      ) }
    )>>> }
  )>>>, effectiveHours?: Maybe<(
    { __typename?: 'EffectiveHours' }
    & { deliveryHours?: Maybe<(
      { __typename?: 'Dispensaries_profile_hours' }
      & GqlHourSetFragmentFragment
    )>, pickupHours?: Maybe<(
      { __typename?: 'Dispensaries_profile_hours' }
      & GqlHourSetFragmentFragment
    )> }
  )>, embedSettings?: Maybe<(
    { __typename?: 'Dispensaries_profile_embed_settings' }
    & Pick<GqlDispensaries_Profile_Embed_Settings, 'disclaimerTextHtml' | 'disablePageLoadsAtTop' | 'autoGTM'>
  )>, feeTiers?: Maybe<Array<Maybe<(
    { __typename?: 'Dispensaries_profile_feeTiers' }
    & Pick<GqlDispensaries_Profile_FeeTiers, 'fee' | 'feeType' | 'max' | 'min' | 'percentFee'>
  )>>>, menuSortSettings?: Maybe<Array<(
    { __typename?: 'MenuSortSetting' }
    & Pick<GqlMenuSortSetting, 'brands' | 'category' | 'menuOrder'>
  )>>, actionEstimates?: Maybe<(
    { __typename?: 'ActionEstimates' }
    & { pickup?: Maybe<(
      { __typename?: 'ActionEstimatesValues' }
      & Pick<GqlActionEstimatesValues, 'readyInMinutes' | 'rangeInMinutes'>
    )>, delivery?: Maybe<(
      { __typename?: 'ActionEstimatesValues' }
      & Pick<GqlActionEstimatesValues, 'readyInMinutes' | 'rangeInMinutes' | 'deliveryTimeInMinutes'>
    )> }
  )>, durationEstimateOverrides?: Maybe<(
    { __typename?: 'DurationEstimates' }
    & { delivery?: Maybe<(
      { __typename?: 'DurationEstimateRange' }
      & Pick<GqlDurationEstimateRange, 'enabled' | 'lowInMinutes' | 'highInMinutes'>
    )>, pickup?: Maybe<(
      { __typename?: 'DurationEstimateRange' }
      & Pick<GqlDurationEstimateRange, 'enabled' | 'lowInMinutes' | 'highInMinutes'>
    )> }
  )>, paymentFees?: Maybe<Array<Maybe<(
    { __typename?: 'Dispensaries_paymentFees' }
    & Pick<GqlDispensaries_PaymentFees, 'fee' | 'feeType' | 'paymentType'>
  )>>>, ordersConfig?: Maybe<(
    { __typename?: 'Dispensaries_ordersConfig' }
    & Pick<GqlDispensaries_OrdersConfig, 'posItemNames' | 'autoConfirm' | 'autoClose'>
    & { terminalReceiptOptions?: Maybe<(
      { __typename?: 'TerminalReceiptOptions' }
      & Pick<GqlTerminalReceiptOptions, 'customerNameOption' | 'birthdate' | 'deliveryAddress' | 'phone' | 'medical' | 'potencyInfo' | 'disableSocialImpact'>
    )> }
  )>, kioskConfig?: Maybe<(
    { __typename?: 'Dispensaries_kioskConfig' }
    & Pick<GqlDispensaries_KioskConfig, 'fullNameOnly' | 'phoneRequired' | 'notesField' | 'directedOrders' | 'hidePhoneField' | 'hideEmailField' | 'showBirthdateField'>
  )>, categoryLimits?: Maybe<Array<Maybe<(
    { __typename?: 'Dispensaries_categoryLimits' }
    & Pick<GqlDispensaries_CategoryLimits, 'name' | 'value'>
  )>>>, specialsSettings?: Maybe<(
    { __typename?: 'SpecialsSettings' }
    & Pick<GqlSpecialsSettings, 'discountBehavior' | 'discountStacking' | 'discountPrecedence' | 'enableIndividualSpecialPrecedence' | 'enableIndividualDiscountStacking' | 'stackingBehavior' | 'nonStackingBehavior'>
  )>, storeSettings: (
    { __typename?: 'Dispensaries_storeSettings' }
    & Pick<GqlDispensaries_StoreSettings, 'isolatedMenus' | 'customerMessagingTermsAccepted' | 'defaultViewStyle' | 'disablePurchaseLimits' | 'disableGuestDOB' | 'displayPhoneConfirmation' | 'requireEmailAddressForGuestCheckout' | 'requireMedCardPhotoForPickup' | 'hideAddressFromDutchieMain' | 'requireMedCardPhotoForDelivery' | 'enableAfterHoursOrderingForPickup' | 'enableAfterHoursOrderingForDelivery' | 'enableLLxSaleDiscountSync' | 'enableMixAndMatchPricingForPickup' | 'enableMixAndMatchPricingForDelivery' | 'enableScheduledOrderingForPickup' | 'enableScheduledOrderingForDelivery' | 'enableLimitPerCustomer' | 'quantityLimit' | 'enableOrderStatusEmails' | 'enableStorefrontAgeGate' | 'disableGuestCheckout' | 'stealthMode' | 'dontCombineWeightedProducts' | 'keepUncombinedWeights' | 'dontMapSubcategoriesByProductName' | 'prioritizeStaffPicksInSearchResults' | 'hideEffects' | 'hideFilters'>
    & { subscriptions: (
      { __typename?: 'Dispensaries_subscriptions' }
      & Pick<GqlDispensaries_Subscriptions, 'enabled'>
    ), rewardsIntegrationConfiguration?: Maybe<(
      { __typename?: 'Rewards_integration_configuration' }
      & Pick<GqlRewards_Integration_Configuration, 'rewardsProgramDisplayName'>
    )> }
  ), featureFlags: (
    { __typename?: 'Dispensaries_featureFlags' }
    & Pick<GqlDispensaries_FeatureFlags, 'hideStoreHours' | 'enableOnfleet' | 'hideDeliveryEstimate' | 'hideMyAccount' | 'enablePausedOrders' | 'hasEffectsFilter' | 'enableAdvancedDiscountSettings' | 'enableAfterHoursOrdering' | 'enableBogoSpecials' | 'enableBogoTotalQuantityAndWeight' | 'enableScheduledOrdering' | 'enableArrivals' | 'enableDriveThruPickup' | 'enableMenuImport' | 'enableMixAndMatch' | 'enableNonTerminalAutoConfirm'>
  ), menuScoresByCategory?: Maybe<Array<Maybe<(
    { __typename?: 'MenuScore' }
    & Pick<GqlMenuScore, 'category' | 'value'>
  )>>>, productCategorySummary?: Maybe<Array<Maybe<(
    { __typename?: 'CategorySummary' }
    & Pick<GqlCategorySummary, 'category' | 'value'>
  )>>>, terminals?: Maybe<Array<Maybe<(
    { __typename?: 'Dispensaries_terminals' }
    & Pick<GqlDispensaries_Terminals, '_id' | 'nickname' | 'versionNumber' | 'lastSeenAt' | 'lastSeenAtISO'>
    & { config?: Maybe<(
      { __typename?: 'Device_config' }
      & Pick<GqlDevice_Config, 'orderSource'>
    )> }
  )>>>, colorSettings?: Maybe<(
    { __typename?: 'ColorSettings' }
    & Pick<GqlColorSettings, 'linkColor' | 'navBarColor'>
  )>, pickupMinimum?: Maybe<(
    { __typename?: 'PickupMinimum' }
    & Pick<GqlPickupMinimum, 'enabled' | 'minimumInCents'>
  )>, orderTypesConfig?: Maybe<(
    { __typename?: 'OrderTypesConfig' }
    & Pick<GqlOrderTypesConfig, 'offerAnyPickupService' | 'offerDeliveryService'>
    & { pickup?: Maybe<(
      { __typename?: 'OrderTypeConfig' }
      & Pick<GqlOrderTypeConfig, 'enabled'>
      & { paymentTypes?: Maybe<(
        { __typename?: 'PaymentTypesConfig' }
        & GqlPaymentTypesFragmentFragment
      )> }
    )>, curbsidePickup?: Maybe<(
      { __typename?: 'OrderTypeConfig' }
      & Pick<GqlOrderTypeConfig, 'enabled'>
      & { paymentTypes?: Maybe<(
        { __typename?: 'PaymentTypesConfig' }
        & GqlPaymentTypesFragmentFragment
      )> }
    )>, driveThruPickup?: Maybe<(
      { __typename?: 'OrderTypeConfig' }
      & Pick<GqlOrderTypeConfig, 'enabled'>
      & { paymentTypes?: Maybe<(
        { __typename?: 'PaymentTypesConfig' }
        & GqlPaymentTypesFragmentFragment
      )> }
    )>, delivery?: Maybe<(
      { __typename?: 'OrderTypeConfig' }
      & Pick<GqlOrderTypeConfig, 'enabled'>
      & { paymentTypes?: Maybe<(
        { __typename?: 'PaymentTypesConfig' }
        & GqlPaymentTypesFragmentFragment
      )> }
    )>, kiosk?: Maybe<(
      { __typename?: 'OrderTypeConfig' }
      & Pick<GqlOrderTypeConfig, 'enabled'>
      & { paymentTypes?: Maybe<(
        { __typename?: 'PaymentTypesConfig' }
        & GqlPaymentTypesFragmentFragment
      )> }
    )> }
  )>, paymentTypesAccepted?: Maybe<(
    { __typename?: 'PaymentTypesConfig' }
    & Pick<GqlPaymentTypesConfig, 'alt36' | 'check' | 'creditCardAtDoor' | 'payOnlineChase' | 'payOnlineHypur' | 'payOnlineMerrco' | 'payOnlineMoneris' | 'creditCardByPhone' | 'debit' | 'dutchiePay' | 'cash' | 'linx' | 'canPay' | 'paytender' | 'aeropay'>
  )> }
);

type GqlBaseOrderingSettingsFragment_CurbsidePickupOrderingSettings_Fragment = (
  { __typename?: 'CurbsidePickupOrderingSettings' }
  & Pick<GqlCurbsidePickupOrderingSettings, 'enableASAPOrdering' | 'enableScheduledOrdering' | 'enableAfterHoursOrdering'>
  & { paymentTypes?: Maybe<(
    { __typename?: 'PaymentTypesConfig' }
    & GqlPaymentTypesFragmentFragment
  )>, scheduledOrderingConfigV2?: Maybe<(
    { __typename?: 'ScheduledOrderingConfigV2' }
    & Pick<GqlScheduledOrderingConfigV2, 'advancedDayOrderingEnabled' | 'advancedDayOrderingLimit' | 'incrementInMinutes' | 'nextAvailableInMinutes' | 'orderLimitsEnabled'>
  )> }
);

type GqlBaseOrderingSettingsFragment_DeliveryOrderingSettings_Fragment = (
  { __typename?: 'DeliveryOrderingSettings' }
  & Pick<GqlDeliveryOrderingSettings, 'enableASAPOrdering' | 'enableScheduledOrdering' | 'enableAfterHoursOrdering'>
  & { paymentTypes?: Maybe<(
    { __typename?: 'PaymentTypesConfig' }
    & GqlPaymentTypesFragmentFragment
  )>, scheduledOrderingConfigV2?: Maybe<(
    { __typename?: 'ScheduledOrderingConfigV2' }
    & Pick<GqlScheduledOrderingConfigV2, 'advancedDayOrderingEnabled' | 'advancedDayOrderingLimit' | 'incrementInMinutes' | 'nextAvailableInMinutes' | 'orderLimitsEnabled'>
  )> }
);

type GqlBaseOrderingSettingsFragment_DriveThruPickupOrderingSettings_Fragment = (
  { __typename?: 'DriveThruPickupOrderingSettings' }
  & Pick<GqlDriveThruPickupOrderingSettings, 'enableASAPOrdering' | 'enableScheduledOrdering' | 'enableAfterHoursOrdering'>
  & { paymentTypes?: Maybe<(
    { __typename?: 'PaymentTypesConfig' }
    & GqlPaymentTypesFragmentFragment
  )>, scheduledOrderingConfigV2?: Maybe<(
    { __typename?: 'ScheduledOrderingConfigV2' }
    & Pick<GqlScheduledOrderingConfigV2, 'advancedDayOrderingEnabled' | 'advancedDayOrderingLimit' | 'incrementInMinutes' | 'nextAvailableInMinutes' | 'orderLimitsEnabled'>
  )> }
);

type GqlBaseOrderingSettingsFragment_InStorePickupOrderingSettings_Fragment = (
  { __typename?: 'InStorePickupOrderingSettings' }
  & Pick<GqlInStorePickupOrderingSettings, 'enableASAPOrdering' | 'enableScheduledOrdering' | 'enableAfterHoursOrdering'>
  & { paymentTypes?: Maybe<(
    { __typename?: 'PaymentTypesConfig' }
    & GqlPaymentTypesFragmentFragment
  )>, scheduledOrderingConfigV2?: Maybe<(
    { __typename?: 'ScheduledOrderingConfigV2' }
    & Pick<GqlScheduledOrderingConfigV2, 'advancedDayOrderingEnabled' | 'advancedDayOrderingLimit' | 'incrementInMinutes' | 'nextAvailableInMinutes' | 'orderLimitsEnabled'>
  )> }
);

export type GqlBaseOrderingSettingsFragmentFragment = GqlBaseOrderingSettingsFragment_CurbsidePickupOrderingSettings_Fragment | GqlBaseOrderingSettingsFragment_DeliveryOrderingSettings_Fragment | GqlBaseOrderingSettingsFragment_DriveThruPickupOrderingSettings_Fragment | GqlBaseOrderingSettingsFragment_InStorePickupOrderingSettings_Fragment;

export type GqlCurbsidePickupOrderingSettingsFragmentFragment = (
  { __typename?: 'CurbsidePickupOrderingSettings' }
  & Pick<GqlCurbsidePickupOrderingSettings, 'enableCurbsideArrivals' | 'arrivalInformationInstructions'>
  & { orderMinimum?: Maybe<(
    { __typename?: 'OrderMinimum' }
    & Pick<GqlOrderMinimum, 'enabled' | 'minimumInCents'>
  )> }
  & GqlBaseOrderingSettingsFragment_CurbsidePickupOrderingSettings_Fragment
);

export type GqlDeliveryOrderingSettingsFragmentFragment = (
  { __typename?: 'DeliveryOrderingSettings' }
  & Pick<GqlDeliveryOrderingSettings, 'deliveryMode'>
  & { deliveryFeeTiers?: Maybe<Array<Maybe<(
    { __typename?: 'DeliveryFeeTiers' }
    & Pick<GqlDeliveryFeeTiers, 'feeInCents' | 'maximumInCents' | 'minimumInCents' | 'feeType' | 'percentFee'>
  )>>>, deliveryRadius?: Maybe<(
    { __typename?: 'DeliveryRadius' }
    & Pick<GqlDeliveryRadius, 'radiusInMiles'>
    & { orderMinimum?: Maybe<(
      { __typename?: 'OrderMinimum' }
      & Pick<GqlOrderMinimum, 'enabled' | 'minimumInCents'>
    )> }
  )>, deliveryZipCodes?: Maybe<Array<Maybe<(
    { __typename?: 'DeliveryZipCodes' }
    & Pick<GqlDeliveryZipCodes, 'zipCode' | 'feeInCents' | 'minimumInCents' | 'feeType' | 'percentFee'>
  )>>> }
  & GqlBaseOrderingSettingsFragment_DeliveryOrderingSettings_Fragment
);

export type GqlDeliveryZonesFragmentFragment = (
  { __typename?: 'DeliveryOrderingSettings' }
  & { deliveryZones?: Maybe<Array<Maybe<(
    { __typename?: 'DeliveryZones' }
    & Pick<GqlDeliveryZones, 'name' | 'feeInCents' | 'minimumInCents' | 'feeType' | 'percentFee'>
    & { area?: Maybe<(
      { __typename?: 'Polygon' }
      & Pick<GqlPolygon, 'type'>
      & { features?: Maybe<Array<Maybe<(
        { __typename?: 'GeoJson_features' }
        & Pick<GqlGeoJson_Features, 'type'>
        & { geometry?: Maybe<(
          { __typename?: 'GeoJson_geometry' }
          & Pick<GqlGeoJson_Geometry, 'type' | 'coordinates'>
        )> }
      )>>> }
    )> }
  )>>> }
);

export type GqlDriveThruPickupOrderingSettingsFragmentFragment = (
  { __typename?: 'DriveThruPickupOrderingSettings' }
  & { orderMinimum?: Maybe<(
    { __typename?: 'OrderMinimum' }
    & Pick<GqlOrderMinimum, 'enabled' | 'minimumInCents'>
  )> }
  & GqlBaseOrderingSettingsFragment_DriveThruPickupOrderingSettings_Fragment
);

export type GqlHourSetFragmentFragment = (
  { __typename?: 'Dispensaries_profile_hours' }
  & { Monday?: Maybe<(
    { __typename?: 'dayBounds' }
    & Pick<GqlDayBounds, 'active' | 'end' | 'start'>
  )>, Tuesday?: Maybe<(
    { __typename?: 'dayBounds' }
    & Pick<GqlDayBounds, 'active' | 'end' | 'start'>
  )>, Wednesday?: Maybe<(
    { __typename?: 'dayBounds' }
    & Pick<GqlDayBounds, 'active' | 'end' | 'start'>
  )>, Thursday?: Maybe<(
    { __typename?: 'dayBounds' }
    & Pick<GqlDayBounds, 'active' | 'end' | 'start'>
  )>, Friday?: Maybe<(
    { __typename?: 'dayBounds' }
    & Pick<GqlDayBounds, 'active' | 'end' | 'start'>
  )>, Saturday?: Maybe<(
    { __typename?: 'dayBounds' }
    & Pick<GqlDayBounds, 'active' | 'end' | 'start'>
  )>, Sunday?: Maybe<(
    { __typename?: 'dayBounds' }
    & Pick<GqlDayBounds, 'active' | 'end' | 'start'>
  )> }
);

export type GqlHoursForDayFragment = (
  { __typename?: 'dayBounds' }
  & Pick<GqlDayBounds, 'active' | 'end' | 'start'>
);

export type GqlHoursSettingsForOrderTypeFragmentFragment = (
  { __typename?: 'HoursSettingsForOrderType' }
  & { hours?: Maybe<(
    { __typename?: 'WeeklyHours' }
    & GqlWeeklyHoursFragmentFragment
  )>, specialHours?: Maybe<Array<Maybe<(
    { __typename?: 'SpecialHours' }
    & GqlSpecialHoursFragmentFragment
  )>>> }
);

export type GqlInStorePickupOrderingSettingsFragmentFragment = (
  { __typename?: 'InStorePickupOrderingSettings' }
  & { orderMinimum?: Maybe<(
    { __typename?: 'OrderMinimum' }
    & Pick<GqlOrderMinimum, 'enabled' | 'minimumInCents'>
  )> }
  & GqlBaseOrderingSettingsFragment_InStorePickupOrderingSettings_Fragment
);

export type GqlKioskOrderingSettingsFragmentFragment = (
  { __typename?: 'KioskOrderingSettings' }
  & Pick<GqlKioskOrderingSettings, 'enabled' | 'fullNameOnly' | 'phoneRequired' | 'notesField' | 'directedOrders' | 'hideEmailField' | 'hidePhoneField' | 'showBirthdateField' | 'kioskInstructions'>
  & { paymentTypes?: Maybe<(
    { __typename?: 'PaymentTypesConfig' }
    & GqlPaymentTypesFragmentFragment
  )> }
);

export type GqlMaxReservationSlotFragmentFragment = (
  { __typename?: 'MaxReservationSlot' }
  & Pick<GqlMaxReservationSlot, 'currentCount' | 'date' | 'startTime' | 'endTime' | 'maxOrders'>
);

export type GqlMaxReservationSlotsByDayFragmentFragment = (
  { __typename?: 'MaxReservationSlotsByDay' }
  & { Monday?: Maybe<Array<Maybe<(
    { __typename?: 'MaxReservationSlot' }
    & GqlMaxReservationSlotFragmentFragment
  )>>>, Tuesday?: Maybe<Array<Maybe<(
    { __typename?: 'MaxReservationSlot' }
    & GqlMaxReservationSlotFragmentFragment
  )>>>, Wednesday?: Maybe<Array<Maybe<(
    { __typename?: 'MaxReservationSlot' }
    & GqlMaxReservationSlotFragmentFragment
  )>>>, Thursday?: Maybe<Array<Maybe<(
    { __typename?: 'MaxReservationSlot' }
    & GqlMaxReservationSlotFragmentFragment
  )>>>, Friday?: Maybe<Array<Maybe<(
    { __typename?: 'MaxReservationSlot' }
    & GqlMaxReservationSlotFragmentFragment
  )>>>, Saturday?: Maybe<Array<Maybe<(
    { __typename?: 'MaxReservationSlot' }
    & GqlMaxReservationSlotFragmentFragment
  )>>>, Sunday?: Maybe<Array<Maybe<(
    { __typename?: 'MaxReservationSlot' }
    & GqlMaxReservationSlotFragmentFragment
  )>>> }
);

export type GqlPaymentTypesFragmentFragment = (
  { __typename?: 'PaymentTypesConfig' }
  & Pick<GqlPaymentTypesConfig, 'alt36' | 'check' | 'creditCardAtDoor' | 'payOnlineChase' | 'payOnlineHypur' | 'payOnlineMerrco' | 'payOnlineMoneris' | 'creditCardByPhone' | 'debit' | 'dutchiePay' | 'cash' | 'linx' | 'canPay' | 'paytender' | 'aeropay'>
);

export type GqlScheduledOrderingConfigFragmentFragment = (
  { __typename?: 'ReservationOptionsForOrderType' }
  & Pick<GqlReservationOptionsForOrderType, 'advancedDayOrderingEnabled' | 'advancedDayOrderingLimit' | 'incrementInMinutes' | 'nextAvailableInMinutes' | 'orderLimitsEnabled'>
);

export type GqlSpecialHoursDayFragmentFragment = (
  { __typename?: 'SpecialHoursDay' }
  & Pick<GqlSpecialHoursDay, 'date'>
  & { hours: (
    { __typename?: 'dayBounds' }
    & GqlHoursForDayFragment
  ) }
);

export type GqlSpecialHoursFragmentFragment = (
  { __typename?: 'SpecialHours' }
  & Pick<GqlSpecialHours, 'id' | 'name' | 'startDate' | 'endDate'>
  & { hoursPerDay?: Maybe<Array<Maybe<(
    { __typename?: 'SpecialHoursDay' }
    & GqlSpecialHoursDayFragmentFragment
  )>>> }
);

export type GqlTaxPropertiesFragment = (
  { __typename?: 'Dispensaries_TaxConfig_Tax' }
  & Pick<GqlDispensaries_TaxConfig_Tax, 'id' | 'type' | 'name' | 'rate' | 'potencyRate' | 'potency' | 'medical' | 'recreational' | 'taxBasis' | 'order' | 'deliveryPolicy' | 'includeStateSalesTaxInDestinationRate'>
  & { stages: Array<Maybe<(
    { __typename?: 'Dispensaries_TaxConfig_Tax_Stage' }
    & Pick<GqlDispensaries_TaxConfig_Tax_Stage, 'op' | 'type'>
  )>>, applyTo: (
    { __typename?: 'Dispensaries_TaxConfig_Tax_ApplyTo' }
    & Pick<GqlDispensaries_TaxConfig_Tax_ApplyTo, 'types' | 'hemp'>
  ) }
);

export type GqlWeeklyHoursFragmentFragment = (
  { __typename?: 'WeeklyHours' }
  & { Friday?: Maybe<(
    { __typename?: 'dayBounds' }
    & GqlHoursForDayFragment
  )>, Monday?: Maybe<(
    { __typename?: 'dayBounds' }
    & GqlHoursForDayFragment
  )>, Saturday?: Maybe<(
    { __typename?: 'dayBounds' }
    & GqlHoursForDayFragment
  )>, Sunday?: Maybe<(
    { __typename?: 'dayBounds' }
    & GqlHoursForDayFragment
  )>, Thursday?: Maybe<(
    { __typename?: 'dayBounds' }
    & GqlHoursForDayFragment
  )>, Tuesday?: Maybe<(
    { __typename?: 'dayBounds' }
    & GqlHoursForDayFragment
  )>, Wednesday?: Maybe<(
    { __typename?: 'dayBounds' }
    & GqlHoursForDayFragment
  )> }
);

export type GqlDispensaryOnboardingMutationVariables = Exact<{
  input: GqlDispensaryOnboardingInput;
}>;


export type GqlDispensaryOnboardingMutation = (
  { __typename?: 'Mutation' }
  & { dispensaryOnboarding?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlDispensaryUploadOnboardingAssetMutationVariables = Exact<{
  data: Scalars['String'];
  fileName: Scalars['String'];
}>;


export type GqlDispensaryUploadOnboardingAssetMutation = (
  { __typename?: 'Mutation' }
  & { dispensaryUploadOnboardingAsset?: Maybe<(
    { __typename?: 'DispensaryAssetUploadResponse' }
    & Pick<GqlDispensaryAssetUploadResponse, 'fileIds'>
  )> }
);

export type GqlDispensarySearchQueryVariables = Exact<{
  dispensaryFilter: GqlDispensariesFilterInput;
}>;


export type GqlDispensarySearchQuery = (
  { __typename?: 'Query' }
  & { filteredDispensaries?: Maybe<Array<Maybe<(
    { __typename?: 'Dispensaries' }
    & Pick<GqlDispensaries, 'id' | 'name' | 'cName' | 'status' | 'recDispensary' | 'medicalDispensary' | 'offerPickup' | 'offerCurbsidePickup' | 'offerDriveThruPickup' | 'offerAnyPickupService' | 'offerDelivery' | 'listImage' | 'distance' | 'maxDeliveryDistance' | 'timezone'>
    & { location?: Maybe<(
      { __typename?: 'Dispensaries_profile_location' }
      & Pick<GqlDispensaries_Profile_Location, 'city' | 'county' | 'ln1' | 'ln2' | 'state' | 'zipcode' | 'country'>
      & { geometry?: Maybe<(
        { __typename?: 'Dispensaries_profile_location_geometry' }
        & Pick<GqlDispensaries_Profile_Location_Geometry, 'coordinates' | 'type'>
      )> }
    )>, actionEstimates?: Maybe<(
      { __typename?: 'ActionEstimates' }
      & { delivery?: Maybe<(
        { __typename?: 'ActionEstimatesValues' }
        & Pick<GqlActionEstimatesValues, 'readyInMinutes' | 'rangeInMinutes' | 'deliveryTimeInMinutes'>
      )>, pickup?: Maybe<(
        { __typename?: 'ActionEstimatesValues' }
        & Pick<GqlActionEstimatesValues, 'readyInMinutes' | 'rangeInMinutes'>
      )> }
    )>, durationEstimateOverrides?: Maybe<(
      { __typename?: 'DurationEstimates' }
      & { pickup?: Maybe<(
        { __typename?: 'DurationEstimateRange' }
        & Pick<GqlDurationEstimateRange, 'enabled' | 'lowInMinutes' | 'highInMinutes'>
      )>, delivery?: Maybe<(
        { __typename?: 'DurationEstimateRange' }
        & Pick<GqlDurationEstimateRange, 'enabled' | 'lowInMinutes' | 'highInMinutes'>
      )> }
    )>, storeSettings: (
      { __typename?: 'Dispensaries_storeSettings' }
      & Pick<GqlDispensaries_StoreSettings, 'enableAfterHoursOrderingForPickup' | 'enableAfterHoursOrderingForDelivery' | 'enableScheduledOrderingForPickup' | 'enableScheduledOrderingForDelivery'>
    ), featureFlags: (
      { __typename?: 'Dispensaries_featureFlags' }
      & Pick<GqlDispensaries_FeatureFlags, 'hideDeliveryEstimate'>
    ), effectiveHours?: Maybe<(
      { __typename?: 'EffectiveHours' }
      & { deliveryHours?: Maybe<(
        { __typename?: 'Dispensaries_profile_hours' }
        & GqlHourSetFragmentFragment
      )>, pickupHours?: Maybe<(
        { __typename?: 'Dispensaries_profile_hours' }
        & GqlHourSetFragmentFragment
      )> }
    )>, deliveryHours?: Maybe<(
      { __typename?: 'Dispensaries_profile_hours' }
      & GqlHourSetFragmentFragment
    )>, deliveryInfo?: Maybe<(
      { __typename?: 'Dispensaries_deliveryInfo' }
      & Pick<GqlDispensaries_DeliveryInfo, 'withinBounds' | 'fee' | 'minimum' | 'feeVaries' | 'minimumVaries' | 'feeType' | 'percentFee'>
    )>, feeTiers?: Maybe<Array<Maybe<(
      { __typename?: 'Dispensaries_profile_feeTiers' }
      & Pick<GqlDispensaries_Profile_FeeTiers, 'fee' | 'feeType' | 'max' | 'min' | 'percentFee'>
    )>>>, pickupHours?: Maybe<(
      { __typename?: 'Dispensaries_profile_hours' }
      & GqlHourSetFragmentFragment
    )>, specialHours?: Maybe<Array<Maybe<(
      { __typename?: 'SpecialHours' }
      & Pick<GqlSpecialHours, 'name' | 'startDate' | 'endDate'>
      & { hoursPerDay?: Maybe<Array<Maybe<(
        { __typename?: 'SpecialHoursDay' }
        & Pick<GqlSpecialHoursDay, 'date'>
        & { pickupHours: (
          { __typename?: 'dayBounds' }
          & Pick<GqlDayBounds, 'active' | 'start' | 'end'>
        ), deliveryHours: (
          { __typename?: 'dayBounds' }
          & Pick<GqlDayBounds, 'active' | 'start' | 'end'>
        ) }
      )>>> }
    )>>>, orderTypesConfig?: Maybe<(
      { __typename?: 'OrderTypesConfig' }
      & Pick<GqlOrderTypesConfig, 'offerAnyPickupService' | 'offerDeliveryService'>
      & { pickup?: Maybe<(
        { __typename?: 'OrderTypeConfig' }
        & Pick<GqlOrderTypeConfig, 'enabled'>
        & { paymentTypes?: Maybe<(
          { __typename?: 'PaymentTypesConfig' }
          & Pick<GqlPaymentTypesConfig, 'alt36' | 'check' | 'creditCardAtDoor' | 'payOnlineChase' | 'payOnlineHypur' | 'payOnlineMerrco' | 'payOnlineMoneris' | 'creditCardByPhone' | 'debit' | 'cash' | 'linx' | 'canPay' | 'paytender' | 'aeropay' | 'dutchiePay'>
        )> }
      )>, curbsidePickup?: Maybe<(
        { __typename?: 'OrderTypeConfig' }
        & Pick<GqlOrderTypeConfig, 'enabled'>
        & { paymentTypes?: Maybe<(
          { __typename?: 'PaymentTypesConfig' }
          & Pick<GqlPaymentTypesConfig, 'alt36' | 'check' | 'creditCardAtDoor' | 'payOnlineChase' | 'payOnlineHypur' | 'payOnlineMerrco' | 'payOnlineMoneris' | 'creditCardByPhone' | 'debit' | 'cash' | 'linx' | 'canPay' | 'paytender' | 'aeropay' | 'dutchiePay'>
        )> }
      )>, driveThruPickup?: Maybe<(
        { __typename?: 'OrderTypeConfig' }
        & Pick<GqlOrderTypeConfig, 'enabled'>
        & { paymentTypes?: Maybe<(
          { __typename?: 'PaymentTypesConfig' }
          & Pick<GqlPaymentTypesConfig, 'alt36' | 'check' | 'creditCardAtDoor' | 'payOnlineChase' | 'payOnlineHypur' | 'payOnlineMerrco' | 'payOnlineMoneris' | 'creditCardByPhone' | 'debit' | 'cash' | 'linx' | 'canPay' | 'paytender' | 'aeropay' | 'dutchiePay'>
        )> }
      )>, delivery?: Maybe<(
        { __typename?: 'OrderTypeConfig' }
        & Pick<GqlOrderTypeConfig, 'enabled'>
        & { paymentTypes?: Maybe<(
          { __typename?: 'PaymentTypesConfig' }
          & Pick<GqlPaymentTypesConfig, 'alt36' | 'check' | 'creditCardAtDoor' | 'payOnlineChase' | 'payOnlineHypur' | 'payOnlineMerrco' | 'payOnlineMoneris' | 'creditCardByPhone' | 'debit' | 'cash' | 'linx' | 'canPay' | 'paytender' | 'aeropay' | 'dutchiePay'>
        )> }
      )>, kiosk?: Maybe<(
        { __typename?: 'OrderTypeConfig' }
        & Pick<GqlOrderTypeConfig, 'enabled'>
        & { paymentTypes?: Maybe<(
          { __typename?: 'PaymentTypesConfig' }
          & Pick<GqlPaymentTypesConfig, 'alt36' | 'check' | 'creditCardAtDoor' | 'payOnlineChase' | 'payOnlineHypur' | 'payOnlineMerrco' | 'payOnlineMoneris' | 'creditCardByPhone' | 'debit' | 'cash' | 'linx' | 'canPay' | 'paytender' | 'aeropay' | 'dutchiePay'>
        )> }
      )> }
    )>, orderTypesConfigV2?: Maybe<(
      { __typename?: 'OrderTypesConfigV2' }
      & Pick<GqlOrderTypesConfigV2, 'offerAnyPickupService' | 'offerDeliveryService'>
      & { inStorePickup?: Maybe<(
        { __typename?: 'InStorePickupOrderingSettings' }
        & Pick<GqlInStorePickupOrderingSettings, 'enableASAPOrdering' | 'enableScheduledOrdering' | 'enableAfterHoursOrdering'>
      )>, curbsidePickup?: Maybe<(
        { __typename?: 'CurbsidePickupOrderingSettings' }
        & Pick<GqlCurbsidePickupOrderingSettings, 'enableASAPOrdering' | 'enableScheduledOrdering' | 'enableAfterHoursOrdering'>
      )>, driveThruPickup?: Maybe<(
        { __typename?: 'DriveThruPickupOrderingSettings' }
        & Pick<GqlDriveThruPickupOrderingSettings, 'enableASAPOrdering' | 'enableScheduledOrdering' | 'enableAfterHoursOrdering'>
      )>, delivery?: Maybe<(
        { __typename?: 'DeliveryOrderingSettings' }
        & Pick<GqlDeliveryOrderingSettings, 'enableASAPOrdering' | 'enableScheduledOrdering' | 'enableAfterHoursOrdering'>
      )> }
    )>, hoursSettings?: Maybe<(
      { __typename?: 'DispensaryHoursSettings' }
      & { inStorePickup?: Maybe<(
        { __typename?: 'HoursSettingsForOrderType' }
        & GqlHoursSettingsForOrderTypeFragmentFragment
      )>, curbsidePickup?: Maybe<(
        { __typename?: 'HoursSettingsForOrderType' }
        & GqlHoursSettingsForOrderTypeFragmentFragment
      )>, driveThruPickup?: Maybe<(
        { __typename?: 'HoursSettingsForOrderType' }
        & GqlHoursSettingsForOrderTypeFragmentFragment
      )>, delivery?: Maybe<(
        { __typename?: 'HoursSettingsForOrderType' }
        & GqlHoursSettingsForOrderTypeFragmentFragment
      )> }
    )>, enabledOrderTypes?: Maybe<(
      { __typename?: 'EnabledOrderTypes' }
      & Pick<GqlEnabledOrderTypes, 'pickup' | 'inStorePickup' | 'curbsidePickup' | 'driveThruPickup' | 'delivery' | 'kiosk'>
    )>, paymentTypesAccepted?: Maybe<(
      { __typename?: 'PaymentTypesConfig' }
      & Pick<GqlPaymentTypesConfig, 'alt36' | 'check' | 'creditCardAtDoor' | 'payOnlineChase' | 'payOnlineHypur' | 'payOnlineMerrco' | 'payOnlineMoneris' | 'creditCardByPhone' | 'debit' | 'cash' | 'linx' | 'canPay' | 'paytender' | 'aeropay' | 'dutchiePay'>
    )> }
  )>>> }
);

export type GqlGeolocateConsumerQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlGeolocateConsumerQuery = (
  { __typename?: 'Query' }
  & { geolocate?: Maybe<(
    { __typename?: 'IPInfo' }
    & Pick<GqlIpInfo, 'ip' | 'hostname' | 'city' | 'region' | 'country' | 'loc' | 'org' | 'postal' | 'timezone'>
  )> }
);

export type GqlGenerateHypurTokenV2MutationVariables = Exact<{
  code: Scalars['String'];
  hostname?: Maybe<Scalars['String']>;
  state: Scalars['String'];
}>;


export type GqlGenerateHypurTokenV2Mutation = (
  { __typename?: 'Mutation' }
  & { generateHypurTokenV2?: Maybe<(
    { __typename?: 'HypurToken' }
    & Pick<GqlHypurToken, 'accessToken' | 'embedded'>
  )> }
);

export type GqlCreateLibraryProductV2MutationVariables = Exact<{
  libraryProduct: GqlNewLibraryProduct;
  state: Scalars['String'];
}>;


export type GqlCreateLibraryProductV2Mutation = (
  { __typename?: 'Mutation' }
  & { createLibraryProductV2?: Maybe<(
    { __typename?: 'LibraryProduct' }
    & Pick<GqlLibraryProduct, 'id'>
  )> }
);

export type GqlCreateLibraryProductV3MutationVariables = Exact<{
  libraryProduct: GqlNewLibraryProductV2;
  state: Scalars['String'];
}>;


export type GqlCreateLibraryProductV3Mutation = (
  { __typename?: 'Mutation' }
  & { createLibraryProductV3?: Maybe<(
    { __typename?: 'LibraryProduct' }
    & Pick<GqlLibraryProduct, 'id'>
  )> }
);

export type GqlMatchLibraryProductsV2QueryVariables = Exact<{
  limit?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  state: Scalars['String'];
  category?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  brandIds?: Maybe<Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>>;
  brand?: Maybe<Scalars['String']>;
  scopes?: Maybe<Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>>;
}>;


export type GqlMatchLibraryProductsV2Query = (
  { __typename?: 'Query' }
  & { matchLibraryProductsV2?: Maybe<Array<Maybe<(
    { __typename?: 'LibraryProduct' }
    & Pick<GqlLibraryProduct, 'id' | 'category' | 'image' | 'name' | 'price' | 'strainType' | 'subcategory'>
    & { brand?: Maybe<(
      { __typename?: 'Brand' }
      & Pick<GqlBrand, 'id' | 'name'>
    )>, cbdContent?: Maybe<(
      { __typename?: 'ProductPotency' }
      & Pick<GqlProductPotency, 'unit' | 'range'>
    )>, thcContent?: Maybe<(
      { __typename?: 'ProductPotency' }
      & Pick<GqlProductPotency, 'unit' | 'range'>
    )> }
  )>>> }
);

export type GqlMatchLibraryProductsQueryVariables = Exact<{
  limit?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  state: Scalars['String'];
  category?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
  brandIds?: Maybe<Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>>;
  brand?: Maybe<Scalars['String']>;
  productTemplate?: Maybe<Scalars['Boolean']>;
}>;


export type GqlMatchLibraryProductsQuery = (
  { __typename?: 'Query' }
  & { matchLibraryProducts?: Maybe<Array<Maybe<(
    { __typename?: 'LibraryProduct' }
    & Pick<GqlLibraryProduct, 'id' | 'category' | 'image' | 'name' | 'price' | 'strainType' | 'subcategory'>
    & { brand?: Maybe<(
      { __typename?: 'Brand' }
      & Pick<GqlBrand, 'id' | 'name'>
    )>, cbdContent?: Maybe<(
      { __typename?: 'ProductPotency' }
      & Pick<GqlProductPotency, 'unit' | 'range'>
    )>, thcContent?: Maybe<(
      { __typename?: 'ProductPotency' }
      & Pick<GqlProductPotency, 'unit' | 'range'>
    )> }
  )>>> }
);

export type GqlAddressResidentialCheckQueryVariables = Exact<{
  input: GqlAddressResidentialCheckInput;
}>;


export type GqlAddressResidentialCheckQuery = (
  { __typename?: 'Query' }
  & { addressResidentialCheck?: Maybe<(
    { __typename?: 'ValidationResponse' }
    & Pick<GqlValidationResponse, 'isValid'>
  )> }
);

export type GqlResetPasswordV2MutationVariables = Exact<{
  input: GqlResetPasswordInput;
}>;


export type GqlResetPasswordV2Mutation = (
  { __typename?: 'Mutation' }
  & { resetPasswordV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlSendBrandUserPasswordResetEmailMutationVariables = Exact<{
  email: Scalars['String'];
}>;


export type GqlSendBrandUserPasswordResetEmailMutation = (
  { __typename?: 'Mutation' }
  & { sendBrandUserPasswordResetEmail?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlSendPasswordResetEmailV2MutationVariables = Exact<{
  email: Scalars['String'];
}>;


export type GqlSendPasswordResetEmailV2Mutation = (
  { __typename?: 'Mutation' }
  & { sendPasswordResetEmailV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlSetPasswordV2MutationVariables = Exact<{
  input: GqlSetPasswordInput;
}>;


export type GqlSetPasswordV2Mutation = (
  { __typename?: 'Mutation' }
  & { setPasswordV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlUpdatePasswordV2MutationVariables = Exact<{
  oldPassword: Scalars['String'];
  newPassword: Scalars['String'];
}>;


export type GqlUpdatePasswordV2Mutation = (
  { __typename?: 'Mutation' }
  & { updatePasswordV2?: Maybe<(
    { __typename?: 'PasswordUpdate' }
    & Pick<GqlPasswordUpdate, 'accessToken'>
  )> }
);

export type GqlGetPaymentsCheckoutCredentialsQueryVariables = Exact<{
  adapter: Scalars['String'];
  dispensaryId: Scalars['String'];
}>;


export type GqlGetPaymentsCheckoutCredentialsQuery = (
  { __typename?: 'Query' }
  & { getPaymentsCheckoutCredentials?: Maybe<(
    { __typename?: 'ChaseHostedProfileCredentials' }
    & Pick<GqlChaseHostedProfileCredentials, 'uID'>
  ) | (
    { __typename?: 'MonerisHTProfileCredentials' }
    & Pick<GqlMonerisHtProfileCredentials, 'profileId'>
  )> }
);

export type GqlGetMonerisTokenizationProfileQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlGetMonerisTokenizationProfileQuery = (
  { __typename?: 'Query' }
  & { getMonerisTokenizationProfile?: Maybe<(
    { __typename?: 'MonerisTokenizationProfile' }
    & Pick<GqlMonerisTokenizationProfile, 'profileId'>
  )> }
);

export type GqlConsumerBaseProductFragmentFragment = (
  { __typename?: 'Products' }
  & Pick<GqlProducts, '_id' | 'id' | 'AdditionalOptions' | 'brandId' | 'brandName' | 'CBD' | 'comingSoon' | 'createdAt' | 'DispensaryID' | 'Image' | 'medicalOnly' | 'medicalPrices' | 'medicalSpecialPrices' | 'wholesalePrices' | 'Name' | 'nonArmsLength' | 'Options' | 'Prices' | 'recOnly' | 'recPrices' | 'recSpecialPrices' | 'special' | 'Status' | 'strainType' | 'subcategory' | 'THC' | 'type' | 'vapeTaxApplicable' | 'weight' | 'isBelowThreshold' | 'isBelowKioskThreshold' | 'optionsBelowThreshold' | 'optionsBelowKioskThreshold' | 'cName' | 'pastCNames' | 'brandLogo' | 'bottleDepositTaxCents'>
  & { CBDContent?: Maybe<(
    { __typename?: 'ProductPotency' }
    & Pick<GqlProductPotency, 'unit' | 'range'>
  )>, images?: Maybe<Array<(
    { __typename?: 'Products_Images' }
    & Pick<GqlProducts_Images, 'url' | 'description' | 'active'>
  )>>, imgixSettings?: Maybe<(
    { __typename?: 'Products_imgixSettings' }
    & { productCard?: Maybe<(
      { __typename?: 'ImgixSettings' }
      & Pick<GqlImgixSettings, 'border' | 'mark' | 'markscale' | 'markpad' | 'fit'>
    )>, productModal?: Maybe<(
      { __typename?: 'ImgixSettings' }
      & Pick<GqlImgixSettings, 'border' | 'mark' | 'markscale' | 'markpad' | 'fit'>
    )> }
  )>, measurements?: Maybe<(
    { __typename?: 'Products_measurements' }
    & { netWeight?: Maybe<(
      { __typename?: 'Products_measurement' }
      & Pick<GqlProducts_Measurement, 'unit' | 'values'>
    )>, volume?: Maybe<(
      { __typename?: 'Products_measurement' }
      & Pick<GqlProducts_Measurement, 'unit' | 'values'>
    )> }
  )>, limitsPerCustomer?: Maybe<Array<Maybe<(
    { __typename?: 'Products_limitPerCustomer' }
    & Pick<GqlProducts_LimitPerCustomer, 'key' | 'value'>
  )>>>, manualInventory?: Maybe<Array<Maybe<(
    { __typename?: 'Products_manualInventory' }
    & Pick<GqlProducts_ManualInventory, 'option' | 'inventory'>
  )>>>, POSMetaData?: Maybe<(
    { __typename?: 'Products_POSMetaData' }
    & Pick<GqlProducts_PosMetaData, 'canonicalID' | 'canonicalBrandName'>
    & { children?: Maybe<Array<Maybe<(
      { __typename?: 'Products_POSMetaData_children' }
      & Pick<GqlProducts_PosMetaData_Children, 'option' | 'quantity' | 'quantityAvailable' | 'kioskQuantityAvailable'>
      & { standardEquivalent?: Maybe<(
        { __typename?: 'Products_POSMetaData_children_equivalent' }
        & Pick<GqlProducts_PosMetaData_Children_Equivalent, 'value' | 'unit'>
      )>, recEquivalent?: Maybe<(
        { __typename?: 'Products_POSMetaData_children_equivalent' }
        & Pick<GqlProducts_PosMetaData_Children_Equivalent, 'value' | 'unit'>
      )> }
    )>>> }
  )>, pricingTierData?: Maybe<(
    { __typename?: 'Products_pricingTierData' }
    & Pick<GqlProducts_PricingTierData, 'generatedTiersId' | 'tiersId' | 'tiersName'>
    & { tiers?: Maybe<Array<Maybe<(
      { __typename?: 'Products_pricingTierData_tiers' }
      & Pick<GqlProducts_PricingTierData_Tiers, 'startWeight' | 'endWeight' | 'price' | 'pricePerGram' | 'weightUOM'>
    )>>> }
  )>, specialData?: Maybe<(
    { __typename?: 'Products_specialData' }
    & { bogoSpecials?: Maybe<Array<Maybe<(
      { __typename?: 'Products_specialData_bogoSpecials' }
      & Pick<GqlProducts_SpecialData_BogoSpecials, 'bogoConditionLogicOperator' | 'bogoRewardLogicOperator' | 'discountBehavior' | 'discountStacking' | 'discountPrecedence' | 'endStamp' | 'isRecurring' | 'menuType' | 'recurringEndDate' | 'redemptionLimit' | 'specialId' | 'specialName' | 'stackingBehavior' | 'qualifyingOptions'>
      & { bogoConditions?: Maybe<Array<Maybe<(
        { __typename?: 'Products_specialData_bogoSpecials_bogoConditionItem' }
        & Pick<GqlProducts_SpecialData_BogoSpecials_BogoConditionItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'selectedCategoriesAndSubcategories' | 'productGroup' | 'productId' | 'quantity' | 'weight' | 'weightOperator'>
      )>>>, bogoRewards?: Maybe<Array<Maybe<(
        { __typename?: 'Products_specialData_bogoSpecials_bogoRewardItem' }
        & Pick<GqlProducts_SpecialData_BogoSpecials_BogoRewardItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'selectedCategoriesAndSubcategories' | 'dollarDiscount' | 'productGroup' | 'productId' | 'percentDiscount' | 'quantity' | 'targetPrice' | 'weight'>
      )>>>, discountToCart?: Maybe<(
        { __typename?: 'DiscountToCart' }
        & Pick<GqlDiscountToCart, '_id' | 'enabled' | 'discountType' | 'value'>
      )>, excludedProducts?: Maybe<(
        { __typename?: 'ExcludedBOGOProducts' }
        & { conditions?: Maybe<Array<Maybe<(
          { __typename?: 'ExcludedBOGOProduct' }
          & Pick<GqlExcludedBogoProduct, '_id' | 'key' | 'Name'>
        )>>>, rewards?: Maybe<Array<Maybe<(
          { __typename?: 'ExcludedBOGOProduct' }
          & Pick<GqlExcludedBogoProduct, '_id' | 'key' | 'Name'>
        )>>> }
      )>, itemsForAPrice?: Maybe<(
        { __typename?: 'Products_specialData_bogoSpecials_itemsForAPrice' }
        & Pick<GqlProducts_SpecialData_BogoSpecials_ItemsForAPrice, '_id' | 'enabled' | 'value'>
      )>, totalQuantity?: Maybe<(
        { __typename?: 'TotalQuantity' }
        & Pick<GqlTotalQuantity, 'enabled' | 'maxQuantity' | 'quantity' | 'quantityOperator'>
      )>, totalWeight?: Maybe<(
        { __typename?: 'TotalWeight' }
        & Pick<GqlTotalWeight, 'enabled' | 'weight' | 'weightOperator'>
      )>, totalSpend?: Maybe<(
        { __typename?: 'TotalSpend' }
        & Pick<GqlTotalSpend, 'enabled' | 'maximumSpend' | 'minimumSpend' | 'spendOperator'>
      )> }
    )>>>, saleSpecials?: Maybe<Array<Maybe<(
      { __typename?: 'Products_specialData_saleSpecials' }
      & Pick<GqlProducts_SpecialData_SaleSpecials, 'discount' | 'discountStacking' | 'menuType' | 'percentDiscount' | 'source' | 'sourceId' | 'specialId' | 'specialName' | 'specialRestrictions' | 'stackingBehavior' | 'stackingMode' | 'targetPrice'>
    )>>> }
  )>, THCContent?: Maybe<(
    { __typename?: 'ProductPotency' }
    & Pick<GqlProductPotency, 'unit' | 'range'>
  )>, featured?: Maybe<(
    { __typename?: 'Products_featured' }
    & Pick<GqlProducts_Featured, 'current' | 'startTime' | 'endTime'>
  )> }
);

export type GqlFilteredProductsQueryVariables = Exact<{
  productsFilter: GqlProductsFilterInput;
  useCache?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  includeEnterpriseSpecials?: Maybe<Scalars['Boolean']>;
  includeCannabinoids?: Maybe<Scalars['Boolean']>;
}>;


export type GqlFilteredProductsQuery = (
  { __typename?: 'Query' }
  & { filteredProducts?: Maybe<(
    { __typename?: 'ProductsList' }
    & { products: Array<Maybe<(
      { __typename?: 'Products' }
      & Pick<GqlProducts, 'popularSortKey'>
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | '_id' | 'description' | 'imageUrl' | 'name'>
      )>, cannabinoidsV2?: Maybe<Array<Maybe<(
        { __typename?: 'Products_CannabinoidV2' }
        & Pick<GqlProducts_CannabinoidV2, 'value' | 'unit'>
        & { cannabinoid?: Maybe<(
          { __typename?: 'Cannabinoid' }
          & Pick<GqlCannabinoid, 'name'>
        )> }
      )>>> }
      & GqlConsumerBaseProductFragmentFragment
    )>>, queryInfo: (
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount' | 'totalPages'>
    ) }
  )> }
);

export type GqlIndividualFilteredProductQueryVariables = Exact<{
  productsFilter: GqlProductsFilterInput;
  useCache?: Maybe<Scalars['Boolean']>;
  includeTerpenes?: Scalars['Boolean'];
  includeEnterpriseSpecials?: Maybe<Scalars['Boolean']>;
  includeCannabinoids?: Maybe<Scalars['Boolean']>;
}>;


export type GqlIndividualFilteredProductQuery = (
  { __typename?: 'Query' }
  & { filteredProducts?: Maybe<(
    { __typename?: 'ProductsList' }
    & { products: Array<Maybe<(
      { __typename?: 'Products' }
      & Pick<GqlProducts, 'effects' | 'description' | 'descriptionHtml'>
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | '_id' | 'description' | 'imageUrl' | 'name'>
      )>, terpenes?: Maybe<Array<Maybe<(
        { __typename?: 'Products_Terpene' }
        & Pick<GqlProducts_Terpene, 'id' | 'terpeneId' | 'unit' | 'unitSymbol' | 'value'>
        & { libraryTerpene?: Maybe<(
          { __typename?: 'Terpene' }
          & Pick<GqlTerpene, 'aromas' | 'description' | 'effects' | 'name'>
        )> }
      )>>>, cannabinoidsV2?: Maybe<Array<Maybe<(
        { __typename?: 'Products_CannabinoidV2' }
        & Pick<GqlProducts_CannabinoidV2, 'value' | 'unit'>
        & { cannabinoid?: Maybe<(
          { __typename?: 'Cannabinoid' }
          & Pick<GqlCannabinoid, 'name' | 'description'>
        )> }
      )>>> }
      & GqlConsumerBaseProductFragmentFragment
    )>> }
  )> }
);

export type GqlCreateAlpineUserV2MutationVariables = Exact<{
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  program: Scalars['String'];
  dispensaryId: Scalars['String'];
  favoriteStore: Scalars['String'];
  phoneNumber: Scalars['String'];
  acceptedTerms: Scalars['Boolean'];
}>;


export type GqlCreateAlpineUserV2Mutation = (
  { __typename?: 'Mutation' }
  & { createAlpineUserV2?: Maybe<(
    { __typename?: 'RewardUserResponse' }
    & Pick<GqlRewardUserResponse, 'success'>
    & { wallet?: Maybe<(
      { __typename?: 'RewardsListV2' }
      & Pick<GqlRewardsListV2, 'balance' | 'rewardBrand' | 'userHasWallet'>
      & { rewards: Array<Maybe<(
        { __typename?: 'RewardV2' }
        & Pick<GqlRewardV2, 'id' | 'copy' | 'available' | 'operator' | 'cost' | 'value' | 'rewardType'>
      )>>, auth?: Maybe<(
        { __typename?: 'UserAuthInfo' }
        & Pick<GqlUserAuthInfo, 'pinConfirmed' | 'incorrectPinProvided' | 'authTextMessageSent'>
      )> }
    )> }
  )> }
);

export type GqlCreateAlpineUserMutationVariables = Exact<{
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  program: Scalars['String'];
  dispensaryId: Scalars['String'];
  favoriteStore: Scalars['String'];
  phoneNumber: Scalars['String'];
  acceptedTerms: Scalars['Boolean'];
}>;


export type GqlCreateAlpineUserMutation = (
  { __typename?: 'Mutation' }
  & { createAlpineUser?: Maybe<(
    { __typename?: 'RewardUserResponse' }
    & Pick<GqlRewardUserResponse, 'success'>
    & { wallet?: Maybe<(
      { __typename?: 'RewardsListV2' }
      & Pick<GqlRewardsListV2, 'balance' | 'rewardBrand' | 'userHasWallet'>
      & { rewards: Array<Maybe<(
        { __typename?: 'RewardV2' }
        & Pick<GqlRewardV2, 'id' | 'copy' | 'available' | 'operator' | 'cost' | 'value' | 'rewardType'>
      )>>, auth?: Maybe<(
        { __typename?: 'UserAuthInfo' }
        & Pick<GqlUserAuthInfo, 'pinConfirmed' | 'incorrectPinProvided' | 'authTextMessageSent'>
      )> }
    )> }
  )> }
);

export type GqlGetRewardsV2QueryVariables = Exact<{
  phoneNumber: Scalars['String'];
  dispensaryId: Scalars['String'];
  dob?: Maybe<Scalars['String']>;
  pin?: Maybe<Scalars['String']>;
}>;


export type GqlGetRewardsV2Query = (
  { __typename?: 'Query' }
  & { getRewardsV2?: Maybe<(
    { __typename?: 'RewardsListV2' }
    & Pick<GqlRewardsListV2, 'balance' | 'rewardBrand' | 'userHasWallet'>
    & { rewards: Array<Maybe<(
      { __typename?: 'RewardV2' }
      & Pick<GqlRewardV2, 'id' | 'copy' | 'available' | 'operator' | 'cost' | 'value' | 'rewardType'>
    )>>, auth?: Maybe<(
      { __typename?: 'UserAuthInfo' }
      & Pick<GqlUserAuthInfo, 'pinConfirmed' | 'incorrectPinProvided' | 'authTextMessageSent'>
    )> }
  )> }
);

export type GqlBulkEndSpecialsV2MutationVariables = Exact<{
  input: GqlEndSpecialsInput;
}>;


export type GqlBulkEndSpecialsV2Mutation = (
  { __typename?: 'Mutation' }
  & { bulkEndSpecialsV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlBulkEndSpecialsMutationVariables = Exact<{
  input: GqlEndSpecialsInput;
}>;


export type GqlBulkEndSpecialsMutation = (
  { __typename?: 'Mutation' }
  & { bulkEndSpecials?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlCreateEnterpriseSpecialV2MutationVariables = Exact<{
  input: GqlEnterpriseSpecialInputV2;
}>;


export type GqlCreateEnterpriseSpecialV2Mutation = (
  { __typename?: 'Mutation' }
  & { createEnterpriseSpecialV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlCreateSpecialV3MutationVariables = Exact<{
  input: GqlSpecialsInputV3;
}>;


export type GqlCreateSpecialV3Mutation = (
  { __typename?: 'Mutation' }
  & { createSpecialV3?: Maybe<(
    { __typename?: 'Specials' }
    & Pick<GqlSpecials, '_id'>
  )> }
);

export type GqlDeleteEnterpriseSpecialMutationVariables = Exact<{
  enterpriseId: Scalars['String'];
  id: Scalars['String'];
}>;


export type GqlDeleteEnterpriseSpecialMutation = (
  { __typename?: 'Mutation' }
  & { deleteEnterpriseSpecial?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlDeleteSpecialV2MutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlDeleteSpecialV2Mutation = (
  { __typename?: 'Mutation' }
  & { deleteSpecialV2?: Maybe<(
    { __typename?: 'Specials' }
    & Pick<GqlSpecials, '_id'>
  )> }
);

export type GqlEndEnterpriseSpecialMutationVariables = Exact<{
  enterpriseId: Scalars['String'];
  id: Scalars['String'];
}>;


export type GqlEndEnterpriseSpecialMutation = (
  { __typename?: 'Mutation' }
  & { endEnterpriseSpecial?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlEndSpecialV2MutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlEndSpecialV2Mutation = (
  { __typename?: 'Mutation' }
  & { endSpecialV2: (
    { __typename?: 'Specials' }
    & Pick<GqlSpecials, '_id'>
  ) }
);

export type GqlIncrementSpecialClicksMutationVariables = Exact<{
  input: GqlIncrementClicksInput;
}>;


export type GqlIncrementSpecialClicksMutation = (
  { __typename?: 'Mutation' }
  & { incrementClicks?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlUpdateEnterpriseSpecialV2MutationVariables = Exact<{
  id: Scalars['String'];
  input: GqlEnterpriseSpecialInputV2;
}>;


export type GqlUpdateEnterpriseSpecialV2Mutation = (
  { __typename?: 'Mutation' }
  & { updateEnterpriseSpecialV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlUpdateSpecialV3MutationVariables = Exact<{
  id: Scalars['String'];
  input: GqlSpecialsInputV3;
}>;


export type GqlUpdateSpecialV3Mutation = (
  { __typename?: 'Mutation' }
  & { updateSpecialV3?: Maybe<(
    { __typename?: 'Specials' }
    & Pick<GqlSpecials, '_id'>
  )> }
);

export type GqlUpdateSpecialsSortOrderMutationVariables = Exact<{
  input: GqlSortOrderInput;
}>;


export type GqlUpdateSpecialsSortOrderMutation = (
  { __typename?: 'Mutation' }
  & { updateSpecialsSortOrder?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlEnterpriseSpecialsV3QueryVariables = Exact<{
  enterpriseId: Scalars['ID'];
  filter?: Maybe<GqlFilteredSpecialsInputV2>;
}>;


export type GqlEnterpriseSpecialsV3Query = (
  { __typename?: 'Query' }
  & { enterpriseSpecialsV3?: Maybe<(
    { __typename?: 'FilteredEnterpriseSpecials' }
    & { queryInfo?: Maybe<(
      { __typename?: 'FilteredSpecialsInfo' }
      & Pick<GqlFilteredSpecialsInfo, 'totalCount'>
    )>, specials?: Maybe<Array<Maybe<(
      { __typename?: 'EnterpriseSpecial' }
      & Pick<GqlEnterpriseSpecial, '_id' | 'active' | 'bogoConditionLogicOperator' | 'bogoRewardLogicOperator' | 'cipher' | 'clicks' | 'complete' | 'createdAt' | 'createdBy' | 'description' | 'descriptionHtml' | 'discount' | 'discountedPrices' | 'displayRank' | 'earliestStartStamp' | 'emailSpecial' | 'endDay' | 'endStamp' | 'endTime' | 'enterpriseId' | 'enterpriseSpecialId' | 'heading' | 'isRecurring' | 'latestEndStamp' | 'localTime' | 'menuDisplayDescription' | 'menuDisplayName' | 'menuDisplayImage' | 'menuType' | 'name' | 'percentDiscount' | 'productDiscounts' | 'productGroup' | 'productGroupRewards' | 'products' | 'redemptionLimit' | 'retailers' | 'scope' | 'source' | 'sourceId' | 'specialRestrictions' | 'specialType' | 'startDay' | 'startStamp' | 'startTime' | 'subject' | 'targetPrice' | 'timezone' | 'updatedAt' | 'updatedBy' | 'version'>
      & { bogoConditions?: Maybe<Array<Maybe<(
        { __typename?: 'BogoConditionItem' }
        & Pick<GqlBogoConditionItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'productGroup' | 'productId' | 'quantity' | 'weight' | 'weightOperator'>
      )>>>, bogoRewards?: Maybe<Array<Maybe<(
        { __typename?: 'BogoRewardItem' }
        & Pick<GqlBogoRewardItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'dollarDiscount' | 'productGroup' | 'productId' | 'percentDiscount' | 'quantity' | 'targetPrice' | 'weight'>
      )>>>, discountToCart?: Maybe<(
        { __typename?: 'DiscountToCart' }
        & Pick<GqlDiscountToCart, '_id' | 'enabled' | 'discountType' | 'value'>
      )>, excludedProducts?: Maybe<Array<Maybe<(
        { __typename?: 'SpecialsExcludedProducts' }
        & Pick<GqlSpecialsExcludedProducts, '_id' | 'Name' | 'key'>
        & { conditions?: Maybe<Array<Maybe<(
          { __typename?: 'SpecialsExcludedBOGO' }
          & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
        )>>>, rewards?: Maybe<Array<Maybe<(
          { __typename?: 'SpecialsExcludedBOGO' }
          & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
        )>>> }
      )>>>, itemsForAPrice?: Maybe<(
        { __typename?: 'ItemsForAPrice' }
        & Pick<GqlItemsForAPrice, '_id' | 'enabled' | 'value'>
      )>, recurring?: Maybe<(
        { __typename?: 'SpecialsRecurring' }
        & Pick<GqlSpecialsRecurring, 'days' | 'endDate' | 'endTime' | 'setEndDate' | 'startTime'>
      )>, totalQuantity?: Maybe<(
        { __typename?: 'TotalQuantity' }
        & Pick<GqlTotalQuantity, 'enabled' | 'maxQuantity' | 'quantity' | 'quantityOperator'>
      )>, totalWeight?: Maybe<(
        { __typename?: 'TotalWeight' }
        & Pick<GqlTotalWeight, 'enabled' | 'weight' | 'weightOperator'>
      )>, totalSpend?: Maybe<(
        { __typename?: 'TotalSpend' }
        & Pick<GqlTotalSpend, 'enabled' | 'maximumSpend' | 'minimumSpend' | 'spendOperator'>
      )> }
    )>>> }
  )> }
);

export type GqlEnterpriseSpecialsQueryVariables = Exact<{
  enterpriseId: Scalars['ID'];
}>;


export type GqlEnterpriseSpecialsQuery = (
  { __typename?: 'Query' }
  & { enterpriseSpecials?: Maybe<Array<Maybe<(
    { __typename?: 'EnterpriseSpecial' }
    & Pick<GqlEnterpriseSpecial, '_id' | 'active' | 'bogoConditionLogicOperator' | 'bogoRewardLogicOperator' | 'cipher' | 'clicks' | 'createdAt' | 'createdBy' | 'description' | 'descriptionHtml' | 'discount' | 'discountedPrices' | 'displayRank' | 'emailSpecial' | 'endDay' | 'endStamp' | 'endTime' | 'enterpriseId' | 'enterpriseSpecialId' | 'heading' | 'isRecurring' | 'localTime' | 'menuDisplayDescription' | 'menuDisplayName' | 'menuDisplayImage' | 'menuType' | 'name' | 'percentDiscount' | 'productDiscounts' | 'productGroup' | 'productGroupRewards' | 'products' | 'redemptionLimit' | 'retailers' | 'scope' | 'source' | 'sourceId' | 'specialRestrictions' | 'specialType' | 'startDay' | 'startStamp' | 'startTime' | 'subject' | 'targetPrice' | 'timezone' | 'updatedAt' | 'updatedBy' | 'version'>
    & { bogoConditions?: Maybe<Array<Maybe<(
      { __typename?: 'BogoConditionItem' }
      & Pick<GqlBogoConditionItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'productGroup' | 'productId' | 'quantity' | 'weight' | 'weightOperator'>
    )>>>, bogoRewards?: Maybe<Array<Maybe<(
      { __typename?: 'BogoRewardItem' }
      & Pick<GqlBogoRewardItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'dollarDiscount' | 'productGroup' | 'productId' | 'percentDiscount' | 'quantity' | 'targetPrice' | 'weight'>
    )>>>, discountToCart?: Maybe<(
      { __typename?: 'DiscountToCart' }
      & Pick<GqlDiscountToCart, '_id' | 'enabled' | 'discountType' | 'value'>
    )>, excludedProducts?: Maybe<Array<Maybe<(
      { __typename?: 'SpecialsExcludedProducts' }
      & Pick<GqlSpecialsExcludedProducts, '_id' | 'Name' | 'key'>
      & { conditions?: Maybe<Array<Maybe<(
        { __typename?: 'SpecialsExcludedBOGO' }
        & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
      )>>>, rewards?: Maybe<Array<Maybe<(
        { __typename?: 'SpecialsExcludedBOGO' }
        & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
      )>>> }
    )>>>, itemsForAPrice?: Maybe<(
      { __typename?: 'ItemsForAPrice' }
      & Pick<GqlItemsForAPrice, '_id' | 'enabled' | 'value'>
    )>, recurring?: Maybe<(
      { __typename?: 'SpecialsRecurring' }
      & Pick<GqlSpecialsRecurring, 'days' | 'endDate' | 'endTime' | 'setEndDate' | 'startTime'>
    )>, totalQuantity?: Maybe<(
      { __typename?: 'TotalQuantity' }
      & Pick<GqlTotalQuantity, 'enabled' | 'maxQuantity' | 'quantity' | 'quantityOperator'>
    )>, totalWeight?: Maybe<(
      { __typename?: 'TotalWeight' }
      & Pick<GqlTotalWeight, 'enabled' | 'weight' | 'weightOperator'>
    )>, totalSpend?: Maybe<(
      { __typename?: 'TotalSpend' }
      & Pick<GqlTotalSpend, 'enabled' | 'maximumSpend' | 'minimumSpend' | 'spendOperator'>
    )> }
  )>>> }
);

export type GqlFilteredSpecialsQueryVariables = Exact<{
  specialsFilter: GqlFilteredSpecialsInput;
  includeEnterpriseSpecials?: Maybe<Scalars['Boolean']>;
}>;


export type GqlFilteredSpecialsQuery = (
  { __typename?: 'Query' }
  & { filteredSpecials?: Maybe<(
    { __typename?: 'FilteredSpecials' }
    & { queryInfo?: Maybe<(
      { __typename?: 'FilteredSpecialsInfo' }
      & Pick<GqlFilteredSpecialsInfo, 'totalCount'>
    )>, specials?: Maybe<Array<Maybe<(
      { __typename?: 'Specials' }
      & Pick<GqlSpecials, '_id' | 'active' | 'menuDisplayName' | 'menuDisplayDescription' | 'bogoConditionLogicOperator' | 'menuDisplayImage' | 'bogoRewardLogicOperator' | 'clicks' | 'createdAt' | 'createdBy' | 'description' | 'descriptionHtml' | 'discount' | 'discountedPrices' | 'discountPrecedence' | 'discountStacking' | 'dispensaryId' | 'displayRank' | 'emailSpecial' | 'endDay' | 'endStamp' | 'endTime' | 'heading' | 'isRecurring' | 'menuType' | 'name' | 'percentDiscount' | 'productDiscounts' | 'productGroup' | 'productGroupRewards' | 'products' | 'redemptionLimit' | 'scope' | 'source' | 'sourceId' | 'specialId' | 'specialRestrictions' | 'specialType' | 'stackingBehavior' | 'stackingMode' | 'startDate' | 'startDay' | 'startStamp' | 'startTime' | 'subject' | 'targetPrice' | 'updatedAt' | 'updatedBy' | 'version'>
      & { bogoConditions?: Maybe<Array<Maybe<(
        { __typename?: 'BogoConditionItem' }
        & Pick<GqlBogoConditionItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'productGroup' | 'productId' | 'quantity' | 'weight' | 'weightOperator'>
      )>>>, bogoRewards?: Maybe<Array<Maybe<(
        { __typename?: 'BogoRewardItem' }
        & Pick<GqlBogoRewardItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'dollarDiscount' | 'productGroup' | 'productId' | 'percentDiscount' | 'quantity' | 'targetPrice' | 'weight'>
      )>>>, discountToCart?: Maybe<(
        { __typename?: 'DiscountToCart' }
        & Pick<GqlDiscountToCart, '_id' | 'enabled' | 'discountType' | 'value'>
      )>, excludedProducts?: Maybe<Array<Maybe<(
        { __typename?: 'SpecialsExcludedProducts' }
        & Pick<GqlSpecialsExcludedProducts, '_id' | 'Name' | 'key'>
        & { conditions?: Maybe<Array<Maybe<(
          { __typename?: 'SpecialsExcludedBOGO' }
          & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
        )>>>, rewards?: Maybe<Array<Maybe<(
          { __typename?: 'SpecialsExcludedBOGO' }
          & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
        )>>> }
      )>>>, itemsForAPrice?: Maybe<(
        { __typename?: 'ItemsForAPrice' }
        & Pick<GqlItemsForAPrice, '_id' | 'enabled' | 'value'>
      )>, discountBundle?: Maybe<(
        { __typename?: 'DiscountBundle' }
        & Pick<GqlDiscountBundle, '_id' | 'applyTo' | 'discountType' | 'enabled' | 'limit' | 'value'>
      )>, recurring?: Maybe<(
        { __typename?: 'SpecialsRecurring' }
        & Pick<GqlSpecialsRecurring, 'days' | 'endDate' | 'endTime' | 'setEndDate' | 'startTime'>
      )>, totalQuantity?: Maybe<(
        { __typename?: 'TotalQuantity' }
        & Pick<GqlTotalQuantity, 'enabled' | 'maxQuantity' | 'quantity' | 'quantityOperator'>
      )>, totalWeight?: Maybe<(
        { __typename?: 'TotalWeight' }
        & Pick<GqlTotalWeight, 'enabled' | 'weight' | 'weightOperator'>
      )>, totalSpend?: Maybe<(
        { __typename?: 'TotalSpend' }
        & Pick<GqlTotalSpend, 'enabled' | 'maximumSpend' | 'minimumSpend' | 'spendOperator'>
      )> }
    )>>> }
  )> }
);

export type GqlGetStockImageQueryVariables = Exact<{
  category?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
}>;


export type GqlGetStockImageQuery = (
  { __typename?: 'Query' }
  & { getStockImage?: Maybe<(
    { __typename?: 'StockImage' }
    & Pick<GqlStockImage, 'url'>
  )> }
);

export type GqlCreateStrainV2MutationVariables = Exact<{
  input: GqlStrainInput;
}>;


export type GqlCreateStrainV2Mutation = (
  { __typename?: 'Mutation' }
  & { createStrainV2?: Maybe<(
    { __typename?: 'Strain' }
    & Pick<GqlStrain, 'id'>
  )> }
);

export type GqlDeleteStrainMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlDeleteStrainMutation = (
  { __typename?: 'Mutation' }
  & { deleteStrain?: Maybe<(
    { __typename?: 'Strain' }
    & Pick<GqlStrain, 'id'>
  )> }
);

export type GqlUpdateStrainV2MutationVariables = Exact<{
  id: Scalars['String'];
  input: GqlStrainInput;
}>;


export type GqlUpdateStrainV2Mutation = (
  { __typename?: 'Mutation' }
  & { updateStrainV2?: Maybe<(
    { __typename?: 'Strain' }
    & Pick<GqlStrain, 'id'>
  )> }
);

export type GqlFilteredStrainsQueryVariables = Exact<{
  filter?: Maybe<GqlStrainsFilterInput>;
  sort?: Maybe<GqlStrainsSortInput>;
  pagination?: Maybe<GqlPaginationInput>;
}>;


export type GqlFilteredStrainsQuery = (
  { __typename?: 'Query' }
  & { filteredStrains?: Maybe<(
    { __typename?: 'StrainList' }
    & { queryInfo?: Maybe<(
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    )>, strains?: Maybe<Array<Maybe<(
      { __typename?: 'Strain' }
      & Pick<GqlStrain, 'description' | 'effects' | 'id' | 'imageUrl' | 'name' | 'potentialHealthBenefits'>
    )>>> }
  )> }
);

export type GqlGetStrainQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlGetStrainQuery = (
  { __typename?: 'Query' }
  & { getStrain?: Maybe<(
    { __typename?: 'Strain' }
    & Pick<GqlStrain, 'aromas' | 'description' | 'effects' | 'id' | 'imageUrl' | 'labels' | 'name' | 'potentialHealthBenefits' | 'ratio'>
    & { terpenes?: Maybe<Array<Maybe<(
      { __typename?: 'Terpene' }
      & Pick<GqlTerpene, 'id' | 'name'>
    )>>> }
  )> }
);

export type GqlFilteredSubscriptionsQueryVariables = Exact<{
  subscriptionsFilter?: Maybe<GqlSubscriptionsFilterInput>;
}>;


export type GqlFilteredSubscriptionsQuery = (
  { __typename?: 'Query' }
  & { filteredSubscriptions?: Maybe<Array<Maybe<(
    { __typename?: 'SubscriptionCustomers' }
    & Pick<GqlSubscriptionCustomers, '_id' | 'createdAt' | 'createdBy' | 'dateAdded' | 'dispensaryId' | 'dispensaryName' | 'email' | 'emailOptIn' | 'emailSubscription' | 'name' | 'numOrders' | 'orderTotal' | 'phone' | 'source' | 'textSubscription' | 'userId'>
  )>>> }
);

export type GqlGetCustomerSubscriptionsQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlGetCustomerSubscriptionsQuery = (
  { __typename?: 'Query' }
  & { getCustomerSubscriptions: Array<(
    { __typename?: 'CustomerSubscription' }
    & Pick<GqlCustomerSubscription, 'dispensaryId' | 'dispensaryName' | 'emailOptIn' | 'emailSubscription' | 'id'>
  )> }
);

export type GqlGetUnsubscribeDispensaryQueryVariables = Exact<{
  customerId: Scalars['String'];
}>;


export type GqlGetUnsubscribeDispensaryQuery = (
  { __typename?: 'Query' }
  & { unsubscribeCustomerQuery?: Maybe<(
    { __typename?: 'CustomerUnsubscribe' }
    & Pick<GqlCustomerUnsubscribe, 'subscribed'>
    & { dispensary?: Maybe<(
      { __typename?: 'Dispensaries' }
      & Pick<GqlDispensaries, 'name' | 'logoImage'>
    )> }
  )> }
);

export type GqlTerpeneFragmentFragment = (
  { __typename?: 'Terpene' }
  & Pick<GqlTerpene, 'aliasList' | 'aromas' | 'description' | 'effects' | 'id' | 'name' | 'unitSymbol' | 'potentialHealthBenefits'>
);

export type GqlCreateTerpeneMutationVariables = Exact<{
  terpene: GqlTerpeneInput;
}>;


export type GqlCreateTerpeneMutation = (
  { __typename?: 'Mutation' }
  & { createTerpeneV2?: Maybe<(
    { __typename?: 'Terpene' }
    & Pick<GqlTerpene, 'id'>
  )> }
);

export type GqlDeleteTerpeneMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlDeleteTerpeneMutation = (
  { __typename?: 'Mutation' }
  & { deleteTerpene?: Maybe<(
    { __typename?: 'Terpene' }
    & Pick<GqlTerpene, 'id'>
  )> }
);

export type GqlUpdateTerpeneMutationVariables = Exact<{
  id: Scalars['String'];
  terpene: GqlTerpeneInput;
}>;


export type GqlUpdateTerpeneMutation = (
  { __typename?: 'Mutation' }
  & { updateTerpeneV2?: Maybe<(
    { __typename?: 'Terpene' }
    & Pick<GqlTerpene, 'id'>
  )> }
);

export type GqlFilteredTerpenesQueryVariables = Exact<{
  filter?: Maybe<GqlTerpenesFilter>;
  sort?: Maybe<GqlTerpenesSort>;
}>;


export type GqlFilteredTerpenesQuery = (
  { __typename?: 'Query' }
  & { filteredTerpenes?: Maybe<Array<Maybe<(
    { __typename?: 'Terpene' }
    & { strains: Array<Maybe<(
      { __typename?: 'Strain' }
      & Pick<GqlStrain, '_id'>
    )>> }
    & GqlTerpeneFragmentFragment
  )>>> }
);

export type GqlGetTerpeneQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlGetTerpeneQuery = (
  { __typename?: 'Query' }
  & { getTerpene?: Maybe<(
    { __typename?: 'Terpene' }
    & GqlTerpeneFragmentFragment
  )> }
);

export type GqlAdminIdentityFragmentFragment = (
  { __typename?: 'LoginAdmin' }
  & Pick<GqlLoginAdmin, 'accessToken'>
  & { user?: Maybe<(
    { __typename?: 'IdentityAdmin' }
    & Pick<GqlIdentityAdmin, '_id' | 'createdAt'>
    & { emails: Array<Maybe<(
      { __typename?: 'UserEmails' }
      & Pick<GqlUserEmails, 'address'>
    )>>, profile: (
      { __typename?: 'IdentityAdminProfile' }
      & Pick<GqlIdentityAdminProfile, 'browserNotification' | 'chainID' | 'desktopNotification' | 'dispensaryId' | 'emailNotifications' | 'emailOptIn' | 'firstName' | 'fullName' | 'lastName' | 'phone' | 'textNotifications' | 'type'>
      & { permissions?: Maybe<(
        { __typename?: 'IdentityAdminProfilePermissions' }
        & Pick<GqlIdentityAdminProfilePermissions, 'allLocations' | 'billing' | 'analytics' | 'customers' | 'driver' | 'enterpriseAdmin' | 'enterpriseSpecials' | 'menu' | 'menuReview' | 'superMenuReview' | 'orders' | 'promote' | 'settings' | 'users' | 'tasks'>
      )> }
    ) }
  )> }
);

export type GqlConsumerSignupMutationVariables = Exact<{
  input: GqlConsumerSignupInput;
}>;


export type GqlConsumerSignupMutation = (
  { __typename?: 'Mutation' }
  & { consumerSignup?: Maybe<(
    { __typename?: 'LoginConsumer' }
    & Pick<GqlLoginConsumer, 'accessToken'>
    & { user?: Maybe<(
      { __typename?: 'IdentityConsumer' }
      & Pick<GqlIdentityConsumer, '_id'>
      & { emails: Array<Maybe<(
        { __typename?: 'UserEmails' }
        & Pick<GqlUserEmails, 'address'>
      )>>, profile: (
        { __typename?: 'IdentityConsumerProfile' }
        & Pick<GqlIdentityConsumerProfile, 'birthday' | 'emailNotifications' | 'emailOptIn' | 'firstName' | 'lastName' | 'phone' | 'photoId' | 'textNotifications'>
        & { medicalCard?: Maybe<(
          { __typename?: 'consumerUserMedicalCard' }
          & Pick<GqlConsumerUserMedicalCard, 'expirationDate' | 'number' | 'state'>
        )> }
      ) }
    )> }
  )> }
);

export type GqlCreateUserMutationVariables = Exact<{
  input: GqlUsersCreateInput;
}>;


export type GqlCreateUserMutation = (
  { __typename?: 'Mutation' }
  & { createUser?: Maybe<(
    { __typename?: 'Users' }
    & Pick<GqlUsers, 'audioNotificationsOnNewArrivalsDisabled' | 'audioNotificationsOnNewOrdersDisabled' | 'chainID' | 'createdAt' | 'createdBy' | 'dispensaryId' | 'email' | 'fullName' | 'phone' | 'roleAtDispensary' | 'textNotifications' | 'type'>
    & { permissions?: Maybe<(
      { __typename?: 'Users_permissions' }
      & Pick<GqlUsers_Permissions, 'allLocations' | 'analytics' | 'billing' | 'customers' | 'dispensaryIds' | 'driver' | 'menu' | 'menuReview' | 'orders' | 'promote' | 'settings' | 'superMenuReview' | 'users'>
    )> }
  )> }
);

export type GqlDeleteUserMutationVariables = Exact<{
  input: GqlUsersDeleteInput;
}>;


export type GqlDeleteUserMutation = (
  { __typename?: 'Mutation' }
  & { deleteUser?: Maybe<(
    { __typename?: 'Users' }
    & Pick<GqlUsers, 'fullName'>
  )> }
);

export type GqlLoginAdminViaTokenMutationVariables = Exact<{
  transferToken: Scalars['String'];
}>;


export type GqlLoginAdminViaTokenMutation = (
  { __typename?: 'Mutation' }
  & { loginAdminViaToken?: Maybe<(
    { __typename?: 'LoginAdmin' }
    & GqlAdminIdentityFragmentFragment
  )> }
);

export type GqlLoginAdminMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type GqlLoginAdminMutation = (
  { __typename?: 'Mutation' }
  & { loginAdmin?: Maybe<(
    { __typename?: 'LoginAdmin' }
    & GqlAdminIdentityFragmentFragment
  )> }
);

export type GqlLoginConsumerMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type GqlLoginConsumerMutation = (
  { __typename?: 'Mutation' }
  & { loginConsumer?: Maybe<(
    { __typename?: 'LoginConsumer' }
    & Pick<GqlLoginConsumer, 'accessToken' | 'transferToken'>
    & { user?: Maybe<(
      { __typename?: 'IdentityConsumer' }
      & Pick<GqlIdentityConsumer, '_id' | 'createdAt'>
      & { emails: Array<Maybe<(
        { __typename?: 'UserEmails' }
        & Pick<GqlUserEmails, 'address'>
      )>>, profile: (
        { __typename?: 'IdentityConsumerProfile' }
        & Pick<GqlIdentityConsumerProfile, 'birthday' | 'emailNotifications' | 'emailOptIn' | 'firstName' | 'lastName' | 'phone' | 'photoId' | 'textNotifications' | 'type'>
        & { medicalCard?: Maybe<(
          { __typename?: 'consumerUserMedicalCard' }
          & Pick<GqlConsumerUserMedicalCard, 'expirationDate' | 'number' | 'state' | 'photo'>
        )> }
      ) }
    )> }
  )> }
);

export type GqlLogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type GqlLogoutMutation = (
  { __typename?: 'Mutation' }
  & { logout?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlUpdateUserMutationVariables = Exact<{
  input: GqlUsersUpdateInput;
}>;


export type GqlUpdateUserMutation = (
  { __typename?: 'Mutation' }
  & { updateUser?: Maybe<(
    { __typename?: 'Users' }
    & Pick<GqlUsers, 'audioNotificationsOnNewArrivalsDisabled' | 'audioNotificationsOnNewOrdersDisabled' | 'chainID' | 'createdAt' | 'createdBy' | 'dispensaryId' | 'email' | 'fullName' | 'isWeeklyReportEnabled' | 'phone' | 'roleAtDispensary' | 'textNotifications' | 'type' | 'unsubscribedDispensaries'>
    & { permissions?: Maybe<(
      { __typename?: 'Users_permissions' }
      & Pick<GqlUsers_Permissions, 'allLocations' | 'analytics' | 'billing' | 'customers' | 'dispensaryIds' | 'driver' | 'menu' | 'menuReview' | 'orders' | 'promote' | 'settings' | 'superMenuReview' | 'users'>
    )> }
  )> }
);

export type GqlMeConsumerQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlMeConsumerQuery = (
  { __typename?: 'Query' }
  & { meConsumer?: Maybe<(
    { __typename?: 'IdentityConsumer' }
    & Pick<GqlIdentityConsumer, '_id' | 'createdAt'>
    & { emails: Array<Maybe<(
      { __typename?: 'UserEmails' }
      & Pick<GqlUserEmails, 'address'>
    )>>, profile: (
      { __typename?: 'IdentityConsumerProfile' }
      & Pick<GqlIdentityConsumerProfile, 'birthday' | 'emailNotifications' | 'emailOptIn' | 'firstName' | 'lastName' | 'phone' | 'textNotifications' | 'type' | 'photoId'>
      & { address?: Maybe<(
        { __typename?: 'consumerUserProfileAddressType' }
        & Pick<GqlConsumerUserProfileAddressType, 'city' | 'lat' | 'ln1' | 'ln2' | 'lng' | 'state' | 'zipcode'>
      )>, medicalCard?: Maybe<(
        { __typename?: 'consumerUserMedicalCard' }
        & Pick<GqlConsumerUserMedicalCard, 'expirationDate' | 'number' | 'state' | 'photo'>
      )> }
    ) }
  )> }
);

export type GqlAnalyticsBrandsQueryQueryVariables = Exact<{
  input: GqlBrandsSummaryInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsBrandsQueryQuery = (
  { __typename?: 'Query' }
  & { getFilteredBrandSummaries?: Maybe<(
    { __typename?: 'FilteredBrandSummaryResponse' }
    & { brands?: Maybe<Array<Maybe<(
      { __typename?: 'BrandSummary' }
      & Pick<GqlBrandSummary, 'brandId' | 'brandName' | 'numProducts' | 'percentSales' | 'totalSalesCents' | 'percentChange' | 'centsChange'>
    )>>>, meta?: Maybe<(
      { __typename?: 'AnalyticsMeta' }
      & Pick<GqlAnalyticsMeta, 'totalCount'>
    )> }
  )> }
);

export type GqlAnalyticsExportBrandsMutationMutationVariables = Exact<{
  input: GqlBrandsSummaryInput;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsExportBrandsMutationMutation = (
  { __typename?: 'Mutation' }
  & { exportFilteredBrandsSummaries?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlGetTrendingBrandsQueryQueryVariables = Exact<{
  input: GqlBrandsSummaryInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlGetTrendingBrandsQueryQuery = (
  { __typename?: 'Query' }
  & { getTrendingBrands?: Maybe<(
    { __typename?: 'TrendingBrandsResponse' }
    & { trending?: Maybe<Array<Maybe<(
      { __typename?: 'Trending' }
      & Pick<GqlTrending, 'brandId' | 'brandName' | 'percentChangeFromLastPeriod'>
      & { dollarHistoryThisPeriod?: Maybe<Array<Maybe<(
        { __typename?: 'ChangeHistoryObject' }
        & Pick<GqlChangeHistoryObject, 'date' | 'totalSales'>
      )>>> }
    )>>> }
  )> }
);

export type GqlAnalyticsAbandonedCartsQueryQueryVariables = Exact<{
  input: GqlAnalyticsInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsAbandonedCartsQueryQuery = (
  { __typename?: 'Query' }
  & { getEcommerceAbandonedCarts?: Maybe<(
    { __typename?: 'EcommerceAbandonedCartsResponse' }
    & { carts?: Maybe<Array<Maybe<(
      { __typename?: 'CartSummary' }
      & Pick<GqlCartSummary, 'id' | 'createdAt' | 'firstName' | 'lastName' | 'email' | 'phone' | 'valueInCents'>
    )>>>, meta?: Maybe<(
      { __typename?: 'AnalyticsMeta' }
      & Pick<GqlAnalyticsMeta, 'totalCount'>
    )> }
  )> }
);

export type GqlAnalyticsEcommerceDataPointsQueryQueryVariables = Exact<{
  input: GqlAnalyticsInput;
}>;


export type GqlAnalyticsEcommerceDataPointsQueryQuery = (
  { __typename?: 'Query' }
  & { getEcommerceDataPoints?: Maybe<(
    { __typename?: 'EcommerceDataPointsResponse' }
    & { conversion?: Maybe<(
      { __typename?: 'EcommercePercent' }
      & Pick<GqlEcommercePercent, 'percentOfVisits' | 'unitDifferenceFromLastPeriod'>
    )>, abandonment?: Maybe<(
      { __typename?: 'EcommercePercent' }
      & Pick<GqlEcommercePercent, 'currentValue' | 'unitDifferenceFromLastPeriod'>
    )>, order?: Maybe<(
      { __typename?: 'EcommerceValue' }
      & Pick<GqlEcommerceValue, 'currentValue' | 'percentDifference'>
    )>, repeatCustomers?: Maybe<(
      { __typename?: 'EcommercePercent' }
      & Pick<GqlEcommercePercent, 'percentOfVisits' | 'unitDifferenceFromLastPeriod'>
    )>, conversionFunnel?: Maybe<(
      { __typename?: 'EcommerceConversionFunnel' }
      & { visitedMenu?: Maybe<(
        { __typename?: 'EcommercePercent' }
        & Pick<GqlEcommercePercent, 'percentOfVisits'>
      )>, interacted?: Maybe<(
        { __typename?: 'EcommercePercent' }
        & Pick<GqlEcommercePercent, 'percentOfVisits'>
      )>, addedToCart?: Maybe<(
        { __typename?: 'EcommercePercent' }
        & Pick<GqlEcommercePercent, 'percentOfVisits'>
      )>, visitedCheckout?: Maybe<(
        { __typename?: 'EcommercePercent' }
        & Pick<GqlEcommercePercent, 'percentOfVisits'>
      )>, placedOrder?: Maybe<(
        { __typename?: 'EcommercePercent' }
        & Pick<GqlEcommercePercent, 'percentOfVisits'>
      )> }
    )> }
  )> }
);

export type GqlAnalyticsExportCartsMutationMutationVariables = Exact<{
  input: GqlAnalyticsInput;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsExportCartsMutationMutation = (
  { __typename?: 'Mutation' }
  & { exportFilteredCartsSummaries?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlAnalyticsMarketingCampaignsQueryQueryVariables = Exact<{
  input: GqlAnalyticsInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsMarketingCampaignsQueryQuery = (
  { __typename?: 'Query' }
  & { getMarketingCampaigns?: Maybe<(
    { __typename?: 'MarketingCampaignsResponse' }
    & { campaigns?: Maybe<Array<Maybe<(
      { __typename?: 'CampaignSummary' }
      & Pick<GqlCampaignSummary, 'utmCampaign' | 'utmSource' | 'utmMedium' | 'conversionPercentage' | 'conversionPercentageUnitChange' | 'averageOrderValue' | 'averageOrderValueChangePercentage' | 'totalSales'>
    )>>>, meta?: Maybe<(
      { __typename?: 'AnalyticsMeta' }
      & Pick<GqlAnalyticsMeta, 'totalCount'>
    )> }
  )> }
);

export type GqlAnalyticsMarketingCouponQueryQueryVariables = Exact<{
  input: GqlAnalyticsInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsMarketingCouponQueryQuery = (
  { __typename?: 'Query' }
  & { getMarketingCoupons?: Maybe<(
    { __typename?: 'MarketingCouponsResponse' }
    & { coupons?: Maybe<Array<Maybe<(
      { __typename?: 'CouponSummary' }
      & Pick<GqlCouponSummary, 'couponId' | 'couponName' | 'revenue' | 'prevTotalSales' | 'currentUsage' | 'prevUsage' | 'averageOrderValue' | 'averageOrderValueChangePercentage' | 'averageUsageChangePercentage' | 'discount'>
    )>>>, meta?: Maybe<(
      { __typename?: 'AnalyticsMeta' }
      & Pick<GqlAnalyticsMeta, 'totalCount'>
    )> }
  )> }
);

export type GqlAnalyticsMarketingDataPointsQueryQueryVariables = Exact<{
  input: GqlAnalyticsInput;
}>;


export type GqlAnalyticsMarketingDataPointsQueryQuery = (
  { __typename?: 'Query' }
  & { getMarketingDataPoints?: Maybe<(
    { __typename?: 'MarketingDataPointsResponse' }
    & Pick<GqlMarketingDataPointsResponse, 'totalCampaignsCents' | 'totalSpecialsCents' | 'totalCouponsCents'>
    & { marketingRevenue?: Maybe<Array<Maybe<(
      { __typename?: 'MarketingRevenue' }
      & Pick<GqlMarketingRevenue, 'date' | 'specialsCents' | 'couponsCents'>
    )>>> }
  )> }
);

export type GqlAnalyticsExportCampaignsMutationMutationVariables = Exact<{
  input: GqlAnalyticsInput;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsExportCampaignsMutationMutation = (
  { __typename?: 'Mutation' }
  & { exportFilteredCampaignsSummaries?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlAnalyticsExportCouponsMutationMutationVariables = Exact<{
  input: GqlAnalyticsInput;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsExportCouponsMutationMutation = (
  { __typename?: 'Mutation' }
  & { exportCouponsSummaries?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlAnalyticsExportSpecialsMutationMutationVariables = Exact<{
  input: GqlAnalyticsInput;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsExportSpecialsMutationMutation = (
  { __typename?: 'Mutation' }
  & { exportSpecialsSummaries?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlAnalyticsMarketingSpecialsQueryQueryVariables = Exact<{
  input: GqlAnalyticsInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsMarketingSpecialsQueryQuery = (
  { __typename?: 'Query' }
  & { getMarketingSpecials?: Maybe<(
    { __typename?: 'MarketingSpecialsResponse' }
    & { specials?: Maybe<Array<Maybe<(
      { __typename?: 'SpecialSummary' }
      & Pick<GqlSpecialSummary, 'specialId' | 'dispensaryId' | 'name' | 'type' | 'emailSent' | 'clickThroughPercentage' | 'conversionPercentage' | 'conversionChangePercentage' | 'averageOrderValue' | 'averageOrderValueChangePercentage' | 'totalSales'>
    )>>>, meta?: Maybe<(
      { __typename?: 'AnalyticsMeta' }
      & Pick<GqlAnalyticsMeta, 'totalCount'>
    )> }
  )> }
);

export type GqlAnalyticsExportProductsMutationMutationVariables = Exact<{
  input: GqlProductsSummaryInput;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsExportProductsMutationMutation = (
  { __typename?: 'Mutation' }
  & { exportFilteredProductSummaries?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlAnalyticsProductsQueryQueryVariables = Exact<{
  input: GqlProductsSummaryInput;
  pagination?: Maybe<GqlAnalyticsPagination>;
  sort?: Maybe<GqlAnalyticsSort>;
}>;


export type GqlAnalyticsProductsQueryQuery = (
  { __typename?: 'Query' }
  & { getFilteredProductSummaries?: Maybe<(
    { __typename?: 'FilteredProductSummaryResponse' }
    & { products?: Maybe<Array<Maybe<(
      { __typename?: 'ProductSummary' }
      & Pick<GqlProductSummary, 'productId' | 'productName' | 'brandId' | 'brandName' | 'category' | 'strainType' | 'sales' | 'percentChange' | 'dollarChange' | 'dispensaryId' | 'numSold'>
    )>>>, meta?: Maybe<(
      { __typename?: 'AnalyticsMeta' }
      & Pick<GqlAnalyticsMeta, 'totalCount'>
    )> }
  )> }
);

export type GqlSalesOrdersQueryQueryVariables = Exact<{
  input: GqlSharedSalesInput;
}>;


export type GqlSalesOrdersQueryQuery = (
  { __typename?: 'Query' }
  & { salesOrdersQuery?: Maybe<(
    { __typename?: 'salesOrdersQueryResponse' }
    & Pick<GqlSalesOrdersQueryResponse, 'totalOrders' | 'totalSales' | 'revenueChange' | 'percentChange'>
    & { ordersByDate?: Maybe<Array<Maybe<(
      { __typename?: 'AnalyticsOrdersByDate' }
      & Pick<GqlAnalyticsOrdersByDate, 'date' | 'totalOrders' | 'totalSales'>
    )>>> }
  )> }
);

export type GqlGetProductSalesByCategoryQueryVariables = Exact<{
  input: GqlSharedSalesInput;
}>;


export type GqlGetProductSalesByCategoryQuery = (
  { __typename?: 'Query' }
  & { getProductSalesByCategory?: Maybe<(
    { __typename?: 'ProductsSalesByCategory' }
    & Pick<GqlProductsSalesByCategory, 'totalSales'>
    & { categoryOptions?: Maybe<Array<Maybe<(
      { __typename?: 'DropdownOption' }
      & Pick<GqlDropdownOption, 'key' | 'label' | 'value'>
    )>>>, lineItems?: Maybe<Array<Maybe<(
      { __typename?: 'CategoryLineItem' }
      & Pick<GqlCategoryLineItem, 'price' | 'productType' | 'categoryOption' | 'totalSales' | 'percentOfTotal'>
    )>>> }
  )> }
);

export type GqlGetTopProductQueryVariables = Exact<{
  input: GqlSharedSalesInput;
}>;


export type GqlGetTopProductQuery = (
  { __typename?: 'Query' }
  & { getTopProduct?: Maybe<(
    { __typename?: 'TopProduct' }
    & Pick<GqlTopProduct, 'total'>
    & { product?: Maybe<(
      { __typename?: 'Products' }
      & Pick<GqlProducts, 'brandId' | 'brandLogo' | 'Image' | 'Name' | 'stockImage' | 'strainType' | 'type'>
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | 'name' | 'imageUrl'>
      )>, images?: Maybe<Array<(
        { __typename?: 'Products_Images' }
        & Pick<GqlProducts_Images, '_id' | 'url' | 'origin' | 'active'>
      )>> }
    )> }
  )> }
);

export type GqlCreateDispensaryBrandMutationVariables = Exact<{
  name: Scalars['String'];
  dispensaryId: Scalars['String'];
}>;


export type GqlCreateDispensaryBrandMutation = (
  { __typename?: 'Mutation' }
  & { createBrandV2?: Maybe<(
    { __typename?: 'Brand' }
    & Pick<GqlBrand, 'id' | 'name'>
  )> }
);

export type GqlBrandsForDropdownByIdsQueryVariables = Exact<{
  ids: Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>;
}>;


export type GqlBrandsForDropdownByIdsQuery = (
  { __typename?: 'Query' }
  & { getBrandsV2?: Maybe<Array<Maybe<(
    { __typename?: 'Brand' }
    & GqlBrandFragmentForDropdownFragment
  )>>> }
);

export type GqlGetCarouselProductsQueryVariables = Exact<{
  productsFilter: GqlProductsFilterInput;
}>;


export type GqlGetCarouselProductsQuery = (
  { __typename?: 'Query' }
  & { filteredProducts?: Maybe<(
    { __typename?: 'ProductsList' }
    & { products: Array<Maybe<(
      { __typename?: 'Products' }
      & Pick<GqlProducts, 'id' | 'Name' | 'Image' | 'Prices' | 'brandName' | 'strainType' | 'type'>
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | 'name'>
      )> }
    )>> }
  )> }
);

export type GqlGetMenuCustomizationQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlGetMenuCustomizationQuery = (
  { __typename?: 'Query' }
  & { filteredDispensaries?: Maybe<Array<Maybe<(
    { __typename?: 'Dispensaries' }
    & Pick<GqlDispensaries, 'menuBannerHtml' | 'menuBannerColor' | 'ageVerificationBannerHtml' | 'ageVerificationBannerColor'>
    & { webCustomizationSettings?: Maybe<(
      { __typename?: 'WebCustomizationSettings' }
      & { colorSettings: (
        { __typename?: 'ColorSettingsV2' }
        & Pick<GqlColorSettingsV2, 'navBarColor' | 'linkColor'>
      ), fontSettings: (
        { __typename?: 'FontSettings' }
        & Pick<GqlFontSettings, 'family'>
      ) }
    )>, embedSettings?: Maybe<(
      { __typename?: 'Dispensaries_profile_embed_settings' }
      & Pick<GqlDispensaries_Profile_Embed_Settings, 'disclaimerTextHtml'>
    )>, categoryPhotos?: Maybe<Array<Maybe<(
      { __typename?: 'CategoryPhoto' }
      & Pick<GqlCategoryPhoto, 'src' | 'category'>
    )>>>, location?: Maybe<(
      { __typename?: 'Dispensaries_profile_location' }
      & Pick<GqlDispensaries_Profile_Location, 'state'>
    )>, imageBanners?: Maybe<Array<Maybe<(
      { __typename?: 'ImageBanner' }
      & Pick<GqlImageBanner, '_id' | 'image' | 'mobileImage' | 'alt' | 'link' | 'position'>
    )>>> }
  )>>> }
);

export type GqlUpdateMenuCustomizationMutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  menuBannerHtml?: Maybe<Scalars['String']>;
  menuBannerColor?: Maybe<Scalars['String']>;
  ageVerificationBannerHtml?: Maybe<Scalars['String']>;
  ageVerificationBannerColor?: Maybe<Scalars['String']>;
}>;


export type GqlUpdateMenuCustomizationMutation = (
  { __typename?: 'Mutation' }
  & { dispensaryUpdate?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateWebCustomizationSettingsMutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  input: GqlUpdateWebCustomizationSettingsInput;
}>;


export type GqlUpdateWebCustomizationSettingsMutation = (
  { __typename?: 'Mutation' }
  & { updateWebCustomizationSettings?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateImageBannersMutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  input: GqlUpdateImageBannersInput;
}>;


export type GqlUpdateImageBannersMutation = (
  { __typename?: 'Mutation' }
  & { updateImageBanners?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlGetMenuSectionsForEmbedQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlGetMenuSectionsForEmbedQuery = (
  { __typename?: 'Query' }
  & { getMenuSections?: Maybe<Array<Maybe<(
    { __typename?: 'MenuSection' }
    & Pick<GqlMenuSection, 'id' | 'label' | 'sectionType'>
  )>>> }
);

export type GqlCreateMenuSectionMutationVariables = Exact<{
  menuSection: GqlMenuSectionCreateInput;
}>;


export type GqlCreateMenuSectionMutation = (
  { __typename?: 'Mutation' }
  & { createMenuSection?: Maybe<(
    { __typename?: 'MenuSection' }
    & Pick<GqlMenuSection, 'id'>
  )> }
);

export type GqlDestroyMenuSectionMutationVariables = Exact<{
  id: Scalars['String'];
  dispensaryId?: Maybe<Scalars['String']>;
}>;


export type GqlDestroyMenuSectionMutation = (
  { __typename?: 'Mutation' }
  & { destroyMenuSection?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlGetMenuSectionProductsAdminQueryVariables = Exact<{
  filter: GqlProductsFilterInput;
}>;


export type GqlGetMenuSectionProductsAdminQuery = (
  { __typename?: 'Query' }
  & { filteredProducts?: Maybe<(
    { __typename?: 'ProductsList' }
    & { products: Array<Maybe<(
      { __typename?: 'Products' }
      & Pick<GqlProducts, 'Name' | '_id' | 'id' | 'type' | 'subcategory' | 'special'>
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | 'name'>
      )>, featured?: Maybe<(
        { __typename?: 'Products_featured' }
        & Pick<GqlProducts_Featured, 'current'>
      )> }
    )>> }
  )> }
);

export type GqlGetMenuSectionsQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlGetMenuSectionsQuery = (
  { __typename?: 'Query' }
  & { getMenuSections?: Maybe<Array<Maybe<(
    { __typename?: 'MenuSection' }
    & Pick<GqlMenuSection, 'brandId' | 'category' | 'id' | 'label' | 'linkLabel' | 'position' | 'subcategory' | 'sectionType' | 'sectionName' | 'products'>
  )>>> }
);

export type GqlSortMenuSectionsMutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  ids: Array<Scalars['String']> | Scalars['String'];
}>;


export type GqlSortMenuSectionsMutation = (
  { __typename?: 'Mutation' }
  & { sortMenuSections?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlUpdateMenuSectionMutationVariables = Exact<{
  id: Scalars['ID'];
  menuSection: GqlMenuSectionUpdateInput;
}>;


export type GqlUpdateMenuSectionMutation = (
  { __typename?: 'Mutation' }
  & { updateMenuSection?: Maybe<(
    { __typename?: 'MenuSection' }
    & Pick<GqlMenuSection, 'id'>
  )> }
);

export type GqlAdminIndexProductsQueryVariables = Exact<{
  productsFilter: GqlProductsFilterInput;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
}>;


export type GqlAdminIndexProductsQuery = (
  { __typename?: 'Query' }
  & { filteredProducts?: Maybe<(
    { __typename?: 'ProductsList' }
    & { products: Array<Maybe<(
      { __typename?: 'Products' }
      & Pick<GqlProducts, 'id' | '_id' | 'brandName' | 'CBD' | 'DispensaryID' | 'duplicatedProductId' | 'medicalOnly' | 'Name' | 'Options' | 'recOnly' | 'recPrices' | 'medicalPrices' | 'Prices' | 'score' | 'Status' | 'strainType' | 'subcategory' | 'updatedAt' | 'THC' | 'type' | 'weight' | 'isBelowThreshold' | 'isBelowKioskThreshold' | 'forcedPotencyUnit'>
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | 'name'>
      )>, CBDContent?: Maybe<(
        { __typename?: 'ProductPotency' }
        & Pick<GqlProductPotency, 'unit' | 'range'>
      )>, POSMetaData?: Maybe<(
        { __typename?: 'Products_POSMetaData' }
        & Pick<GqlProducts_PosMetaData, 'canonicalID' | 'canonicalBrandName'>
      )>, THCContent?: Maybe<(
        { __typename?: 'ProductPotency' }
        & Pick<GqlProductPotency, 'unit' | 'range'>
      )>, cannabinoidsV2?: Maybe<Array<Maybe<(
        { __typename?: 'Products_CannabinoidV2' }
        & Pick<GqlProducts_CannabinoidV2, 'value' | 'unit'>
        & { cannabinoid?: Maybe<(
          { __typename?: 'Cannabinoid' }
          & Pick<GqlCannabinoid, 'name'>
        )> }
      )>>> }
    )>>, queryInfo: (
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    ) }
  )> }
);

export type GqlDisconnectProductMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlDisconnectProductMutation = (
  { __typename?: 'Mutation' }
  & { disconnectProduct?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlGetOrdersForMessagingQueryVariables = Exact<{
  input: GqlGetOrdersInput;
}>;


export type GqlGetOrdersForMessagingQuery = (
  { __typename?: 'Query' }
  & { getOrders?: Maybe<(
    { __typename?: 'AdminOrderListType' }
    & { queryInfo?: Maybe<(
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    )>, orders?: Maybe<Array<Maybe<(
      { __typename?: 'AdminOrderType' }
      & Pick<GqlAdminOrderType, 'createdAt' | 'customerId' | 'customerEmail' | 'customerName' | 'customerPhone' | 'dispensaryId' | '_id' | 'orderId' | 'status'>
    )>>> }
  )> }
);

export type GqlCreateMessagingFeatureRequestMutationVariables = Exact<{
  dispensaryName: Scalars['String'];
  email: Scalars['String'];
  userName?: Maybe<Scalars['String']>;
}>;


export type GqlCreateMessagingFeatureRequestMutation = (
  { __typename?: 'Mutation' }
  & { createMessagingFeatureRequest?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlCreateOrderingSuspensionV2MutationVariables = Exact<{
  dispensaryId: Scalars['ID'];
}>;


export type GqlCreateOrderingSuspensionV2Mutation = (
  { __typename?: 'Mutation' }
  & { createOrderingSuspensionV2?: Maybe<(
    { __typename?: 'OrderingSuspension' }
    & Pick<GqlOrderingSuspension, 'id'>
  )> }
);

export type GqlEndOrderingSuspensionV2MutationVariables = Exact<{
  dispensaryId: Scalars['ID'];
}>;


export type GqlEndOrderingSuspensionV2Mutation = (
  { __typename?: 'Mutation' }
  & { endOrderingSuspensionV2?: Maybe<(
    { __typename?: 'OrderingSuspension' }
    & Pick<GqlOrderingSuspension, 'id'>
  )> }
);

export type GqlGetOrderToPrintQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlGetOrderToPrintQuery = (
  { __typename?: 'Query' }
  & { getOrder?: Maybe<(
    { __typename?: 'GetOrderType' }
    & { order?: Maybe<(
      { __typename?: 'Orders' }
      & Pick<GqlOrders, 'createdAt' | 'credit' | 'creditTotal' | 'deliveryFee' | 'medicalOrder' | 'orderId' | 'specialInstructions' | 'taxAmount' | 'cannabisTax' | 'bottleDepositTaxCents' | 'tipAmount' | 'paymentFee' | 'paymentMethod' | 'totalCost' | 'isKioskOrder' | 'isCurbsidePickupOrder' | 'isDriveThruPickupOrder'>
      & { coupon?: Maybe<(
        { __typename?: 'Coupons' }
        & Pick<GqlCoupons, 'percentDiscount' | 'fixedDiscountInCents' | 'code'>
      )>, curbsideArrivalInfo?: Maybe<(
        { __typename?: 'CurbsideArrival' }
        & Pick<GqlCurbsideArrival, 'arrivalInformation'>
      )>, customer?: Maybe<(
        { __typename?: 'Orders_customer' }
        & { profile?: Maybe<(
          { __typename?: 'Orders_customer_profile' }
          & Pick<GqlOrders_Customer_Profile, 'firstName' | 'lastName' | 'phone' | 'birthday'>
          & { medicalCard?: Maybe<(
            { __typename?: 'Orders_medicalCard' }
            & Pick<GqlOrders_MedicalCard, 'expirationDate' | 'number'>
          )> }
        )> }
      )>, guestCustomer?: Maybe<(
        { __typename?: 'Orders_guestCustomer' }
        & Pick<GqlOrders_GuestCustomer, 'firstName' | 'lastName' | 'birthMonth' | 'birthDay' | 'birthYear'>
      )>, medicalCard?: Maybe<(
        { __typename?: 'Orders_medicalCard' }
        & Pick<GqlOrders_MedicalCard, 'expirationDate' | 'number'>
      )>, orders: Array<(
        { __typename?: 'Orders_order' }
        & Pick<GqlOrders_Order, 'basePrice' | 'option' | 'additionalOption' | 'quantity'>
        & { product?: Maybe<(
          { __typename?: 'Order_product' }
          & Pick<GqlOrder_Product, 'type' | 'Options'>
        )> }
      )>, deliveryInfo?: Maybe<(
        { __typename?: 'Orders_deliveryInfo' }
        & Pick<GqlOrders_DeliveryInfo, 'apartmentNum' | 'deliveryOption' | 'address'>
      )>, appliedRewards?: Maybe<Array<Maybe<(
        { __typename?: 'Reward' }
        & Pick<GqlReward, 'value' | 'operator' | 'brand'>
        & { redemptionAttempts?: Maybe<Array<Maybe<(
          { __typename?: 'RewardRedemptionResponse' }
          & Pick<GqlRewardRedemptionResponse, 'status' | 'redeemBy'>
          & { programResponse?: Maybe<(
            { __typename?: 'ProgramResponse' }
            & { rewardRedemption?: Maybe<(
              { __typename?: 'RewardRedemptionDetails' }
              & Pick<GqlRewardRedemptionDetails, 'id' | 'createdAt' | 'name' | 'description'>
            )> }
          )> }
        )>>> }
      )>>> }
    )> }
  )> }
);

export type GqlGetOrderQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlGetOrderQuery = (
  { __typename?: 'Query' }
  & { getOrder?: Maybe<(
    { __typename?: 'GetOrderType' }
    & Pick<GqlGetOrderType, 'archived'>
    & { order?: Maybe<(
      { __typename?: 'Orders' }
      & Pick<GqlOrders, 'createdAt' | 'credit' | 'deliveryEstimate' | 'deliveryFee' | 'driversLicense' | 'id' | 'mixAndMatch' | 'medicalOrder' | 'orderId' | 'specialInstructions' | 'status' | 'statusTimes' | 'taxAmount' | 'cannabisTax' | 'bottleDepositTaxCents' | 'tipAmount' | 'paymentFee' | 'paymentMethod' | 'subtotal' | 'totalCost' | 'isAfterHoursOrder' | 'isAnonymous' | 'isGuestOrder' | 'isPreviewOrder' | 'isKioskOrder' | 'isCurbsidePickupOrder' | 'isDriveThruPickupOrder' | 'terminal' | 'autoConfirmed' | 'autoClosed' | 'driverName' | 'driverNumber' | 'isArchived' | 'archivedBy' | 'archivedAtISO' | 'cancellationReason' | 'updatedAt' | 'receipt'>
      & { coupon?: Maybe<(
        { __typename?: 'Coupons' }
        & Pick<GqlCoupons, '_id' | 'active' | 'addedDate' | 'amount' | 'percentDiscount' | 'fixedDiscountInCents' | 'code' | 'dispensary' | 'expDate' | 'numAllowedUses' | 'numUses' | 'usedBy'>
      )>, manualDiscount?: Maybe<(
        { __typename?: 'Orders_manualDiscount' }
        & Pick<GqlOrders_ManualDiscount, 'fixedDiscountInCents' | 'percentDiscount'>
      )>, curbsideArrivalInfo?: Maybe<(
        { __typename?: 'CurbsideArrival' }
        & Pick<GqlCurbsideArrival, 'arrivalInformation'>
      )>, dispensary?: Maybe<(
        { __typename?: 'Orders_dispensary' }
        & Pick<GqlOrders_Dispensary, '_id' | 'name' | 'cName' | 'phone' | 'logoImage' | 'address' | 'timezone'>
        & { featureFlags?: Maybe<(
          { __typename?: 'Dispensaries_featureFlags' }
          & Pick<GqlDispensaries_FeatureFlags, 'hideDeliveryEstimate'>
        )> }
      )>, customer?: Maybe<(
        { __typename?: 'Orders_customer' }
        & Pick<GqlOrders_Customer, '_id'>
        & { emails?: Maybe<Array<Maybe<(
          { __typename?: 'Orders_customer_emails' }
          & Pick<GqlOrders_Customer_Emails, 'address'>
        )>>>, profile?: Maybe<(
          { __typename?: 'Orders_customer_profile' }
          & Pick<GqlOrders_Customer_Profile, 'driversLicense' | 'photoId' | 'firstName' | 'lastName' | 'email' | 'phone' | 'birthday'>
          & { medicalCard?: Maybe<(
            { __typename?: 'Orders_medicalCard' }
            & Pick<GqlOrders_MedicalCard, 'expirationDate' | 'number' | 'state' | 'photo'>
          )> }
        )> }
      )>, pos?: Maybe<(
        { __typename?: 'Orders_POS' }
        & Pick<GqlOrders_Pos, 'name' | 'externalID' | 'failureType' | 'failureReason' | 'humanReadableError'>
        & { failureAcks?: Maybe<(
          { __typename?: 'Orders_POS_FailureLocations' }
          & Pick<GqlOrders_Pos_FailureLocations, 'web' | 'terminal'>
        )> }
      )>, fleetManagementTask?: Maybe<(
        { __typename?: 'Orders_fleetManagementTask' }
        & Pick<GqlOrders_FleetManagementTask, 'adapter' | 'id'>
      )>, guestCustomer?: Maybe<(
        { __typename?: 'Orders_guestCustomer' }
        & Pick<GqlOrders_GuestCustomer, 'firstName' | 'lastName' | 'email' | 'phone' | 'birthMonth' | 'birthDay' | 'birthYear' | 'photoId'>
      )>, medicalCard?: Maybe<(
        { __typename?: 'Orders_medicalCard' }
        & Pick<GqlOrders_MedicalCard, 'expirationDate' | 'number' | 'state' | 'photo'>
      )>, orders: Array<(
        { __typename?: 'Orders_order' }
        & Pick<GqlOrders_Order, 'basePrice' | 'option' | 'price' | 'additionalOption' | 'quantity'>
        & { product?: Maybe<(
          { __typename?: 'Order_product' }
          & Pick<GqlOrder_Product, '_id' | 'Name' | 'Image' | 'strainType' | 'type' | 'subcategory' | 'Options' | 'brandId' | 'brandName' | 'AdditionalOptions' | 'Prices' | 'preTaxRecPrices' | 'preTaxMedPrices'>
          & { POSMetaData?: Maybe<(
            { __typename?: 'Products_POSMetaData' }
            & { children?: Maybe<Array<Maybe<(
              { __typename?: 'Products_POSMetaData_children' }
              & Pick<GqlProducts_PosMetaData_Children, 'canonicalName' | 'option' | 'quantity'>
            )>>> }
          )>, THCContent?: Maybe<(
            { __typename?: 'ProductPotency' }
            & Pick<GqlProductPotency, 'unit' | 'value' | 'range'>
          )>, CBDContent?: Maybe<(
            { __typename?: 'ProductPotency' }
            & Pick<GqlProductPotency, 'unit' | 'value' | 'range'>
          )> }
        )> }
      )>, statusEvents?: Maybe<Array<Maybe<(
        { __typename?: 'OrderStatusEvents' }
        & Pick<GqlOrderStatusEvents, 'event' | 'at' | 'by' | 'byType' | 'agentName'>
      )>>>, deliveryInfo?: Maybe<(
        { __typename?: 'Orders_deliveryInfo' }
        & Pick<GqlOrders_DeliveryInfo, 'address' | 'apartmentNum' | 'deliveryAddress' | 'deliveryOption' | 'lastSearchedAddress' | 'nonDeliveryAddress'>
        & { location?: Maybe<(
          { __typename?: 'Orders_location' }
          & Pick<GqlOrders_Location, 'lat' | 'lng' | 'ln1' | 'ln2' | 'city' | 'state' | 'zipcode'>
        )> }
      )>, editEvents?: Maybe<Array<Maybe<(
        { __typename?: 'OrderEditEvents' }
        & Pick<GqlOrderEditEvents, 'at' | 'by' | 'byType' | 'agentName'>
      )>>>, hypur?: Maybe<(
        { __typename?: 'HypurDetails' }
        & Pick<GqlHypurDetails, 'id'>
      )>, paysafe?: Maybe<(
        { __typename?: 'PaysafeDetails' }
        & { card?: Maybe<(
          { __typename?: 'PaysafeCard' }
          & Pick<GqlPaysafeCard, 'type' | 'lastDigits'>
        )>, authorizations?: Maybe<Array<Maybe<(
          { __typename?: 'PaysafeAuthorizations' }
          & Pick<GqlPaysafeAuthorizations, 'id' | 'amount'>
        )>>>, settlements?: Maybe<Array<Maybe<(
          { __typename?: 'PaysafeSettlements' }
          & Pick<GqlPaysafeSettlements, 'id' | 'amount' | 'cancelled'>
        )>>>, refunds?: Maybe<Array<Maybe<(
          { __typename?: 'PaysafeRefunds' }
          & Pick<GqlPaysafeRefunds, 'id' | 'amount'>
        )>>> }
      )>, moneris?: Maybe<Array<Maybe<(
        { __typename?: 'MonerisDetails' }
        & Pick<GqlMonerisDetails, 'id' | 'status' | 'transactionNumber'>
        & { card: (
          { __typename?: 'MonerisCard' }
          & Pick<GqlMonerisCard, 'brand' | 'lastDigits'>
        ) }
      )>>>, appliedRewards?: Maybe<Array<Maybe<(
        { __typename?: 'Reward' }
        & Pick<GqlReward, 'copy' | 'value' | 'operator' | 'brand'>
        & { redemptionAttempts?: Maybe<Array<Maybe<(
          { __typename?: 'RewardRedemptionResponse' }
          & Pick<GqlRewardRedemptionResponse, 'status' | 'redeemBy'>
          & { programResponse?: Maybe<(
            { __typename?: 'ProgramResponse' }
            & { rewardRedemption?: Maybe<(
              { __typename?: 'RewardRedemptionDetails' }
              & Pick<GqlRewardRedemptionDetails, 'id' | 'createdAt' | 'name' | 'description'>
            )> }
          )> }
        )>>> }
      )>>>, reservation?: Maybe<(
        { __typename?: 'OrderReservation' }
        & Pick<GqlOrderReservation, 'startTimeISO' | 'endTimeISO'>
      )> }
    )> }
  )> }
);

export type GqlFilteredCouponsForDispensaryAdminQueryVariables = Exact<{
  filter?: Maybe<GqlCouponsFilterInput>;
  sort?: Maybe<GqlCouponsSortInput>;
  pagination?: Maybe<GqlCouponsPaginationInput>;
}>;


export type GqlFilteredCouponsForDispensaryAdminQuery = (
  { __typename?: 'Query' }
  & { filteredCoupons?: Maybe<(
    { __typename?: 'CouponList' }
    & { queryInfo?: Maybe<(
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    )>, coupons?: Maybe<Array<Maybe<(
      { __typename?: 'Coupons' }
      & Pick<GqlCoupons, '_id' | 'active' | 'addedDate' | 'code' | 'dispensary' | 'dispensaryId' | 'expDate' | 'fixedDiscountInCents' | 'numAllowedUses' | 'numUses' | 'percentDiscount' | 'oneUsePerCustomer' | 'reimbursed' | 'usedBy'>
      & { applicableCategories?: Maybe<Array<Maybe<(
        { __typename?: 'couponApplicableCategory' }
        & Pick<GqlCouponApplicableCategory, 'category' | 'subcategory'>
      )>>>, restrictions?: Maybe<(
        { __typename?: 'couponRestrictions' }
        & Pick<GqlCouponRestrictions, 'minimumPurchase' | 'minimumPurchaseInCents' | 'noSpecials'>
      )> }
    )>>> }
  )> }
);

export type GqlEnterpriseSpecialDataFragment = (
  { __typename?: 'EnterpriseSpecial' }
  & Pick<GqlEnterpriseSpecial, '_id' | 'active' | 'menuDisplayName' | 'menuDisplayDescription' | 'menuDisplayImage' | 'bogoConditionLogicOperator' | 'bogoRewardLogicOperator' | 'cipher' | 'clicks' | 'complete' | 'createdAt' | 'createdBy' | 'description' | 'descriptionHtml' | 'discount' | 'discountedPrices' | 'discountPrecedence' | 'discountStacking' | 'dispensaryId' | 'dispensaries' | 'duplicatedFrom' | 'emailSpecial' | 'endDay' | 'endStamp' | 'endTime' | 'enterpriseId' | 'enterpriseSpecialId' | 'heading' | 'id' | 'inactiveDispensaries' | 'isRecurring' | 'localTime' | 'menuType' | 'name' | 'percentDiscount' | 'productDiscounts' | 'productGroup' | 'productGroupRewards' | 'products' | 'redemptionLimit' | 'scope' | 'source' | 'sourceId' | 'specialRestrictions' | 'stackingBehavior' | 'stackingMode' | 'startDay' | 'startStamp' | 'startTime' | 'specialType' | 'subject' | 'targetPrice' | 'timezone' | 'updatedAt' | 'updatedBy' | 'version'>
  & { displayRank: GqlEnterpriseSpecial['dollarDiscount'] }
  & { bogoConditions?: Maybe<Array<Maybe<(
    { __typename?: 'BogoConditionItem' }
    & Pick<GqlBogoConditionItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'productGroup' | 'productId' | 'quantity' | 'weight' | 'weightOperator'>
  )>>>, bogoRewards?: Maybe<Array<Maybe<(
    { __typename?: 'BogoRewardItem' }
    & Pick<GqlBogoRewardItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'dollarDiscount' | 'productGroup' | 'productId' | 'percentDiscount' | 'quantity' | 'targetPrice' | 'weight'>
  )>>>, discountToCart?: Maybe<(
    { __typename?: 'DiscountToCart' }
    & Pick<GqlDiscountToCart, '_id' | 'enabled' | 'discountType' | 'value'>
  )>, excludedProducts?: Maybe<Array<Maybe<(
    { __typename?: 'SpecialsExcludedProducts' }
    & Pick<GqlSpecialsExcludedProducts, '_id' | 'Name' | 'key'>
    & { conditions?: Maybe<Array<Maybe<(
      { __typename?: 'SpecialsExcludedBOGO' }
      & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
    )>>>, rewards?: Maybe<Array<Maybe<(
      { __typename?: 'SpecialsExcludedBOGO' }
      & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
    )>>> }
  )>>>, itemsForAPrice?: Maybe<(
    { __typename?: 'ItemsForAPrice' }
    & Pick<GqlItemsForAPrice, '_id' | 'enabled' | 'value'>
  )>, recurring?: Maybe<(
    { __typename?: 'SpecialsRecurring' }
    & Pick<GqlSpecialsRecurring, 'days' | 'endDate' | 'endTime' | 'setEndDate' | 'startTime'>
  )>, totalQuantity?: Maybe<(
    { __typename?: 'TotalQuantity' }
    & Pick<GqlTotalQuantity, 'enabled' | 'maxQuantity' | 'quantity' | 'quantityOperator'>
  )>, totalWeight?: Maybe<(
    { __typename?: 'TotalWeight' }
    & Pick<GqlTotalWeight, 'enabled' | 'weight' | 'weightOperator'>
  )>, totalSpend?: Maybe<(
    { __typename?: 'TotalSpend' }
    & Pick<GqlTotalSpend, 'enabled' | 'maximumSpend' | 'minimumSpend' | 'spendOperator'>
  )> }
);

export type GqlSpecialDataFragment = (
  { __typename?: 'Specials' }
  & Pick<GqlSpecials, '_id' | 'active' | 'menuDisplayName' | 'menuDisplayDescription' | 'bogoConditionLogicOperator' | 'menuDisplayImage' | 'bogoRewardLogicOperator' | 'clicks' | 'createdAt' | 'createdBy' | 'description' | 'descriptionHtml' | 'discount' | 'discountedPrices' | 'discountPrecedence' | 'discountStacking' | 'dispensaryId' | 'displayRank' | 'emailSpecial' | 'endDay' | 'endStamp' | 'endTime' | 'heading' | 'isRecurring' | 'menuType' | 'name' | 'percentDiscount' | 'productDiscounts' | 'productGroup' | 'productGroupRewards' | 'products' | 'redemptionLimit' | 'scope' | 'source' | 'sourceId' | 'specialId' | 'specialRestrictions' | 'specialType' | 'stackingBehavior' | 'stackingMode' | 'startDate' | 'startDay' | 'startStamp' | 'startTime' | 'subject' | 'targetPrice' | 'updatedAt' | 'updatedBy' | 'version'>
  & { bogoConditions?: Maybe<Array<Maybe<(
    { __typename?: 'BogoConditionItem' }
    & Pick<GqlBogoConditionItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'productGroup' | 'productId' | 'quantity' | 'weight' | 'weightOperator'>
  )>>>, bogoRewards?: Maybe<Array<Maybe<(
    { __typename?: 'BogoRewardItem' }
    & Pick<GqlBogoRewardItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'dollarDiscount' | 'productGroup' | 'productId' | 'percentDiscount' | 'quantity' | 'targetPrice' | 'weight'>
  )>>>, discountToCart?: Maybe<(
    { __typename?: 'DiscountToCart' }
    & Pick<GqlDiscountToCart, '_id' | 'enabled' | 'discountType' | 'value'>
  )>, excludedProducts?: Maybe<Array<Maybe<(
    { __typename?: 'SpecialsExcludedProducts' }
    & Pick<GqlSpecialsExcludedProducts, '_id' | 'Name' | 'key'>
    & { conditions?: Maybe<Array<Maybe<(
      { __typename?: 'SpecialsExcludedBOGO' }
      & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
    )>>>, rewards?: Maybe<Array<Maybe<(
      { __typename?: 'SpecialsExcludedBOGO' }
      & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
    )>>> }
  )>>>, itemsForAPrice?: Maybe<(
    { __typename?: 'ItemsForAPrice' }
    & Pick<GqlItemsForAPrice, '_id' | 'enabled' | 'value'>
  )>, recurring?: Maybe<(
    { __typename?: 'SpecialsRecurring' }
    & Pick<GqlSpecialsRecurring, 'days' | 'endDate' | 'endTime' | 'setEndDate' | 'startTime'>
  )>, totalQuantity?: Maybe<(
    { __typename?: 'TotalQuantity' }
    & Pick<GqlTotalQuantity, 'enabled' | 'maxQuantity' | 'quantity' | 'quantityOperator'>
  )>, totalWeight?: Maybe<(
    { __typename?: 'TotalWeight' }
    & Pick<GqlTotalWeight, 'enabled' | 'weight' | 'weightOperator'>
  )>, totalSpend?: Maybe<(
    { __typename?: 'TotalSpend' }
    & Pick<GqlTotalSpend, 'enabled' | 'maximumSpend' | 'minimumSpend' | 'spendOperator'>
  )> }
);

export type GqlAdminEnterpriseProductsQueryVariables = Exact<{
  enterpriseId: Scalars['ID'];
}>;


export type GqlAdminEnterpriseProductsQuery = (
  { __typename?: 'Query' }
  & { enterpriseProducts?: Maybe<(
    { __typename?: 'EnterpriseProducts' }
    & { products?: Maybe<Array<Maybe<(
      { __typename?: 'EnterpriseProduct' }
      & Pick<GqlEnterpriseProduct, 'brandId' | 'brandName' | 'enterpriseProductId' | 'medicalOnly' | 'medicalPrices' | 'name' | 'options' | 'prices' | 'recOnly' | 'recPrices' | 'subcategory' | 'type'>
      & { dispensaryProducts?: Maybe<Array<Maybe<(
        { __typename?: 'EnterpriseDispensaryProduct' }
        & Pick<GqlEnterpriseDispensaryProduct, 'brandId' | 'brandName' | 'dispensaryId' | 'id' | 'status'>
      )>>> }
    )>>> }
  )> }
);

export type GqlGetEnterpriseSpecialQueryVariables = Exact<{
  enterpriseSpecialId: Scalars['ID'];
}>;


export type GqlGetEnterpriseSpecialQuery = (
  { __typename?: 'Query' }
  & { getEnterpriseSpecial?: Maybe<(
    { __typename?: 'EnterpriseSpecial' }
    & Pick<GqlEnterpriseSpecial, '_id' | 'active' | 'menuDisplayName' | 'menuDisplayDescription' | 'menuDisplayImage' | 'bogoConditionLogicOperator' | 'bogoRewardLogicOperator' | 'cipher' | 'clicks' | 'complete' | 'createdAt' | 'createdBy' | 'description' | 'descriptionHtml' | 'discount' | 'discountedPrices' | 'discountPrecedence' | 'discountStacking' | 'dispensaryId' | 'dispensaries' | 'displayRank' | 'dollarDiscount' | 'duplicatedFrom' | 'earliestStartStamp' | 'emailSpecial' | 'endDay' | 'endStamp' | 'endTime' | 'enterpriseId' | 'enterpriseSpecialId' | 'heading' | 'inactiveDispensaries' | 'isRecurring' | 'latestEndStamp' | 'localTime' | 'menuType' | 'name' | 'percentDiscount' | 'productDiscounts' | 'productGroup' | 'productGroupRewards' | 'products' | 'redemptionLimit' | 'scope' | 'source' | 'sourceId' | 'specialRestrictions' | 'stackingBehavior' | 'stackingMode' | 'startDay' | 'startStamp' | 'startTime' | 'specialType' | 'subject' | 'targetPrice' | 'timezone' | 'updatedAt' | 'updatedBy' | 'version'>
    & { bogoConditions?: Maybe<Array<Maybe<(
      { __typename?: 'BogoConditionItem' }
      & Pick<GqlBogoConditionItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'selectedCategoriesAndSubcategories' | 'productGroup' | 'productId' | 'quantity' | 'weight' | 'weightOperator'>
    )>>>, bogoRewards?: Maybe<Array<Maybe<(
      { __typename?: 'BogoRewardItem' }
      & Pick<GqlBogoRewardItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'selectedCategoriesAndSubcategories' | 'dollarDiscount' | 'productGroup' | 'productId' | 'percentDiscount' | 'quantity' | 'targetPrice' | 'weight'>
    )>>>, discountToCart?: Maybe<(
      { __typename?: 'DiscountToCart' }
      & Pick<GqlDiscountToCart, '_id' | 'enabled' | 'discountType' | 'value'>
    )>, excludedProducts?: Maybe<Array<Maybe<(
      { __typename?: 'SpecialsExcludedProducts' }
      & Pick<GqlSpecialsExcludedProducts, '_id' | 'Name' | 'key'>
      & { conditions?: Maybe<Array<Maybe<(
        { __typename?: 'SpecialsExcludedBOGO' }
        & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
      )>>>, rewards?: Maybe<Array<Maybe<(
        { __typename?: 'SpecialsExcludedBOGO' }
        & Pick<GqlSpecialsExcludedBogo, '_id' | 'Name' | 'key'>
      )>>> }
    )>>>, itemsForAPrice?: Maybe<(
      { __typename?: 'ItemsForAPrice' }
      & Pick<GqlItemsForAPrice, '_id' | 'enabled' | 'value'>
    )>, recurring?: Maybe<(
      { __typename?: 'SpecialsRecurring' }
      & Pick<GqlSpecialsRecurring, 'days' | 'endDate' | 'endTime' | 'setEndDate' | 'startTime'>
    )>, totalQuantity?: Maybe<(
      { __typename?: 'TotalQuantity' }
      & Pick<GqlTotalQuantity, 'enabled' | 'maxQuantity' | 'quantity' | 'quantityOperator'>
    )>, totalSpend?: Maybe<(
      { __typename?: 'TotalSpend' }
      & Pick<GqlTotalSpend, 'enabled' | 'maximumSpend' | 'minimumSpend' | 'spendOperator'>
    )>, totalWeight?: Maybe<(
      { __typename?: 'TotalWeight' }
      & Pick<GqlTotalWeight, 'enabled' | 'weight' | 'weightOperator'>
    )> }
  )> }
);

export type GqlAdminSpecialsProductsQueryVariables = Exact<{
  productsFilter: GqlProductsFilterInput;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
}>;


export type GqlAdminSpecialsProductsQuery = (
  { __typename?: 'Query' }
  & { filteredProducts?: Maybe<(
    { __typename?: 'ProductsList' }
    & { products: Array<Maybe<(
      { __typename?: 'Products' }
      & Pick<GqlProducts, '_id' | 'brandDescription' | 'brandId' | 'brandName' | 'DispensaryID' | 'id' | 'Image' | 'medicalOnly' | 'medicalPrices' | 'Name' | 'Options' | 'Prices' | 'recOnly' | 'recPrices' | 'Status' | 'subcategory' | 'type' | 'updatedAt'>
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, '_id' | 'id' | 'description' | 'name'>
      )> }
    )>> }
  )> }
);

export type GqlGetEnterpriseSpecialsHistoryQueryVariables = Exact<{
  enterpriseId: Scalars['ID'];
  enterpriseSpecialId: Scalars['ID'];
}>;


export type GqlGetEnterpriseSpecialsHistoryQuery = (
  { __typename?: 'Query' }
  & { getEnterpriseSpecialsHistory?: Maybe<(
    { __typename?: 'EnterpriseSpecialsHistory' }
    & Pick<GqlEnterpriseSpecialsHistory, 'id' | 'enterpriseSpecialId'>
    & { versions?: Maybe<Array<Maybe<(
      { __typename?: 'EnterpriseSpecial' }
      & GqlEnterpriseSpecialDataFragment
    )>>> }
  )> }
);

export type GqlGetSpecialsHistoryQueryVariables = Exact<{
  specialId: Scalars['ID'];
}>;


export type GqlGetSpecialsHistoryQuery = (
  { __typename?: 'Query' }
  & { getSpecialsHistory?: Maybe<(
    { __typename?: 'SpecialsHistory' }
    & Pick<GqlSpecialsHistory, 'id'>
    & { versions?: Maybe<Array<Maybe<(
      { __typename?: 'Specials' }
      & GqlSpecialDataFragment
    )>>> }
  )> }
);

export type GqlCreatePlusApiKeyV2MutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  keyType: PlusApiKeyType;
}>;


export type GqlCreatePlusApiKeyV2Mutation = (
  { __typename?: 'Mutation' }
  & { createPlusApiKeyV2?: Maybe<(
    { __typename?: 'PlusApiKey' }
    & Pick<GqlPlusApiKey, 'id'>
  )> }
);

export type GqlCreatePlusEnterpriseApiKeyMutationVariables = Exact<{
  enterpriseId: Scalars['String'];
  keyType: PlusApiKeyType;
}>;


export type GqlCreatePlusEnterpriseApiKeyMutation = (
  { __typename?: 'Mutation' }
  & { createPlusEnterpriseApiKey?: Maybe<(
    { __typename?: 'PlusApiKey' }
    & Pick<GqlPlusApiKey, 'id'>
  )> }
);

export type GqlExpirePlusApiKeyMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlExpirePlusApiKeyMutation = (
  { __typename?: 'Mutation' }
  & { expirePlusApiKey?: Maybe<(
    { __typename?: 'PlusApiKey' }
    & Pick<GqlPlusApiKey, 'id'>
  )> }
);

export type GqlExpirePlusEnterpriseApiKeyMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlExpirePlusEnterpriseApiKeyMutation = (
  { __typename?: 'Mutation' }
  & { expirePlusEnterpriseApiKey?: Maybe<(
    { __typename?: 'PlusApiKey' }
    & Pick<GqlPlusApiKey, 'id'>
  )> }
);

export type GqlGetEnterpriseIdForApiKeysQueryVariables = Exact<{
  dispensaryFilter: GqlDispensariesFilterInput;
}>;


export type GqlGetEnterpriseIdForApiKeysQuery = (
  { __typename?: 'Query' }
  & { filteredDispensaries?: Maybe<Array<Maybe<(
    { __typename?: 'Dispensaries' }
    & { retailer: (
      { __typename?: 'Retailer' }
      & Pick<GqlRetailer, 'enterpriseId'>
    ) }
  )>>> }
);

export type GqlGetPlusApiKeysQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlGetPlusApiKeysQuery = (
  { __typename?: 'Query' }
  & { getPlusApiKeys?: Maybe<Array<Maybe<(
    { __typename?: 'PlusApiKey' }
    & Pick<GqlPlusApiKey, 'createdAt' | 'fresh' | 'id' | 'key' | 'keyType' | 'lastRequestAt'>
  )>>> }
);

export type GqlGetPlusEnterpriseApiKeysQueryVariables = Exact<{
  enterpriseId: Scalars['String'];
}>;


export type GqlGetPlusEnterpriseApiKeysQuery = (
  { __typename?: 'Query' }
  & { getPlusEnterpriseApiKeys?: Maybe<Array<Maybe<(
    { __typename?: 'PlusApiKey' }
    & Pick<GqlPlusApiKey, 'createdAt' | 'fresh' | 'id' | 'key' | 'keyType' | 'lastRequestAt'>
  )>>> }
);

export type GqlGetInvoicePdfQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlGetInvoicePdfQuery = (
  { __typename?: 'Query' }
  & { getInvoicePdf: (
    { __typename?: 'ChargebeeDownload' }
    & Pick<GqlChargebeeDownload, 'downloadUrl'>
  ) }
);

export type GqlEditCustomerV2MutationVariables = Exact<{
  billingContactEmails?: Maybe<Array<Scalars['String']> | Scalars['String']>;
  billingNotificationEnabled?: Maybe<Scalars['Boolean']>;
  chargebeeCustomerId: Scalars['String'];
}>;


export type GqlEditCustomerV2Mutation = (
  { __typename?: 'Mutation' }
  & { editCustomerV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlGetEnterpriseBillingVersionQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlGetEnterpriseBillingVersionQuery = (
  { __typename?: 'Query' }
  & { filteredDispensaries?: Maybe<Array<Maybe<(
    { __typename?: 'Dispensaries' }
    & { retailer: (
      { __typename?: 'Retailer' }
      & Pick<GqlRetailer, 'id'>
      & { enterprise?: Maybe<(
        { __typename?: 'Enterprise' }
        & Pick<GqlEnterprise, 'id' | 'billingVersion'>
      )> }
    ) }
  )>>> }
);

export type GqlAddBankPaymentMethodV2MutationVariables = Exact<{
  chargebeeCustomerId: Scalars['String'];
  publicToken: Scalars['String'];
  accountId: Scalars['String'];
}>;


export type GqlAddBankPaymentMethodV2Mutation = (
  { __typename?: 'Mutation' }
  & { addBankPaymentMethodV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlAddPaymentMethodV2MutationVariables = Exact<{
  chargebeeCustomerId: Scalars['String'];
  token: Scalars['String'];
}>;


export type GqlAddPaymentMethodV2Mutation = (
  { __typename?: 'Mutation' }
  & { addPaymentMethodV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlAddRetailersToBillingGroupMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
}>;


export type GqlAddRetailersToBillingGroupMutation = (
  { __typename?: 'Mutation' }
  & { associateRetailers?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlDeleteSubscriptionMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
}>;


export type GqlDeleteSubscriptionMutation = (
  { __typename?: 'Mutation' }
  & { deleteSubscription?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlPauseSubscriptionMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
}>;


export type GqlPauseSubscriptionMutation = (
  { __typename?: 'Mutation' }
  & { pauseSubscription?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlRemoveRetailersFromBillingGroupMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
}>;


export type GqlRemoveRetailersFromBillingGroupMutation = (
  { __typename?: 'Mutation' }
  & { dissociateRetailers?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlResumeSubscriptionMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
}>;


export type GqlResumeSubscriptionMutation = (
  { __typename?: 'Mutation' }
  & { resumeSubscription?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlSetupRetailerBankPaymentMethodMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
  accountId: Scalars['String'];
  token: Scalars['String'];
}>;


export type GqlSetupRetailerBankPaymentMethodMutation = (
  { __typename?: 'Mutation' }
  & { setupRetailerBankPaymentMethod?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlSetupRetailerCreditPaymentMethodMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
  token: Scalars['String'];
}>;


export type GqlSetupRetailerCreditPaymentMethodMutation = (
  { __typename?: 'Mutation' }
  & { setupRetailerCreditPaymentMethod?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateBillingNotificationsMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
  billingContactEmails: Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>;
  billingNotificationEnabled: Scalars['Boolean'];
}>;


export type GqlUpdateBillingNotificationsMutation = (
  { __typename?: 'Mutation' }
  & { updateBillingNotifications?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateChargebeeSubscriptionMutationVariables = Exact<{
  billingPeriod?: Maybe<BillingPeriod>;
  chargebeeSubscriptionId: Scalars['String'];
  endFreeTrial?: Maybe<Scalars['Boolean']>;
  freeTrialEndDate?: Maybe<Scalars['Int']>;
  manualPayments?: Maybe<Scalars['Boolean']>;
  pauseSubscription?: Maybe<Scalars['Boolean']>;
  priceInCents?: Maybe<Scalars['Int']>;
}>;


export type GqlUpdateChargebeeSubscriptionMutation = (
  { __typename?: 'Mutation' }
  & { updateChargebeeSubscription?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlUpdateSubscriptionBillingPeriodMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
  billingPeriod: BillingPeriod;
}>;


export type GqlUpdateSubscriptionBillingPeriodMutation = (
  { __typename?: 'Mutation' }
  & { updateSubscriptionBillingPeriod?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateSubscriptionManualPaymentsMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
  manualPayments: Scalars['Boolean'];
}>;


export type GqlUpdateSubscriptionManualPaymentsMutation = (
  { __typename?: 'Mutation' }
  & { updateSubscriptionManualPayments?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateSubscriptionPriceMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
  priceInCents: Scalars['String'];
}>;


export type GqlUpdateSubscriptionPriceMutation = (
  { __typename?: 'Mutation' }
  & { updateSubscriptionPrice?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateSubscriptionTrialMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
  endDate?: Maybe<Scalars['String']>;
}>;


export type GqlUpdateSubscriptionTrialMutation = (
  { __typename?: 'Mutation' }
  & { updateSubscriptionTrial?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlGetChargebeeHostedPageQueryVariables = Exact<{
  chargebeeCustomerId: Scalars['String'];
  pageType: Scalars['String'];
}>;


export type GqlGetChargebeeHostedPageQuery = (
  { __typename?: 'Query' }
  & { getChargebeeHostedPage?: Maybe<(
    { __typename?: 'ChargeBeeHostedPage' }
    & Pick<GqlChargeBeeHostedPage, 'id' | 'type' | 'url' | 'state' | 'embed' | 'createdAt' | 'expiresAt' | 'updatedAt' | 'object'>
  )> }
);

export type GqlSetupBillingV2MutationVariables = Exact<{
  customerName: Scalars['String'];
  dispensaryIds: Array<Scalars['String']> | Scalars['String'];
}>;


export type GqlSetupBillingV2Mutation = (
  { __typename?: 'Mutation' }
  & { setupBillingV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlSetupRetailerBillingMutationVariables = Exact<{
  retailerIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
}>;


export type GqlSetupRetailerBillingMutation = (
  { __typename?: 'Mutation' }
  & { setupRetailerBilling?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlDeleteDeviceV2MutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GqlDeleteDeviceV2Mutation = (
  { __typename?: 'Mutation' }
  & { deleteDeviceV2?: Maybe<(
    { __typename?: 'Devices' }
    & Pick<GqlDevices, '_id'>
  )> }
);

export type GqlConsumeDeviceAccessCodeMutationVariables = Exact<{
  accessCode: Scalars['String'];
  dispensaryId: Scalars['String'];
}>;


export type GqlConsumeDeviceAccessCodeMutation = (
  { __typename?: 'Mutation' }
  & { consumeDeviceAccessCode?: Maybe<(
    { __typename?: 'DeviceAccessCode' }
    & Pick<GqlDeviceAccessCode, 'accessCode' | 'channel' | 'channelKey'>
  )> }
);

export type GqlUpdateAutoPrintDevicesV2MutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  deviceIds: Array<Scalars['String']> | Scalars['String'];
}>;


export type GqlUpdateAutoPrintDevicesV2Mutation = (
  { __typename?: 'Mutation' }
  & { updateAutoPrintDevicesV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlDeleteSpecialHoursMutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  specialHoursIds: Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>;
}>;


export type GqlDeleteSpecialHoursMutation = (
  { __typename?: 'Mutation' }
  & { deleteSpecialHours?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlUpdateHoursSettingsMutationVariables = Exact<{
  input: GqlHoursSettingsUpdateInput;
}>;


export type GqlUpdateHoursSettingsMutation = (
  { __typename?: 'Mutation' }
  & { updateHoursSettings?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlGetComplianceConfigsForDropdownQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlGetComplianceConfigsForDropdownQuery = (
  { __typename?: 'Query' }
  & { getComplianceConfigs: Array<(
    { __typename?: 'ComplianceConfig' }
    & Pick<GqlComplianceConfig, 'id'>
  )> }
);

export type GqlCreateIntegrationMutationVariables = Exact<{
  input: GqlIntegrationsUpdateInput;
}>;


export type GqlCreateIntegrationMutation = (
  { __typename?: 'Mutation' }
  & { createIntegration?: Maybe<(
    { __typename?: 'Integrations' }
    & Pick<GqlIntegrations, 'adapter' | '_id'>
  )> }
);

export type GqlHubspotCrmPropertiesQueryVariables = Exact<{
  integrationId: Scalars['String'];
}>;


export type GqlHubspotCrmPropertiesQuery = (
  { __typename?: 'Query' }
  & { hubspotCrmProperties?: Maybe<(
    { __typename?: 'CrmProperties' }
    & { localProperties?: Maybe<(
      { __typename?: 'PropertyTypes' }
      & { contact?: Maybe<Array<Maybe<(
        { __typename?: 'ContactCrmProperty' }
        & Pick<GqlContactCrmProperty, 'id' | 'value'>
      )>>>, deal?: Maybe<Array<Maybe<(
        { __typename?: 'DealCrmProperty' }
        & Pick<GqlDealCrmProperty, 'id' | 'value'>
      )>>>, product?: Maybe<Array<Maybe<(
        { __typename?: 'ProductCrmProperty' }
        & Pick<GqlProductCrmProperty, 'id' | 'value'>
      )>>> }
    )>, foreignProperties?: Maybe<(
      { __typename?: 'PropertyTypes' }
      & { contact?: Maybe<Array<Maybe<(
        { __typename?: 'ContactCrmProperty' }
        & Pick<GqlContactCrmProperty, 'id' | 'value'>
      )>>>, deal?: Maybe<Array<Maybe<(
        { __typename?: 'DealCrmProperty' }
        & Pick<GqlDealCrmProperty, 'id' | 'value'>
      )>>>, product?: Maybe<Array<Maybe<(
        { __typename?: 'ProductCrmProperty' }
        & Pick<GqlProductCrmProperty, 'id' | 'value'>
      )>>> }
    )> }
  )> }
);

export type GqlIntegrationsDeleteMutationVariables = Exact<{
  integrationId: Scalars['String'];
}>;


export type GqlIntegrationsDeleteMutation = (
  { __typename?: 'Mutation' }
  & { integrationsDelete?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlUpdateIntegrationMutationVariables = Exact<{
  integrationId: Scalars['String'];
  integration: GqlIntegrationsUpdateInput;
}>;


export type GqlUpdateIntegrationMutation = (
  { __typename?: 'Mutation' }
  & { updateIntegration?: Maybe<(
    { __typename?: 'Integrations' }
    & Pick<GqlIntegrations, 'adapter' | '_id'>
  )> }
);

export type GqlIntegrationsWipeMenuInArmaMutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  integrationId: Scalars['String'];
}>;


export type GqlIntegrationsWipeMenuInArmaMutation = (
  { __typename?: 'Mutation' }
  & { integrationsWipeMenuInArma?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlIntegrationsWipeMenuMutationVariables = Exact<{
  integrationId: Scalars['String'];
}>;


export type GqlIntegrationsWipeMenuMutation = (
  { __typename?: 'Mutation' }
  & { integrationsWipeMenu?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlReservationSlotsByOrderTypeQueryVariables = Exact<{
  dispensaryId: Scalars['ID'];
}>;


export type GqlReservationSlotsByOrderTypeQuery = (
  { __typename?: 'Query' }
  & { getReservationSlotsByOrderType?: Maybe<(
    { __typename?: 'MaxReservationSlotsByOrderType' }
    & { inStorePickup?: Maybe<(
      { __typename?: 'MaxReservationSlotsGroup' }
      & { maxReservationSlotsByDay?: Maybe<(
        { __typename?: 'MaxReservationSlotsByDay' }
        & GqlMaxReservationSlotsByDayFragmentFragment
      )>, maxReservationSlotsByDate?: Maybe<Array<Maybe<(
        { __typename?: 'MaxReservationSlot' }
        & GqlMaxReservationSlotFragmentFragment
      )>>> }
    )>, curbsidePickup?: Maybe<(
      { __typename?: 'MaxReservationSlotsGroup' }
      & { maxReservationSlotsByDay?: Maybe<(
        { __typename?: 'MaxReservationSlotsByDay' }
        & GqlMaxReservationSlotsByDayFragmentFragment
      )>, maxReservationSlotsByDate?: Maybe<Array<Maybe<(
        { __typename?: 'MaxReservationSlot' }
        & GqlMaxReservationSlotFragmentFragment
      )>>> }
    )>, driveThruPickup?: Maybe<(
      { __typename?: 'MaxReservationSlotsGroup' }
      & { maxReservationSlotsByDay?: Maybe<(
        { __typename?: 'MaxReservationSlotsByDay' }
        & GqlMaxReservationSlotsByDayFragmentFragment
      )>, maxReservationSlotsByDate?: Maybe<Array<Maybe<(
        { __typename?: 'MaxReservationSlot' }
        & GqlMaxReservationSlotFragmentFragment
      )>>> }
    )>, delivery?: Maybe<(
      { __typename?: 'MaxReservationSlotsGroup' }
      & { maxReservationSlotsByDay?: Maybe<(
        { __typename?: 'MaxReservationSlotsByDay' }
        & GqlMaxReservationSlotsByDayFragmentFragment
      )>, maxReservationSlotsByDate?: Maybe<Array<Maybe<(
        { __typename?: 'MaxReservationSlot' }
        & GqlMaxReservationSlotFragmentFragment
      )>>> }
    )> }
  )> }
);

export type GqlGetRetailerEnrollmentStatusQueryVariables = Exact<{
  entityId: Scalars['String'];
  entityType: EntityTypes;
}>;


export type GqlGetRetailerEnrollmentStatusQuery = (
  { __typename?: 'Query' }
  & { getRetailerEnrollmentStatus?: Maybe<(
    { __typename?: 'RetailerEnrollment' }
    & { enrollment?: Maybe<(
      { __typename?: 'Status' }
      & Pick<GqlStatus, 'status'>
    )> }
  )> }
);

export type GqlUpdateOrderingSettingsMutationVariables = Exact<{
  input: GqlOrderingSettingsUpdateInput;
}>;


export type GqlUpdateOrderingSettingsMutation = (
  { __typename?: 'Mutation' }
  & { updateOrderingSettings?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlUpdateReservationSlotsMutationVariables = Exact<{
  input: GqlReservationSlotsUpdateInput;
}>;


export type GqlUpdateReservationSlotsMutation = (
  { __typename?: 'Mutation' }
  & { updateReservationSlots?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlYearInReviewStatsQueryQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlYearInReviewStatsQueryQuery = (
  { __typename?: 'Query' }
  & { yearInReviewQuery?: Maybe<(
    { __typename?: 'YearInReviewResponse' }
    & { totalSales?: Maybe<(
      { __typename?: 'totalSales' }
      & Pick<GqlTotalSales, 'salesTotal'>
    )> }
  )> }
);

export type GqlYearInReviewPngUrlQueryQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlYearInReviewPngUrlQueryQuery = (
  { __typename?: 'Query' }
  & { yearInReviewQuery?: Maybe<(
    { __typename?: 'YearInReviewResponse' }
    & Pick<GqlYearInReviewResponse, 'pngUrl'>
  )> }
);

export type GqlYearInReviewQueryQueryVariables = Exact<{
  dispensaryId: Scalars['String'];
}>;


export type GqlYearInReviewQueryQuery = (
  { __typename?: 'Query' }
  & { yearInReviewQuery?: Maybe<(
    { __typename?: 'YearInReviewResponse' }
    & Pick<GqlYearInReviewResponse, 'conversionRate' | 'totalPounds'>
    & { categories?: Maybe<Array<Maybe<(
      { __typename?: 'category' }
      & Pick<GqlCategory, 'category' | 'sales' | 'salesPercent'>
    )>>>, orderTypes?: Maybe<Array<Maybe<(
      { __typename?: 'orderType' }
      & Pick<GqlOrderType, 'name' | 'value' | 'orders' | 'percentage'>
    )>>>, totalSales?: Maybe<(
      { __typename?: 'totalSales' }
      & Pick<GqlTotalSales, 'onlineOrdersTotal' | 'salesTotal'>
    )>, topSeller?: Maybe<(
      { __typename?: 'topSeller' }
      & Pick<GqlTopSeller, 'productName' | 'brandName' | 'totalSale' | 'productImage'>
    )>, largestOrder?: Maybe<(
      { __typename?: 'largestOrder' }
      & Pick<GqlLargestOrder, 'dateOfLargestOrder' | 'percentageHigher' | 'orderAmount'>
    )>, busiestDay?: Maybe<(
      { __typename?: 'busiestDay' }
      & Pick<GqlBusiestDay, 'day' | 'totalOrders' | 'totalSales' | 'totalDeliveries' | 'averageFill' | 'percentageIncrease'>
    )> }
  )> }
);

export type GqlGetEnterpriseSpecialsQueryVariables = Exact<{
  enterpriseId: Scalars['ID'];
}>;


export type GqlGetEnterpriseSpecialsQuery = (
  { __typename?: 'Query' }
  & { enterpriseSpecials?: Maybe<Array<Maybe<(
    { __typename?: 'EnterpriseSpecial' }
    & Pick<GqlEnterpriseSpecial, 'active' | 'complete' | 'createdAt' | 'dispensaryId' | 'endDay' | 'endStamp' | 'enterpriseId' | 'enterpriseSpecialId' | 'id' | 'inactiveDispensaries' | 'isRecurring' | 'localTime' | 'name' | 'scope' | 'specialType' | 'startDay' | 'startStamp' | 'timezone' | 'updatedAt' | 'version'>
    & { recurring?: Maybe<(
      { __typename?: 'SpecialsRecurring' }
      & Pick<GqlSpecialsRecurring, 'days' | 'endDate' | 'endTime' | 'setEndDate' | 'startTime'>
    )> }
  )>>> }
);

export type GqlBillToTextPaymentSourcesFragment = (
  { __typename?: 'DispensaryBillingV2' }
  & { paymentSources?: Maybe<Array<Maybe<(
    { __typename?: 'ChargebeePaymentSource' }
    & Pick<GqlChargebeePaymentSource, 'type'>
    & { card?: Maybe<(
      { __typename?: 'ChargebeeCard' }
      & Pick<GqlChargebeeCard, 'brand' | 'last4'>
    )> }
  )>>> }
);

export type GqlGetEnterpriseQueryVariables = Exact<{
  enterpriseId: Scalars['ID'];
}>;


export type GqlGetEnterpriseQuery = (
  { __typename?: 'Query' }
  & { getEnterprise?: Maybe<(
    { __typename?: 'Enterprise' }
    & Pick<GqlEnterprise, 'id' | 'billingVersion' | 'uniqueName'>
    & { retailers: Array<(
      { __typename?: 'Retailer' }
      & Pick<GqlRetailer, 'id' | 'dispensaryId'>
    )> }
  )> }
);

export type GqlGetEnterpriseByNameQueryVariables = Exact<{
  uniqueName: Scalars['ID'];
}>;


export type GqlGetEnterpriseByNameQuery = (
  { __typename?: 'Query' }
  & { getEnterpriseByName?: Maybe<Array<Maybe<(
    { __typename?: 'Enterprise' }
    & Pick<GqlEnterprise, 'id' | 'billingVersion' | 'uniqueName'>
    & { retailers: Array<(
      { __typename?: 'Retailer' }
      & Pick<GqlRetailer, 'id' | 'dispensaryId'>
      & { profile: (
        { __typename?: 'RetailerProfile' }
        & { location?: Maybe<(
          { __typename?: 'RetailerProfileLocation' }
          & Pick<GqlRetailerProfileLocation, 'city' | 'state'>
        )> }
      ) }
    )> }
  )>>> }
);

export type GqlGetRetailerByDispensaryIdQueryVariables = Exact<{
  dispensaryIds: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type GqlGetRetailerByDispensaryIdQuery = (
  { __typename?: 'Query' }
  & { getRetailerByDispensaryId?: Maybe<Array<Maybe<(
    { __typename?: 'Retailer' }
    & Pick<GqlRetailer, 'id'>
  )>>> }
);

export type GqlGetRetailersByEnterpriseIdQueryVariables = Exact<{
  enterpriseIds: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type GqlGetRetailersByEnterpriseIdQuery = (
  { __typename?: 'Query' }
  & { getRetailersByEnterpriseId?: Maybe<Array<Maybe<(
    { __typename?: 'Retailer' }
    & Pick<GqlRetailer, 'dispensaryId' | 'name'>
    & { profile: (
      { __typename?: 'RetailerProfile' }
      & Pick<GqlRetailerProfile, 'medicalDispensary' | 'recDispensary'>
      & { location?: Maybe<(
        { __typename?: 'RetailerProfileLocation' }
        & Pick<GqlRetailerProfileLocation, 'city' | 'state'>
      )> }
    ) }
  )>>> }
);

export type GqlCreateUpdateBillingGroupQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GqlCreateUpdateBillingGroupQuery = (
  { __typename?: 'Query' }
  & { getEnterprise?: Maybe<(
    { __typename?: 'Enterprise' }
    & Pick<GqlEnterprise, 'id'>
    & { retailers: Array<(
      { __typename?: 'Retailer' }
      & Pick<GqlRetailer, 'id' | 'name' | 'status'>
      & { profile: (
        { __typename?: 'RetailerProfile' }
        & { location?: Maybe<(
          { __typename?: 'RetailerProfileLocation' }
          & Pick<GqlRetailerProfileLocation, 'city' | 'state'>
        )> }
      ), retailerGroups: Array<(
        { __typename?: 'RetailerGroup' }
        & Pick<GqlRetailerGroup, 'id' | 'name'>
      )> }
    )>, retailerGroups: Array<(
      { __typename?: 'RetailerGroup' }
      & Pick<GqlRetailerGroup, 'notificationEmails' | 'groupType' | 'id' | 'name'>
      & { retailers: Array<(
        { __typename?: 'Retailer' }
        & Pick<GqlRetailer, 'id'>
      )> }
    )> }
  )> }
);

export type GqlCreateBillingGroupMutationVariables = Exact<{
  billingGroup: GqlCreateBillingGroupInput;
}>;


export type GqlCreateBillingGroupMutation = (
  { __typename?: 'Mutation' }
  & { createBillingGroup?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlRetailerBillingGroupOverviewQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GqlRetailerBillingGroupOverviewQuery = (
  { __typename?: 'Query' }
  & { getRetailerGroup?: Maybe<(
    { __typename?: 'RetailerGroup' }
    & Pick<GqlRetailerGroup, 'name'>
    & { retailers: Array<(
      { __typename?: 'Retailer' }
      & Pick<GqlRetailer, 'id' | 'name'>
    )> }
  )> }
);

export type GqlBillingOverviewQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GqlBillingOverviewQuery = (
  { __typename?: 'Query' }
  & { getEnterprise?: Maybe<(
    { __typename?: 'Enterprise' }
    & Pick<GqlEnterprise, 'createdAt' | 'id' | 'name' | 'phone' | 'primaryContactId' | 'uniqueName' | 'updatedAt' | 'website'>
    & { retailers: Array<(
      { __typename?: 'Retailer' }
      & Pick<GqlRetailer, 'accountTier' | 'createdAt' | 'dispensaryId' | 'id' | 'medLicense' | 'name' | 'phone' | 'recLicense' | 'status' | 'updatedAt'>
      & { profile: (
        { __typename?: 'RetailerProfile' }
        & { location?: Maybe<(
          { __typename?: 'RetailerProfileLocation' }
          & Pick<GqlRetailerProfileLocation, 'city' | 'state'>
        )> }
      ), retailerGroups: Array<(
        { __typename?: 'RetailerGroup' }
        & Pick<GqlRetailerGroup, 'id' | 'name'>
      )> }
    )>, retailerGroups: Array<(
      { __typename?: 'RetailerGroup' }
      & Pick<GqlRetailerGroup, 'notificationEmails' | 'groupType' | 'id' | 'name'>
      & { retailers: Array<(
        { __typename?: 'Retailer' }
        & Pick<GqlRetailer, 'id'>
      )> }
    )> }
  )> }
);

export type GqlInvoicesTableInvoicesFragment = (
  { __typename?: 'ChargebeeSubscriptionV2' }
  & { invoices?: Maybe<Array<(
    { __typename?: 'Invoice' }
    & Pick<GqlInvoice, 'amountDue' | 'billingCycle' | 'dueDate' | 'id' | 'status' | 'total'>
    & { lineItems?: Maybe<Array<Maybe<(
      { __typename?: 'ChargebeeLineItem' }
      & Pick<GqlChargebeeLineItem, 'dateFrom' | 'dateTo'>
    )>>> }
  )>> }
);

export type GqlRetailerBillingOverviewQueryVariables = Exact<{
  retailers: Array<Maybe<GqlRetailerInput>> | Maybe<GqlRetailerInput>;
}>;


export type GqlRetailerBillingOverviewQuery = (
  { __typename?: 'Query' }
  & { getSubscriptionsV2: Array<Maybe<(
    { __typename?: 'SubscriptionV2' }
    & Pick<GqlSubscriptionV2, 'manualPayments'>
    & { chargebeePlan?: Maybe<(
      { __typename?: 'ChargebeePlan' }
      & Pick<GqlChargebeePlan, 'period' | 'periodUnit'>
    )>, chargebeeSubscription?: Maybe<(
      { __typename?: 'ChargebeeSubscriptionV2' }
      & Pick<GqlChargebeeSubscriptionV2, 'currentTermEnd' | 'currentTermStart' | 'nextBillingAt' | 'planAmount' | 'planId' | 'status' | 'trialEnd'>
      & GqlInvoicesTableInvoicesFragment
    )>, dispensaryBilling?: Maybe<(
      { __typename?: 'DispensaryBillingV2' }
      & GqlBillToTextPaymentSourcesFragment
    )> }
  )>> }
);

export type GqlActivateEnterpriseRetailerBillingMutationVariables = Exact<{
  retailerIds: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type GqlActivateEnterpriseRetailerBillingMutation = (
  { __typename?: 'Mutation' }
  & { setupRetailerBilling?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlGetRetailerBillingSettingsQueryVariables = Exact<{
  retailers: Array<GqlRetailerInput> | GqlRetailerInput;
}>;


export type GqlGetRetailerBillingSettingsQuery = (
  { __typename?: 'Query' }
  & { getSubscriptionsV2: Array<Maybe<(
    { __typename?: 'SubscriptionV2' }
    & Pick<GqlSubscriptionV2, 'manualPayments'>
    & { dispensaryBilling?: Maybe<(
      { __typename?: 'DispensaryBillingV2' }
      & { chargebeeCustomer?: Maybe<(
        { __typename?: 'ChargebeeCustomer' }
        & Pick<GqlChargebeeCustomer, 'id'>
        & { contacts?: Maybe<Array<Maybe<(
          { __typename?: 'ChargebeeContact' }
          & Pick<GqlChargebeeContact, 'email'>
        )>>> }
      )>, paymentSources?: Maybe<Array<Maybe<(
        { __typename?: 'ChargebeePaymentSource' }
        & Pick<GqlChargebeePaymentSource, 'type'>
        & { card?: Maybe<(
          { __typename?: 'ChargebeeCard' }
          & Pick<GqlChargebeeCard, 'brand' | 'last4'>
        )> }
      )>>> }
    )>, chargebeePlan?: Maybe<(
      { __typename?: 'ChargebeePlan' }
      & Pick<GqlChargebeePlan, 'period' | 'periodUnit'>
    )>, chargebeeSubscription?: Maybe<(
      { __typename?: 'ChargebeeSubscriptionV2' }
      & Pick<GqlChargebeeSubscriptionV2, 'status'>
    )> }
  )>> }
);

export type GqlGetBillingRetailerQueryVariables = Exact<{
  retailerId: Scalars['ID'];
}>;


export type GqlGetBillingRetailerQuery = (
  { __typename?: 'Query' }
  & { getRetailer?: Maybe<(
    { __typename?: 'Retailer' }
    & Pick<GqlRetailer, 'id' | 'name' | 'dispensaryId' | 'status'>
    & { retailerGroups: Array<(
      { __typename?: 'RetailerGroup' }
      & Pick<GqlRetailerGroup, 'groupType'>
    )> }
  )> }
);

export type GqlSetRetailerBankPaymentMutationVariables = Exact<{
  retailerIds: Array<Scalars['ID']> | Scalars['ID'];
  accountId: Scalars['String'];
  token: Scalars['String'];
}>;


export type GqlSetRetailerBankPaymentMutation = (
  { __typename?: 'Mutation' }
  & { setupRetailerBankPaymentMethod?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlSetRetailerBillingNotificationsMutationVariables = Exact<{
  retailerIds: Array<Scalars['ID']> | Scalars['ID'];
  notificationEmails: Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>;
  billingNotificationEnabled: Scalars['Boolean'];
}>;


export type GqlSetRetailerBillingNotificationsMutation = (
  { __typename?: 'Mutation' }
  & { updateBillingNotifications?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlSetRetailerBillingPeriodMutationVariables = Exact<{
  retailerIds: Array<Scalars['ID']> | Scalars['ID'];
  billingPeriod: BillingPeriod;
}>;


export type GqlSetRetailerBillingPeriodMutation = (
  { __typename?: 'Mutation' }
  & { updateSubscriptionBillingPeriod?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlSetRetailerCreditCardPaymentMutationVariables = Exact<{
  retailerIds: Array<Scalars['ID']> | Scalars['ID'];
  token: Scalars['String'];
}>;


export type GqlSetRetailerCreditCardPaymentMutation = (
  { __typename?: 'Mutation' }
  & { setupRetailerCreditPaymentMethod?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlAdminPrintedMenuProductsQueryVariables = Exact<{
  productsFilter: GqlProductsFilterInput;
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
}>;


export type GqlAdminPrintedMenuProductsQuery = (
  { __typename?: 'Query' }
  & { filteredProducts?: Maybe<(
    { __typename?: 'ProductsList' }
    & { products: Array<Maybe<(
      { __typename?: 'Products' }
      & Pick<GqlProducts, 'id' | '_id' | 'DispensaryID' | 'Name' | 'Prices' | 'Options' | 'medicalOnly' | 'recOnly' | 'recPrices' | 'medicalPrices' | 'Image' | 'stockImage' | 'special' | 'recSpecialPrices' | 'medicalSpecialPrices' | 'brandId' | 'brandName' | 'brandLogo' | 'Status' | 'type' | 'strainType' | 'updatedAt' | 'createdAt' | 'CBD' | 'THC' | 'weight'>
      & { images?: Maybe<Array<(
        { __typename?: 'Products_Images' }
        & Pick<GqlProducts_Images, '_id' | 'origin' | 'url' | 'active'>
      )>>, specialData?: Maybe<(
        { __typename?: 'Products_specialData' }
        & Pick<GqlProducts_SpecialData, 'discount' | 'percentDiscount'>
        & { bogoSpecials?: Maybe<Array<Maybe<(
          { __typename?: 'Products_specialData_bogoSpecials' }
          & Pick<GqlProducts_SpecialData_BogoSpecials, 'bogoConditionLogicOperator' | 'bogoRewardLogicOperator' | 'endStamp' | 'isRecurring' | 'menuType' | 'recurringEndDate' | 'redemptionLimit' | 'specialId' | 'specialName'>
          & { bogoConditions?: Maybe<Array<Maybe<(
            { __typename?: 'Products_specialData_bogoSpecials_bogoConditionItem' }
            & Pick<GqlProducts_SpecialData_BogoSpecials_BogoConditionItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'productGroup' | 'productId' | 'quantity' | 'weight' | 'weightOperator'>
          )>>>, bogoRewards?: Maybe<Array<Maybe<(
            { __typename?: 'Products_specialData_bogoSpecials_bogoRewardItem' }
            & Pick<GqlProducts_SpecialData_BogoSpecials_BogoRewardItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'dollarDiscount' | 'productGroup' | 'productId' | 'percentDiscount' | 'quantity' | 'targetPrice' | 'weight'>
          )>>>, excludedProducts?: Maybe<(
            { __typename?: 'ExcludedBOGOProducts' }
            & { conditions?: Maybe<Array<Maybe<(
              { __typename?: 'ExcludedBOGOProduct' }
              & Pick<GqlExcludedBogoProduct, '_id' | 'key' | 'Name'>
            )>>>, rewards?: Maybe<Array<Maybe<(
              { __typename?: 'ExcludedBOGOProduct' }
              & Pick<GqlExcludedBogoProduct, '_id' | 'key' | 'Name'>
            )>>> }
          )>, itemsForAPrice?: Maybe<(
            { __typename?: 'Products_specialData_bogoSpecials_itemsForAPrice' }
            & Pick<GqlProducts_SpecialData_BogoSpecials_ItemsForAPrice, '_id' | 'enabled' | 'value'>
          )>, discountBundle?: Maybe<(
            { __typename?: 'Products_specialData_bogoSpecials_discountBundle' }
            & Pick<GqlProducts_SpecialData_BogoSpecials_DiscountBundle, '_id' | 'applyTo' | 'discountType' | 'enabled' | 'limit' | 'value'>
          )>, totalQuantity?: Maybe<(
            { __typename?: 'TotalQuantity' }
            & Pick<GqlTotalQuantity, 'enabled' | 'maxQuantity' | 'quantity' | 'quantityOperator'>
          )>, totalWeight?: Maybe<(
            { __typename?: 'TotalWeight' }
            & Pick<GqlTotalWeight, 'enabled' | 'weight' | 'weightOperator'>
          )>, totalSpend?: Maybe<(
            { __typename?: 'TotalSpend' }
            & Pick<GqlTotalSpend, 'enabled' | 'maximumSpend' | 'minimumSpend' | 'spendOperator'>
          )> }
        )>>>, saleSpecials?: Maybe<Array<Maybe<(
          { __typename?: 'Products_specialData_saleSpecials' }
          & Pick<GqlProducts_SpecialData_SaleSpecials, 'discount' | 'menuType' | 'percentDiscount' | 'source' | 'sourceId' | 'specialId' | 'specialRestrictions' | 'stackingMode' | 'targetPrice'>
        )>>> }
      )>, featured?: Maybe<(
        { __typename?: 'Products_featured' }
        & Pick<GqlProducts_Featured, 'current'>
      )>, brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | 'name' | 'imageUrl'>
      )>, CBDContent?: Maybe<(
        { __typename?: 'ProductPotency' }
        & Pick<GqlProductPotency, 'unit' | 'range'>
      )>, THCContent?: Maybe<(
        { __typename?: 'ProductPotency' }
        & Pick<GqlProductPotency, 'unit' | 'range'>
      )> }
    )>>, queryInfo: (
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    ) }
  )> }
);

export type GqlGetExportQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlGetExportQuery = (
  { __typename?: 'Query' }
  & { getExport: (
    { __typename?: 'Export' }
    & Pick<GqlExport, 'url'>
  ) }
);

export type GqlMeAdminQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlMeAdminQuery = (
  { __typename?: 'Query' }
  & { meAdmin?: Maybe<(
    { __typename?: 'IdentityAdmin' }
    & Pick<GqlIdentityAdmin, '_id' | 'createdAt' | 'chainDispensaryIds' | 'enterpriseId' | 'zendeskWidgetToken' | 'zendeskSingleSignOnToken'>
    & { emails: Array<Maybe<(
      { __typename?: 'UserEmails' }
      & Pick<GqlUserEmails, 'address'>
    )>>, dispensary?: Maybe<(
      { __typename?: 'Dispensaries' }
      & Pick<GqlDispensaries, 'chain' | 'embeddedMenuUrl' | 'id' | 'name' | 'phone' | 'status' | 'tier' | 'timezone'>
      & { customDomainSettings?: Maybe<(
        { __typename?: 'Dispensaries_profile_customDomain_settings' }
        & Pick<GqlDispensaries_Profile_CustomDomain_Settings, 'domain'>
      )>, location?: Maybe<(
        { __typename?: 'Dispensaries_profile_location' }
        & Pick<GqlDispensaries_Profile_Location, 'city' | 'state' | 'country' | 'zipcode'>
      )> }
    )>, profile: (
      { __typename?: 'IdentityAdminProfile' }
      & Pick<GqlIdentityAdminProfile, 'audioNotificationsOnNewArrivalsDisabled' | 'audioNotificationsOnNewOrdersDisabled' | 'browserNotification' | 'chainID' | 'desktopNotification' | 'dispensaryId' | 'emailNotifications' | 'firstName' | 'fullName' | 'lastName' | 'isWeeklyReportEnabled' | 'phone' | 'roleAtDispensary' | 'textNotifications' | 'type' | 'firstViewedTOS' | 'acceptedTOS'>
      & { permissions?: Maybe<(
        { __typename?: 'IdentityAdminProfilePermissions' }
        & Pick<GqlIdentityAdminProfilePermissions, 'allLocations' | 'billing' | 'analytics' | 'customers' | 'dispensaryIds' | 'driver' | 'enterpriseAdmin' | 'enterpriseSpecials' | 'menu' | 'menuReview' | 'messaging' | 'superMenuReview' | 'orders' | 'promote' | 'settings' | 'users' | 'tasks' | 'techSupportFeatures'>
      )>, streamTokens?: Maybe<Array<Maybe<(
        { __typename?: 'DispensaryStreamToken' }
        & Pick<GqlDispensaryStreamToken, 'dispensaryId' | 'token'>
      )>>> }
    ) }
  )> }
);

export type GqlGetOrdersQueryVariables = Exact<{
  input: GqlGetOrdersInput;
}>;


export type GqlGetOrdersQuery = (
  { __typename?: 'Query' }
  & { getOrders?: Maybe<(
    { __typename?: 'AdminOrderListType' }
    & { orders?: Maybe<Array<Maybe<(
      { __typename?: 'AdminOrderType' }
      & Pick<GqlAdminOrderType, 'createdAt' | 'customerId' | 'customerEmail' | 'customerName' | 'customerPhone' | 'firstName' | 'lastName' | 'delivery' | 'dispensaryId' | 'dispensaryName' | 'dispoTimezone' | 'deliveryOption' | 'duration' | 'effectiveStatus' | 'orderId' | 'orderType' | 'status' | 'reopened' | 'totalCost' | 'isAnonymous' | 'isKioskOrder' | 'isAfterHoursOrder' | '_id'>
      & { durationEstimates?: Maybe<(
        { __typename?: 'DurationEstimates' }
        & { delivery?: Maybe<(
          { __typename?: 'DurationEstimateRange' }
          & Pick<GqlDurationEstimateRange, 'lowInMinutes' | 'highInMinutes'>
        )>, pickup?: Maybe<(
          { __typename?: 'DurationEstimateRange' }
          & Pick<GqlDurationEstimateRange, 'lowInMinutes' | 'highInMinutes'>
        )> }
      )>, deliveryInfo?: Maybe<(
        { __typename?: 'Orders_deliveryInfo' }
        & Pick<GqlOrders_DeliveryInfo, 'address' | 'apartmentNum' | 'deliveryAddress' | 'deliveryOption' | 'lastSearchedAddress' | 'nonDeliveryAddress'>
      )>, fleetManagementTask?: Maybe<(
        { __typename?: 'Orders_fleetManagementTask' }
        & Pick<GqlOrders_FleetManagementTask, 'id' | 'adapter'>
      )>, pos?: Maybe<(
        { __typename?: 'Orders_POS' }
        & Pick<GqlOrders_Pos, 'externalID' | 'failureReason' | 'failureType' | 'humanReadableError' | 'name'>
        & { failureAcks?: Maybe<(
          { __typename?: 'Orders_POS_FailureLocations' }
          & Pick<GqlOrders_Pos_FailureLocations, 'terminal' | 'web'>
        )> }
      )>, reservation?: Maybe<(
        { __typename?: 'OrderReservation' }
        & Pick<GqlOrderReservation, 'startTimeISO' | 'endTimeISO'>
      )> }
    )>>> }
  )> }
);

export type GqlRevertBrandMergeMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlRevertBrandMergeMutation = (
  { __typename?: 'Mutation' }
  & { revertBrandMerge?: Maybe<(
    { __typename?: 'BrandMergeHistory' }
    & Pick<GqlBrandMergeHistory, 'id'>
  )> }
);

export type GqlBrandMergeHistoryIndexQueryVariables = Exact<{
  filters?: Maybe<GqlBrandMergeHistoriesFilters>;
  page?: Maybe<GqlBrandMergeHistoriesPagination>;
  sort?: Maybe<GqlBrandMergeHistoriesSort>;
}>;


export type GqlBrandMergeHistoryIndexQuery = (
  { __typename?: 'Query' }
  & { getBrandMergeHistories?: Maybe<(
    { __typename?: 'BrandMergeHistoryList' }
    & { brandMergeHistories: Array<Maybe<(
      { __typename?: 'BrandMergeHistory' }
      & Pick<GqlBrandMergeHistory, 'id' | 'createdAt' | 'revertedAt'>
      & { sourceBrand: (
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | 'name'>
        & { dispensary?: Maybe<(
          { __typename?: 'Dispensaries' }
          & Pick<GqlDispensaries, 'id' | 'name'>
        )> }
      ), destinationBrand: (
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | 'name'>
        & { dispensary?: Maybe<(
          { __typename?: 'Dispensaries' }
          & Pick<GqlDispensaries, 'id' | 'name'>
        )> }
      ), user?: Maybe<(
        { __typename?: 'Users' }
        & Pick<GqlUsers, 'email'>
      )> }
    )>>, queryInfo?: Maybe<(
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    )> }
  )> }
);

export type GqlMergeBrandMutationVariables = Exact<{
  id: Scalars['String'];
  destinationBrandId: Scalars['String'];
}>;


export type GqlMergeBrandMutation = (
  { __typename?: 'Mutation' }
  & { mergeBrand?: Maybe<(
    { __typename?: 'Brand' }
    & Pick<GqlBrand, 'id'>
  )> }
);

export type GqlUpdateBrandCollisionMutationVariables = Exact<{
  id: Scalars['String'];
  input: GqlBrandCollisionInput;
}>;


export type GqlUpdateBrandCollisionMutation = (
  { __typename?: 'Mutation' }
  & { updateBrandCollision?: Maybe<(
    { __typename?: 'BrandCollision' }
    & Pick<GqlBrandCollision, 'id'>
  )> }
);

export type GqlBrandMergeToolIndexQueryVariables = Exact<{
  filters?: Maybe<GqlSearchBrandsFilters>;
  pagination?: Maybe<GqlPaginationInput>;
  search?: Maybe<Scalars['String']>;
  sort?: Maybe<GqlSearchBrandsSort>;
}>;


export type GqlBrandMergeToolIndexQuery = (
  { __typename?: 'Query' }
  & { searchBrandsV2?: Maybe<(
    { __typename?: 'BrandList' }
    & { brands: Array<Maybe<(
      { __typename?: 'Brand' }
      & Pick<GqlBrand, 'id'>
      & { brandCollisions?: Maybe<Array<Maybe<(
        { __typename?: 'BrandCollision' }
        & Pick<GqlBrandCollision, 'createdAt' | 'id' | 'isAllowed'>
        & { firstBrand: (
          { __typename?: 'Brand' }
          & Pick<GqlBrand, 'id' | 'name' | 'productsCount'>
          & { dispensary?: Maybe<(
            { __typename?: 'Dispensaries' }
            & Pick<GqlDispensaries, 'id' | 'name'>
          )> }
        ), secondBrand: (
          { __typename?: 'Brand' }
          & Pick<GqlBrand, 'id' | 'name' | 'productsCount'>
          & { dispensary?: Maybe<(
            { __typename?: 'Dispensaries' }
            & Pick<GqlDispensaries, 'id' | 'name'>
          )> }
        ) }
      )>>> }
    )>>, queryInfo?: Maybe<(
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    )> }
  )> }
);

export type GqlVerifyBucketProductsMutationVariables = Exact<{
  ids: Array<Scalars['String']> | Scalars['String'];
}>;


export type GqlVerifyBucketProductsMutation = (
  { __typename?: 'Mutation' }
  & { verifyBucketProducts: (
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  ) }
);

export type GqlGetBulkBucketProductReviewQueryVariables = Exact<{
  pagination: GqlPaginationInput;
  filter?: Maybe<GqlSearchBucketProductFilter>;
  sort?: Maybe<GqlSearchBucketProductSort>;
}>;


export type GqlGetBulkBucketProductReviewQuery = (
  { __typename?: 'Query' }
  & { searchBucketProducts?: Maybe<(
    { __typename?: 'SearchBucketProductsResponse' }
    & { bucketProducts?: Maybe<Array<Maybe<(
      { __typename?: 'BucketProduct' }
      & Pick<GqlBucketProduct, 'id' | 'reviewedAt' | 'verified'>
      & { reviewedByUser?: Maybe<(
        { __typename?: 'Users' }
        & Pick<GqlUsers, '_id' | 'fullName' | 'firstName' | 'lastName'>
      )>, product?: Maybe<(
        { __typename?: 'Products' }
        & Pick<GqlProducts, 'Status' | 'DispensaryID' | 'id'>
        & { CBDContent?: Maybe<(
          { __typename?: 'ProductPotency' }
          & Pick<GqlProductPotency, 'unit' | 'range'>
        )>, libraryProduct?: Maybe<(
          { __typename?: 'LibraryProduct' }
          & Pick<GqlLibraryProduct, 'category' | 'name'>
          & { brand?: Maybe<(
            { __typename?: 'Brand' }
            & Pick<GqlBrand, 'name'>
          )>, cbdContent?: Maybe<(
            { __typename?: 'ProductPotency' }
            & Pick<GqlProductPotency, 'unit' | 'range'>
          )>, thcContent?: Maybe<(
            { __typename?: 'ProductPotency' }
            & Pick<GqlProductPotency, 'unit' | 'range'>
          )> }
        )>, POSMetaData?: Maybe<(
          { __typename?: 'Products_POSMetaData' }
          & Pick<GqlProducts_PosMetaData, 'canonicalName' | 'canonicalBrandName' | 'canonicalCategory'>
        )>, THCContent?: Maybe<(
          { __typename?: 'ProductPotency' }
          & Pick<GqlProductPotency, 'unit' | 'range'>
        )> }
      )>, oldProductData?: Maybe<(
        { __typename?: 'OldProductData' }
        & Pick<GqlOldProductData, 'Name' | 'brandId' | 'brandName' | 'type' | 'subcategory'>
        & { CBDContent?: Maybe<(
          { __typename?: 'ProductPotency' }
          & Pick<GqlProductPotency, 'unit' | 'range'>
        )>, THCContent?: Maybe<(
          { __typename?: 'ProductPotency' }
          & Pick<GqlProductPotency, 'unit' | 'range'>
        )>, brand?: Maybe<(
          { __typename?: 'Brand' }
          & Pick<GqlBrand, 'name'>
        )>, POSMetaData?: Maybe<(
          { __typename?: 'Products_POSMetaData' }
          & Pick<GqlProducts_PosMetaData, 'canonicalName' | 'canonicalBrandName' | 'canonicalCategory'>
        )> }
      )> }
    )>>>, meta?: Maybe<(
      { __typename?: 'Meta' }
      & Pick<GqlMeta, 'totalCount'>
      & { reviewers?: Maybe<Array<Maybe<(
        { __typename?: 'Users' }
        & Pick<GqlUsers, '_id' | 'fullName' | 'firstName' | 'lastName'>
      )>>> }
    )> }
  )> }
);

export type GqlAdminContentBaseProductFragmentFragment = (
  { __typename?: 'Products' }
  & Pick<GqlProducts, 'id' | '_id' | 'AdditionalOptions' | 'brandName' | 'CBD' | 'connectedAt' | 'connectedBy' | 'createdAt' | 'dateCreated' | 'Description' | 'descriptionHtml' | 'DispensaryID' | 'dispensaryName' | 'duplicatedProductId' | 'effects' | 'Image' | 'integrationKey' | 'matchedLibraryItemsConfidence' | 'medicalOnly' | 'medicalPrices' | 'medicalSpecialPrices' | 'Name' | 'Options' | 'originalPrices' | 'overrides' | 'preCropImage' | 'Prices' | 'wholesalePrices' | 'rawPrices' | 'rawMedicalPrices' | 'recOnly' | 'recPrices' | 'recSpecialPrices' | 'reviewedAt' | 'reviewedBy' | 'score' | 'special' | 'Status' | 'strainType' | 'subcategory' | 'syncedAt' | 'updatedAt' | 'updatedBy' | 'THC' | 'type' | 'weight' | 'isBelowThreshold' | 'optionsBelowThreshold' | 'brandLogo' | 'brandDescription' | 'cName' | 'brandId'>
  & { brand?: Maybe<(
    { __typename?: 'Brand' }
    & Pick<GqlBrand, '_id' | 'id' | 'name'>
  )>, CBDContent?: Maybe<(
    { __typename?: 'ProductPotency' }
    & Pick<GqlProductPotency, 'unit' | 'range'>
  )>, images?: Maybe<Array<(
    { __typename?: 'Products_Images' }
    & Pick<GqlProducts_Images, '_id' | 'url' | 'origin' | 'active' | 'label' | 'description'>
  )>>, imgixSettings?: Maybe<(
    { __typename?: 'Products_imgixSettings' }
    & { productCard?: Maybe<(
      { __typename?: 'ImgixSettings' }
      & Pick<GqlImgixSettings, 'border' | 'mark' | 'markscale' | 'markpad' | 'fit'>
    )>, productModal?: Maybe<(
      { __typename?: 'ImgixSettings' }
      & Pick<GqlImgixSettings, 'border' | 'mark' | 'markscale' | 'markpad' | 'fit'>
    )> }
  )>, limitsPerCustomer?: Maybe<Array<Maybe<(
    { __typename?: 'Products_limitPerCustomer' }
    & Pick<GqlProducts_LimitPerCustomer, 'key' | 'value'>
  )>>>, manualInventory?: Maybe<Array<Maybe<(
    { __typename?: 'Products_manualInventory' }
    & Pick<GqlProducts_ManualInventory, 'option' | 'inventory'>
  )>>>, POSMetaData?: Maybe<(
    { __typename?: 'Products_POSMetaData' }
    & Pick<GqlProducts_PosMetaData, 'canonicalCategory' | 'canonicalID' | 'canonicalImgUrl' | 'canonicalName' | 'canonicalBrandName' | 'integrationID'>
    & { children?: Maybe<Array<Maybe<(
      { __typename?: 'Products_POSMetaData_children' }
      & Pick<GqlProducts_PosMetaData_Children, 'canonicalCategory' | 'canonicalID' | 'canonicalName' | 'medPrice' | 'option' | 'price' | 'quantity' | 'quantityAvailable' | 'recPrice'>
    )>>> }
  )>, specialData?: Maybe<(
    { __typename?: 'Products_specialData' }
    & Pick<GqlProducts_SpecialData, 'discount' | 'percentDiscount'>
    & { bogoSpecials?: Maybe<Array<Maybe<(
      { __typename?: 'Products_specialData_bogoSpecials' }
      & Pick<GqlProducts_SpecialData_BogoSpecials, 'bogoConditionLogicOperator' | 'bogoRewardLogicOperator' | 'endStamp' | 'isRecurring' | 'menuType' | 'recurringEndDate' | 'redemptionLimit' | 'specialId' | 'specialName'>
      & { bogoConditions?: Maybe<Array<Maybe<(
        { __typename?: 'Products_specialData_bogoSpecials_bogoConditionItem' }
        & Pick<GqlProducts_SpecialData_BogoSpecials_BogoConditionItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'productGroup' | 'productId' | 'quantity' | 'weight' | 'weightOperator'>
      )>>>, bogoRewards?: Maybe<Array<Maybe<(
        { __typename?: 'Products_specialData_bogoSpecials_bogoRewardItem' }
        & Pick<GqlProducts_SpecialData_BogoSpecials_BogoRewardItem, '_id' | 'brandId' | 'brandName' | 'categoryName' | 'dollarDiscount' | 'productGroup' | 'productId' | 'percentDiscount' | 'quantity' | 'targetPrice' | 'weight'>
      )>>>, excludedProducts?: Maybe<(
        { __typename?: 'ExcludedBOGOProducts' }
        & { conditions?: Maybe<Array<Maybe<(
          { __typename?: 'ExcludedBOGOProduct' }
          & Pick<GqlExcludedBogoProduct, '_id' | 'key' | 'Name'>
        )>>>, rewards?: Maybe<Array<Maybe<(
          { __typename?: 'ExcludedBOGOProduct' }
          & Pick<GqlExcludedBogoProduct, '_id' | 'key' | 'Name'>
        )>>> }
      )>, itemsForAPrice?: Maybe<(
        { __typename?: 'Products_specialData_bogoSpecials_itemsForAPrice' }
        & Pick<GqlProducts_SpecialData_BogoSpecials_ItemsForAPrice, '_id' | 'enabled' | 'value'>
      )>, discountBundle?: Maybe<(
        { __typename?: 'Products_specialData_bogoSpecials_discountBundle' }
        & Pick<GqlProducts_SpecialData_BogoSpecials_DiscountBundle, '_id' | 'applyTo' | 'discountType' | 'enabled' | 'limit' | 'value'>
      )>, totalQuantity?: Maybe<(
        { __typename?: 'TotalQuantity' }
        & Pick<GqlTotalQuantity, 'enabled' | 'maxQuantity' | 'quantity' | 'quantityOperator'>
      )>, totalWeight?: Maybe<(
        { __typename?: 'TotalWeight' }
        & Pick<GqlTotalWeight, 'enabled' | 'weight' | 'weightOperator'>
      )>, totalSpend?: Maybe<(
        { __typename?: 'TotalSpend' }
        & Pick<GqlTotalSpend, 'enabled' | 'maximumSpend' | 'minimumSpend' | 'spendOperator'>
      )> }
    )>>>, saleSpecials?: Maybe<Array<Maybe<(
      { __typename?: 'Products_specialData_saleSpecials' }
      & Pick<GqlProducts_SpecialData_SaleSpecials, 'discount' | 'menuType' | 'percentDiscount' | 'source' | 'sourceId' | 'specialId' | 'specialRestrictions' | 'stackingMode' | 'targetPrice'>
    )>>> }
  )>, THCContent?: Maybe<(
    { __typename?: 'ProductPotency' }
    & Pick<GqlProductPotency, 'unit' | 'range'>
  )>, featured?: Maybe<(
    { __typename?: 'Products_featured' }
    & Pick<GqlProducts_Featured, 'current' | 'startTime' | 'endTime'>
  )>, adminEdits?: Maybe<Array<Maybe<(
    { __typename?: 'Products_adminEdit' }
    & Pick<GqlProducts_AdminEdit, 'updatedAt' | 'updatedBy'>
  )>>> }
);

export type GqlCheckInBucketV2MutationVariables = Exact<{
  uuid: Scalars['String'];
}>;


export type GqlCheckInBucketV2Mutation = (
  { __typename?: 'Mutation' }
  & { checkInBucketV2?: Maybe<(
    { __typename?: 'Bucket' }
    & Pick<GqlBucket, 'id'>
  )> }
);

export type GqlCheckOutBucketV2MutationVariables = Exact<{
  bucketId: Scalars['String'];
  uuid: Scalars['String'];
}>;


export type GqlCheckOutBucketV2Mutation = (
  { __typename?: 'Mutation' }
  & { checkOutBucketV2: (
    { __typename?: 'Bucket' }
    & Pick<GqlBucket, 'completedReviewsCount' | 'checkedOutAt' | 'id' | 'name' | 'productsCount' | 'teamName'>
    & { checkedOutBy?: Maybe<(
      { __typename?: 'Users' }
      & Pick<GqlUsers, '_id' | 'firstName' | 'lastName'>
    )>, products: Array<Maybe<(
      { __typename?: 'Products' }
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, '_id' | 'id' | 'name'>
      )>, matchedLibraryItems?: Maybe<Array<Maybe<(
        { __typename?: 'Products_matchedLibraryItems' }
        & Pick<GqlProducts_MatchedLibraryItems, '_id' | 'name' | 'score'>
      )>>>, dispensary?: Maybe<(
        { __typename?: 'Dispensaries' }
        & Pick<GqlDispensaries, 'id' | 'medicalDispensary' | 'medicalOnly' | 'name' | 'recDispensary' | 'timezone'>
        & { location?: Maybe<(
          { __typename?: 'Dispensaries_profile_location' }
          & Pick<GqlDispensaries_Profile_Location, 'state'>
        )>, storeSettings: (
          { __typename?: 'Dispensaries_storeSettings' }
          & Pick<GqlDispensaries_StoreSettings, 'isolatedMenus'>
        ) }
      )>, libraryProduct?: Maybe<(
        { __typename?: 'LibraryProduct' }
        & Pick<GqlLibraryProduct, 'id' | 'name'>
      )>, speculativeEdits?: Maybe<Array<Maybe<(
        { __typename?: 'Products' }
        & GqlAdminContentBaseProductFragmentFragment
      )>>> }
      & GqlAdminContentBaseProductFragmentFragment
    )>> }
  ) }
);

export type GqlCheckOutBucketV3MutationVariables = Exact<{
  bucketId: Scalars['String'];
  uuid: Scalars['String'];
}>;


export type GqlCheckOutBucketV3Mutation = (
  { __typename?: 'Mutation' }
  & { checkOutBucketV3: (
    { __typename?: 'BucketV2' }
    & Pick<GqlBucketV2, 'completedReviewsCount' | 'checkedOutAt' | 'id' | 'name' | 'productIds' | 'productsCount' | 'teamName'>
    & { checkedOutBy?: Maybe<(
      { __typename?: 'Users' }
      & Pick<GqlUsers, '_id' | 'firstName' | 'lastName'>
    )> }
  ) }
);

export type GqlCloseBucketMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlCloseBucketMutation = (
  { __typename?: 'Mutation' }
  & { closeBucket: (
    { __typename?: 'Bucket' }
    & Pick<GqlBucket, 'id'>
  ) }
);

export type GqlConnectProductPreviewMutationVariables = Exact<{
  id: Scalars['String'];
  libraryProductId: Scalars['String'];
}>;


export type GqlConnectProductPreviewMutation = (
  { __typename?: 'Mutation' }
  & { connectProductPreview?: Maybe<(
    { __typename?: 'ConnectProductPreviewResponse' }
    & { previewProduct: (
      { __typename?: 'PreviewProduct' }
      & { product: (
        { __typename?: 'PreviewMongoProduct' }
        & Pick<GqlPreviewMongoProduct, '_id' | 'id' | 'additionalOptions' | 'brandId' | 'brandLogo' | 'brandName' | 'cName' | 'description' | 'descriptionHtml' | 'dispensaryId' | 'dispensaryName' | 'duplicatedProductId' | 'effects' | 'image' | 'integrationKey' | 'isBelowKioskThreshold' | 'isBelowThreshold' | 'matchedLibraryItemsConfidence' | 'medicalOnly' | 'medicalPrices' | 'name' | 'options' | 'overrides' | 'prices' | 'recOnly' | 'recPrices' | 'strainType' | 'status' | 'subcategory' | 'type' | 'weight'>
        & { cbdContent?: Maybe<(
          { __typename?: 'ProductPotency' }
          & Pick<GqlProductPotency, 'range' | 'unit'>
        )>, matchedLibraryItems?: Maybe<Array<Maybe<(
          { __typename?: 'Products_matchedLibraryItems' }
          & Pick<GqlProducts_MatchedLibraryItems, '_id'>
        )>>>, posMetaData?: Maybe<(
          { __typename?: 'Products_POSMetaData' }
          & Pick<GqlProducts_PosMetaData, 'canonicalName' | 'canonicalCategory'>
          & { children?: Maybe<Array<Maybe<(
            { __typename?: 'Products_POSMetaData_children' }
            & Pick<GqlProducts_PosMetaData_Children, 'option'>
          )>>> }
        )>, thcContent?: Maybe<(
          { __typename?: 'ProductPotency' }
          & Pick<GqlProductPotency, 'range' | 'unit'>
        )> }
      ), productImages: Array<Maybe<(
        { __typename?: 'Products_Images' }
        & Pick<GqlProducts_Images, '_id' | 'url' | 'origin' | 'active' | 'label' | 'description'>
      )>>, productBatch?: Maybe<(
        { __typename?: 'ProductBatch' }
        & Pick<GqlProductBatch, 'id'>
      )>, terpenes: Array<(
        { __typename?: 'Products_Terpene' }
        & Pick<GqlProducts_Terpene, 'id' | 'terpeneId' | 'name' | 'unit' | 'active'>
      )>, appliedLibraryAttributes: (
        { __typename?: 'PreviewMongoProduct' }
        & Pick<GqlPreviewMongoProduct, 'additionalOptions' | 'brandId' | 'brandLogo' | 'brandName' | 'cName' | 'description' | 'descriptionHtml' | 'dispensaryId' | 'dispensaryName' | 'duplicatedProductId' | 'effects' | 'image' | 'integrationKey' | 'isBelowKioskThreshold' | 'isBelowThreshold' | 'matchedLibraryItemsConfidence' | 'medicalOnly' | 'medicalPrices' | 'modifiedAttributes' | 'name' | 'options' | 'prices' | 'recOnly' | 'recPrices' | 'strainType' | 'status' | 'subcategory' | 'type' | 'weight'>
        & { cbdContent?: Maybe<(
          { __typename?: 'ProductPotency' }
          & Pick<GqlProductPotency, 'range' | 'unit'>
        )>, matchedLibraryItems?: Maybe<Array<Maybe<(
          { __typename?: 'Products_matchedLibraryItems' }
          & Pick<GqlProducts_MatchedLibraryItems, '_id'>
        )>>>, posMetaData?: Maybe<(
          { __typename?: 'Products_POSMetaData' }
          & { children?: Maybe<Array<Maybe<(
            { __typename?: 'Products_POSMetaData_children' }
            & Pick<GqlProducts_PosMetaData_Children, 'canonicalName' | 'option'>
          )>>> }
        )>, thcContent?: Maybe<(
          { __typename?: 'ProductPotency' }
          & Pick<GqlProductPotency, 'range' | 'unit'>
        )> }
      ) }
    ) }
  )> }
);

export type GqlCreateBucketV2MutationVariables = Exact<{
  bucket: GqlCreateBucketInput;
}>;


export type GqlCreateBucketV2Mutation = (
  { __typename?: 'Mutation' }
  & { createBucketV2: (
    { __typename?: 'Bucket' }
    & Pick<GqlBucket, 'id'>
  ) }
);

export type GqlCreateBucketV3MutationVariables = Exact<{
  bucket: GqlCreateBucketInputV3;
}>;


export type GqlCreateBucketV3Mutation = (
  { __typename?: 'Mutation' }
  & { createBucketV3: (
    { __typename?: 'Bucket' }
    & Pick<GqlBucket, 'id'>
  ) }
);

export type GqlDisconnectBucketProductMutationVariables = Exact<{
  bucketId: Scalars['String'];
  productId: Scalars['String'];
}>;


export type GqlDisconnectBucketProductMutation = (
  { __typename?: 'Mutation' }
  & { disconnectBucketProduct?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  )> }
);

export type GqlSkipBucketProductV2MutationVariables = Exact<{
  bucketId: Scalars['String'];
  productId: Scalars['String'];
  skipReasons: Array<SkipReasonEnum> | SkipReasonEnum;
}>;


export type GqlSkipBucketProductV2Mutation = (
  { __typename?: 'Mutation' }
  & { skipBucketProductV2: (
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  ) }
);

export type GqlSkipBucketProductMutationVariables = Exact<{
  bucketId: Scalars['String'];
  productId: Scalars['String'];
}>;


export type GqlSkipBucketProductMutation = (
  { __typename?: 'Mutation' }
  & { skipBucketProduct: (
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'message' | 'success'>
  ) }
);

export type GqlContentStatisticsQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlContentStatisticsQuery = (
  { __typename?: 'Query' }
  & { contentStatistics?: Maybe<(
    { __typename?: 'ContentStatistics' }
    & Pick<GqlContentStatistics, 'connectedPercentage' | 'menuScore'>
  )> }
);

export type GqlGetBucketsQueryVariables = Exact<{
  sort?: Maybe<GqlBrandsSortInput>;
}>;


export type GqlGetBucketsQuery = (
  { __typename?: 'Query' }
  & { getBuckets: Array<Maybe<(
    { __typename?: 'Bucket' }
    & GqlBucketListFragmentFragment
  )>> }
);

export type GqlGetProductQueryVariables = Exact<{
  productsFilter: GqlProductsFilterInput;
}>;


export type GqlGetProductQuery = (
  { __typename?: 'Query' }
  & { filteredProducts?: Maybe<(
    { __typename?: 'ProductsList' }
    & { products: Array<Maybe<(
      { __typename?: 'Products' }
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, '_id' | 'id' | 'name'>
      )>, matchedLibraryItems?: Maybe<Array<Maybe<(
        { __typename?: 'Products_matchedLibraryItems' }
        & Pick<GqlProducts_MatchedLibraryItems, '_id' | 'name' | 'score'>
      )>>>, dispensary?: Maybe<(
        { __typename?: 'Dispensaries' }
        & Pick<GqlDispensaries, 'id' | 'medicalDispensary' | 'medicalOnly' | 'name' | 'recDispensary' | 'timezone'>
        & { location?: Maybe<(
          { __typename?: 'Dispensaries_profile_location' }
          & Pick<GqlDispensaries_Profile_Location, 'state'>
        )>, storeSettings: (
          { __typename?: 'Dispensaries_storeSettings' }
          & Pick<GqlDispensaries_StoreSettings, 'isolatedMenus'>
        ) }
      )>, libraryProduct?: Maybe<(
        { __typename?: 'LibraryProduct' }
        & Pick<GqlLibraryProduct, 'id' | 'name'>
      )>, speculativeEdits?: Maybe<Array<Maybe<(
        { __typename?: 'Products' }
        & GqlAdminContentBaseProductFragmentFragment
      )>>> }
      & GqlAdminContentBaseProductFragmentFragment
    )>> }
  )> }
);

export type GqlRefreshBucketQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlRefreshBucketQuery = (
  { __typename?: 'Query' }
  & { getBucket: (
    { __typename?: 'Bucket' }
    & GqlBucketListFragmentFragment
  ) }
);

export type GqlCopyLibraryProductMutationVariables = Exact<{
  id: Scalars['String'];
  stateLibraryIds: Array<Scalars['String']> | Scalars['String'];
}>;


export type GqlCopyLibraryProductMutation = (
  { __typename?: 'Mutation' }
  & { copyLibraryProduct?: Maybe<(
    { __typename?: 'CopyLibraryProductResponse' }
    & { libraryProducts?: Maybe<Array<Maybe<(
      { __typename?: 'LibraryProduct' }
      & Pick<GqlLibraryProduct, 'dispensaryId'>
    )>>>, meta?: Maybe<(
      { __typename?: 'CopyLibraryProductMeta' }
      & { errors?: Maybe<Array<Maybe<(
        { __typename?: 'CopyLibraryProductErrors' }
        & Pick<GqlCopyLibraryProductErrors, 'type' | 'errors' | 'state_library_id'>
      )>>> }
    )> }
  )> }
);

export type GqlCreateBucketForLibraryItemMutationVariables = Exact<{
  libraryItemId: Scalars['ID'];
}>;


export type GqlCreateBucketForLibraryItemMutation = (
  { __typename?: 'Mutation' }
  & { createBucketForLibraryItem: (
    { __typename?: 'Bucket' }
    & Pick<GqlBucket, 'id'>
  ) }
);

export type GqlDeleteLibraryProductMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlDeleteLibraryProductMutation = (
  { __typename?: 'Mutation' }
  & { deleteLibraryProduct?: Maybe<(
    { __typename?: 'LibraryProduct' }
    & Pick<GqlLibraryProduct, 'id'>
  )> }
);

export type GqlUpdateLibraryProductMutationVariables = Exact<{
  id: Scalars['String'];
  updates: GqlUpdatedLibraryProduct;
}>;


export type GqlUpdateLibraryProductMutation = (
  { __typename?: 'Mutation' }
  & { updateLibraryProduct?: Maybe<(
    { __typename?: 'UpdateLibraryProductResponse' }
    & { libraryProduct?: Maybe<(
      { __typename?: 'LibraryProduct' }
      & Pick<GqlLibraryProduct, 'dispensaryId'>
    )> }
  )> }
);

export type GqlFindLibraryProductsQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlFindLibraryProductsQuery = (
  { __typename?: 'Query' }
  & { findLibraryProducts?: Maybe<(
    { __typename?: 'FindLibraryProductsResponse' }
    & { libraryProducts?: Maybe<Array<Maybe<(
      { __typename?: 'LibraryProduct' }
      & Pick<GqlLibraryProduct, 'dispensaryId'>
    )>>> }
  )> }
);

export type GqlGetLibraryProductQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlGetLibraryProductQuery = (
  { __typename?: 'Query' }
  & { getLibraryProduct?: Maybe<(
    { __typename?: 'LibraryProduct' }
    & Pick<GqlLibraryProduct, 'id' | 'category' | 'connectedCount' | 'description' | 'descriptionHtml' | 'dispensaryId' | 'effects' | 'gtin' | 'image' | 'name' | 'options' | 'prices' | 'productTemplate' | 'sku' | 'strainType' | 'stockImage' | 'subcategory' | 'productBatchId'>
    & { brand?: Maybe<(
      { __typename?: 'Brand' }
      & Pick<GqlBrand, 'id' | 'name' | 'isGlobal' | '_id'>
    )>, cbdContent?: Maybe<(
      { __typename?: 'ProductPotency' }
      & Pick<GqlProductPotency, 'unit' | 'range'>
    )>, images?: Maybe<Array<Maybe<(
      { __typename?: 'Products_Images' }
      & Pick<GqlProducts_Images, '_id' | 'url' | 'active' | 'origin'>
    )>>>, cannabinoids?: Maybe<Array<(
      { __typename?: 'Products_CannabinoidV2' }
      & Pick<GqlProducts_CannabinoidV2, 'cannabinoidId' | 'unit' | 'value' | 'active'>
      & { cannabinoid?: Maybe<(
        { __typename?: 'Cannabinoid' }
        & Pick<GqlCannabinoid, 'id' | 'description' | 'name'>
      )> }
    )>>, terpenes?: Maybe<Array<(
      { __typename?: 'Products_Terpene' }
      & Pick<GqlProducts_Terpene, 'name' | 'id' | 'terpeneId' | 'unit' | 'value' | 'active'>
    )>>, thcContent?: Maybe<(
      { __typename?: 'ProductPotency' }
      & Pick<GqlProductPotency, 'unit' | 'range'>
    )> }
  )> }
);

export type GqlStateLibrariesIndexQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlStateLibrariesIndexQuery = (
  { __typename?: 'Query' }
  & { getStateLibraries: Array<(
    { __typename?: 'StateLibrary' }
    & Pick<GqlStateLibrary, 'id' | 'name' | 'state'>
  )> }
);

export type GqlLibraryProductChangeImpactV2QueryVariables = Exact<{
  id: Scalars['String'];
  updates: GqlUpdatedLibraryProduct;
}>;


export type GqlLibraryProductChangeImpactV2Query = (
  { __typename?: 'Query' }
  & { libraryProductChangeImpactV2?: Maybe<(
    { __typename?: 'LibraryProductChangeImpactResponse' }
    & { totalCount?: Maybe<(
      { __typename?: 'LibraryProductChangeImpactCount' }
      & Pick<GqlLibraryProductChangeImpactCount, 'count'>
    )> }
  )> }
);

export type GqlLibraryProductChangeImpactV3MutationVariables = Exact<{
  id: Scalars['String'];
  updates: GqlUpdatedLibraryProduct;
}>;


export type GqlLibraryProductChangeImpactV3Mutation = (
  { __typename?: 'Mutation' }
  & { libraryProductChangeImpactV3?: Maybe<(
    { __typename?: 'LibraryProductChangeImpactResponse' }
    & { totalCount?: Maybe<(
      { __typename?: 'LibraryProductChangeImpactCount' }
      & Pick<GqlLibraryProductChangeImpactCount, 'count'>
    )> }
  )> }
);

export type GqlLibraryProductsIndexQueryVariables = Exact<{
  filters?: Maybe<GqlSearchLibraryProductsFilters>;
  pagination?: Maybe<GqlPaginationInput>;
  search?: Maybe<Scalars['String']>;
  sort?: Maybe<GqlSearchLibraryProductsSort>;
}>;


export type GqlLibraryProductsIndexQuery = (
  { __typename?: 'Query' }
  & { searchLibraryProducts?: Maybe<(
    { __typename?: 'LibraryProducts' }
    & { libraryProducts?: Maybe<Array<Maybe<(
      { __typename?: 'LibraryProduct' }
      & Pick<GqlLibraryProduct, 'category' | 'connectedCount' | 'createdAt' | 'description' | 'dispensaryId' | 'id' | 'menuScore' | 'name' | 'subcategory' | 'updatedAt' | 'updatedByBrand'>
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | 'isGlobal' | 'name'>
      )>, createdBy?: Maybe<(
        { __typename?: 'Users' }
        & Pick<GqlUsers, 'firstName' | 'fullName' | 'lastName'>
      )> }
    )>>>, meta?: Maybe<(
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    )> }
  )> }
);

export type GqlApproveChangeRequestMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlApproveChangeRequestMutation = (
  { __typename?: 'Mutation' }
  & { changeRequestApproveProduct?: Maybe<(
    { __typename?: 'ProductChangeRequest' }
    & Pick<GqlProductChangeRequest, 'id'>
  )> }
);

export type GqlLockChangeRequestMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlLockChangeRequestMutation = (
  { __typename?: 'Mutation' }
  & { changeRequestLockProduct?: Maybe<(
    { __typename?: 'ProductChangeRequest' }
    & Pick<GqlProductChangeRequest, 'id'>
  )> }
);

export type GqlRejectContentChangeRequestMutationVariables = Exact<{
  id: Scalars['String'];
  rejectionReasons: Array<RejectionReasons> | RejectionReasons;
  feedback: Scalars['String'];
}>;


export type GqlRejectContentChangeRequestMutation = (
  { __typename?: 'Mutation' }
  & { changeRequestRejectProduct?: Maybe<(
    { __typename?: 'ProductChangeRequest' }
    & Pick<GqlProductChangeRequest, 'id'>
  )> }
);

export type GqlUnlockChangeRequestMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlUnlockChangeRequestMutation = (
  { __typename?: 'Mutation' }
  & { changeRequestUnlockProduct?: Maybe<(
    { __typename?: 'ProductChangeRequest' }
    & Pick<GqlProductChangeRequest, 'id' | 'approvalStatus'>
  )> }
);

export type GqlSearchProductChangeRequestsQueryVariables = Exact<{
  filters?: Maybe<GqlContentChangeRequestFilters>;
  pagination?: Maybe<GqlPaginationInput>;
  sort?: Maybe<GqlContentChangeRequestSort>;
}>;


export type GqlSearchProductChangeRequestsQuery = (
  { __typename?: 'Query' }
  & { searchProductChangeRequests?: Maybe<(
    { __typename?: 'ContentChangeRequests' }
    & { contentChangeRequests?: Maybe<Array<Maybe<(
      { __typename?: 'SerializableContentChangeRequest' }
      & Pick<GqlSerializableContentChangeRequest, 'id' | 'createdAt' | 'updatedAt' | 'approvedAt' | 'rejectedAt' | 'approvalStatus' | 'actionType' | 'authorId' | 'reviewerId' | 'brandId' | 'productId' | 'complianceRegionId' | 'feedback'>
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | 'isGlobal' | 'name'>
      )>, createdBy?: Maybe<(
        { __typename?: 'Users' }
        & Pick<GqlUsers, 'firstName' | 'fullName' | 'lastName'>
      )>, product?: Maybe<(
        { __typename?: 'LibraryProduct' }
        & Pick<GqlLibraryProduct, 'id' | 'connectedCount'>
      )>, dispensary?: Maybe<(
        { __typename?: 'Dispensaries' }
        & Pick<GqlDispensaries, 'id'>
        & { location?: Maybe<(
          { __typename?: 'Dispensaries_profile_location' }
          & Pick<GqlDispensaries_Profile_Location, 'state'>
        )> }
      )>, computedAttributes?: Maybe<(
        { __typename?: 'ContentChangeRequestComputedAttributes' }
        & Pick<GqlContentChangeRequestComputedAttributes, 'actionType' | 'approvalStatus' | 'authorId' | 'brandId' | 'brandName' | 'category' | 'complianceRegionId' | 'connectedCount' | 'createdAt' | 'createdBy' | 'productId' | 'productName' | 'reviewerId' | 'score' | 'state' | 'subcategory' | 'updatedAt'>
      )>, contentAttributes?: Maybe<(
        { __typename?: 'ContentChangeRequestAttributes' }
        & Pick<GqlContentChangeRequestAttributes, 'brandId' | 'menu_score' | 'category' | 'connectedCount' | 'description' | 'effects' | 'image' | 'medicalOnly' | 'name' | 'prices' | 'recOnly' | 'strainType' | 'subcategory'>
        & { cbdContent?: Maybe<(
          { __typename?: 'ContentChangeRequestPotency' }
          & Pick<GqlContentChangeRequestPotency, 'unit' | 'range'>
        )>, thcContent?: Maybe<(
          { __typename?: 'ContentChangeRequestPotency' }
          & Pick<GqlContentChangeRequestPotency, 'unit' | 'range'>
        )> }
      )> }
    )>>>, meta?: Maybe<(
      { __typename?: 'ContentChangeRequestMeta' }
      & Pick<GqlContentChangeRequestMeta, 'totalCount'>
      & { filters?: Maybe<(
        { __typename?: 'ContentChangeRequestMetaFilters' }
        & { score?: Maybe<Array<Maybe<(
          { __typename?: 'ContentChangeRequestMetaFilterNumber' }
          & Pick<GqlContentChangeRequestMetaFilterNumber, 'label' | 'value'>
        )>>>, approvalStatus?: Maybe<Array<Maybe<(
          { __typename?: 'ContentChangeRequestMetaFilterText' }
          & Pick<GqlContentChangeRequestMetaFilterText, 'label' | 'value'>
        )>>>, state?: Maybe<Array<Maybe<(
          { __typename?: 'ContentChangeRequestMetaFilterText' }
          & Pick<GqlContentChangeRequestMetaFilterText, 'label' | 'value'>
        )>>>, brand?: Maybe<Array<Maybe<(
          { __typename?: 'ContentChangeRequestMetaFilterText' }
          & Pick<GqlContentChangeRequestMetaFilterText, 'label' | 'value'>
        )>>> }
      )> }
    )> }
  )> }
);

export type GqlGetProductChangeRequestQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlGetProductChangeRequestQuery = (
  { __typename?: 'Query' }
  & { changeRequestProduct?: Maybe<(
    { __typename?: 'ProductChangeRequest' }
    & Pick<GqlProductChangeRequest, 'id' | 'updatedAt' | 'approvedAt'>
    & { contentAttributes: (
      { __typename?: 'LibraryProduct' }
      & Pick<GqlLibraryProduct, 'category' | 'connectedCount' | 'description' | 'effects' | 'image' | 'name' | 'options' | 'prices' | 'strainType' | 'subcategory'>
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | 'name' | 'isGlobal'>
      )>, cbdContent?: Maybe<(
        { __typename?: 'ProductPotency' }
        & Pick<GqlProductPotency, 'unit' | 'range'>
      )>, thcContent?: Maybe<(
        { __typename?: 'ProductPotency' }
        & Pick<GqlProductPotency, 'unit' | 'range'>
      )> }
    ) }
  )> }
);

export type GqlProductFiltersQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlProductFiltersQuery = (
  { __typename?: 'Query' }
  & { productFilters?: Maybe<(
    { __typename?: 'ProductFilters' }
    & { dispensaryDropdownOptions: Array<Maybe<(
      { __typename?: 'DispensaryDropdownOption' }
      & Pick<GqlDispensaryDropdownOption, 'key' | 'label' | 'state' | 'status' | 'value'>
    )>>, chainDropdownOptions?: Maybe<Array<Maybe<(
      { __typename?: 'ChainDropdownOption' }
      & Pick<GqlChainDropdownOption, 'key' | 'label' | 'value'>
    )>>>, statesDropdownOptions: Array<Maybe<(
      { __typename?: 'DropdownOption' }
      & Pick<GqlDropdownOption, 'key' | 'label' | 'value'>
    )>> }
  )> }
);

export type GqlSuperProductsQueryVariables = Exact<{
  filter: GqlSuperProductsInput;
}>;


export type GqlSuperProductsQuery = (
  { __typename?: 'Query' }
  & { superProducts?: Maybe<(
    { __typename?: 'MenuCleanup' }
    & { products: Array<Maybe<(
      { __typename?: 'Products' }
      & Pick<GqlProducts, '_id' | 'id' | 'brandId' | 'brandName' | 'DispensaryID' | 'matchedLibraryItemsConfidence' | 'Name' | 'score' | 'strainType' | 'type'>
      & { brand?: Maybe<(
        { __typename?: 'Brand' }
        & Pick<GqlBrand, 'id' | 'name'>
      )>, dispensary?: Maybe<(
        { __typename?: 'Dispensaries' }
        & Pick<GqlDispensaries, 'id' | 'name'>
      )> }
    )>>, queryInfo: (
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    ) }
  )> }
);

export type GqlFilteredCouponsForSuperAdminQueryVariables = Exact<{
  filter?: Maybe<GqlCouponsFilterInput>;
  sort?: Maybe<GqlCouponsSortInput>;
  pagination?: Maybe<GqlCouponsPaginationInput>;
}>;


export type GqlFilteredCouponsForSuperAdminQuery = (
  { __typename?: 'Query' }
  & { filteredCoupons?: Maybe<(
    { __typename?: 'CouponList' }
    & { queryInfo?: Maybe<(
      { __typename?: 'queryInfoType' }
      & Pick<GqlQueryInfoType, 'totalCount'>
    )>, coupons?: Maybe<Array<Maybe<(
      { __typename?: 'Coupons' }
      & Pick<GqlCoupons, '_id' | 'active' | 'addedDate' | 'code' | 'dispensary' | 'expDate' | 'fixedDiscountInCents' | 'numUses' | 'percentDiscount' | 'reimbursed'>
    )>>> }
  )> }
);

export type GqlGetUserQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlGetUserQuery = (
  { __typename?: 'Query' }
  & { getConsumerUser?: Maybe<(
    { __typename?: 'ConsumerUser' }
    & Pick<GqlConsumerUser, '_id' | 'email'>
    & { profile?: Maybe<(
      { __typename?: 'consumerUserProfile' }
      & Pick<GqlConsumerUserProfile, 'phone' | 'textNotifications' | 'emailNotifications' | 'emailOptIn'>
    )>, customers?: Maybe<Array<Maybe<(
      { __typename?: 'Customers' }
      & Pick<GqlCustomers, '_id' | 'emailSubscription' | 'dispensaryName'>
    )>>> }
  )> }
);

export type GqlDispensaryUpdateStatusMutationVariables = Exact<{
  input: GqlDispensaryUpdateStatusInput;
}>;


export type GqlDispensaryUpdateStatusMutation = (
  { __typename?: 'Mutation' }
  & { dispensaryUpdateStatus?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success'>
  )> }
);

export type GqlDispensaryInfoModalCreateRetailerAgentMutationVariables = Exact<{
  userId: Scalars['String'];
  position: Scalars['String'];
  retailerId: Scalars['String'];
}>;


export type GqlDispensaryInfoModalCreateRetailerAgentMutation = (
  { __typename?: 'Mutation' }
  & { createRetailerAgent: (
    { __typename?: 'RetailerAgent' }
    & Pick<GqlRetailerAgent, 'id' | 'userId' | 'userName' | 'retailerId' | 'position' | 'dispensaryId'>
  ) }
);

export type GqlDispensaryInfoModalDestroyRetailerAgentMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type GqlDispensaryInfoModalDestroyRetailerAgentMutation = (
  { __typename?: 'Mutation' }
  & { destroyRetailerAgent?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlDispensaryInfoModalFilteredDispensariesQueryVariables = Exact<{
  dispensaryFilter: GqlDispensariesFilterInput;
}>;


export type GqlDispensaryInfoModalFilteredDispensariesQuery = (
  { __typename?: 'Query' }
  & { filteredDispensaries?: Maybe<Array<Maybe<(
    { __typename?: 'Dispensaries' }
    & Pick<GqlDispensaries, 'id' | 'name' | 'address' | 'firstActiveAt' | 'email' | 'notes' | 'phone' | 'deliveryMin' | 'hideFromCCT' | 'timezone'>
    & { retailer: (
      { __typename?: 'Retailer' }
      & Pick<GqlRetailer, 'id'>
    ), deliveryInfo?: Maybe<(
      { __typename?: 'Dispensaries_deliveryInfo' }
      & Pick<GqlDispensaries_DeliveryInfo, 'withinBounds' | 'fee' | 'minimum' | 'feeVaries' | 'minimumVaries'>
    )>, feeTiers?: Maybe<Array<Maybe<(
      { __typename?: 'Dispensaries_profile_feeTiers' }
      & Pick<GqlDispensaries_Profile_FeeTiers, 'fee' | 'feeType' | 'max' | 'min' | 'percentFee'>
    )>>>, terminals?: Maybe<Array<Maybe<(
      { __typename?: 'Dispensaries_terminals' }
      & Pick<GqlDispensaries_Terminals, 'lastSeenAt'>
    )>>>, effectiveHours?: Maybe<(
      { __typename?: 'EffectiveHours' }
      & { deliveryHours?: Maybe<(
        { __typename?: 'Dispensaries_profile_hours' }
        & GqlHourSetFragmentFragment
      )>, pickupHours?: Maybe<(
        { __typename?: 'Dispensaries_profile_hours' }
        & GqlHourSetFragmentFragment
      )> }
    )>, superAdmins?: Maybe<Array<Maybe<(
      { __typename?: 'Dispensaries_superAdmin' }
      & Pick<GqlDispensaries_SuperAdmin, 'name' | 'role' | 'userId'>
    )>>>, orderTypesConfig?: Maybe<(
      { __typename?: 'OrderTypesConfig' }
      & { delivery?: Maybe<(
        { __typename?: 'OrderTypeConfig' }
        & Pick<GqlOrderTypeConfig, 'enabled'>
      )> }
    )>, paymentTypesAccepted?: Maybe<(
      { __typename?: 'PaymentTypesConfig' }
      & Pick<GqlPaymentTypesConfig, 'aeropay' | 'alt36' | 'canPay' | 'cash' | 'check' | 'creditCardAtDoor' | 'creditCardByPhone' | 'debit' | 'linx' | 'payOnlineChase' | 'payOnlineHypur' | 'payOnlineMerrco' | 'payOnlineMoneris' | 'paytender'>
    )> }
  )>>> }
);

export type GqlDispensaryInfoModalFilteredUsersQueryVariables = Exact<{
  usersFilter: GqlUsersFilterInput;
}>;


export type GqlDispensaryInfoModalFilteredUsersQuery = (
  { __typename?: 'Query' }
  & { filteredUsers?: Maybe<Array<Maybe<(
    { __typename?: 'Users' }
    & Pick<GqlUsers, '_id' | 'fullName' | 'firstName' | 'lastName' | 'availableRetailerAgentPositions'>
  )>>> }
);

export type GqlDispensaryInfoModalRetailerAgentsQueryVariables = Exact<{
  filter?: Maybe<GqlRetailerAgentFilterInput>;
}>;


export type GqlDispensaryInfoModalRetailerAgentsQuery = (
  { __typename?: 'Query' }
  & { retailerAgents?: Maybe<Array<Maybe<(
    { __typename?: 'RetailerAgent' }
    & Pick<GqlRetailerAgent, 'id' | 'userId' | 'userName' | 'retailerId' | 'position' | 'dispensaryId'>
  )>>> }
);

export type GqlSuperGetOrdersQueryVariables = Exact<{
  input: GqlGetOrdersInput;
}>;


export type GqlSuperGetOrdersQuery = (
  { __typename?: 'Query' }
  & { getOrders?: Maybe<(
    { __typename?: 'AdminOrderListType' }
    & { orders?: Maybe<Array<Maybe<(
      { __typename?: 'AdminOrderType' }
      & Pick<GqlAdminOrderType, '_id' | 'createdAt' | 'customerId' | 'customerName' | 'delivery' | 'dispensaryId' | 'dispensaryName' | 'dispoTimezone' | 'duration' | 'isAnonymous' | 'isAfterHoursOrder' | 'isKioskOrder' | 'orderId' | 'status' | 'totalCost'>
      & { deliveryInfo?: Maybe<(
        { __typename?: 'Orders_deliveryInfo' }
        & Pick<GqlOrders_DeliveryInfo, 'address' | 'apartmentNum' | 'deliveryAddress' | 'deliveryOption' | 'lastSearchedAddress' | 'nonDeliveryAddress'>
      )>, durationEstimates?: Maybe<(
        { __typename?: 'DurationEstimates' }
        & { delivery?: Maybe<(
          { __typename?: 'DurationEstimateRange' }
          & Pick<GqlDurationEstimateRange, 'highInMinutes' | 'lowInMinutes'>
        )>, pickup?: Maybe<(
          { __typename?: 'DurationEstimateRange' }
          & Pick<GqlDurationEstimateRange, 'highInMinutes' | 'lowInMinutes'>
        )> }
      )> }
    )>>> }
  )> }
);

export type GqlUpdateChainDispensariesImageMutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  imageVariantKey: ImageVariantKeyEnum;
}>;


export type GqlUpdateChainDispensariesImageMutation = (
  { __typename?: 'Mutation' }
  & { updateChainDispensariesImage?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlSuperAdminsTableQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlSuperAdminsTableQuery = (
  { __typename?: 'Query' }
  & { filteredUsers?: Maybe<Array<Maybe<(
    { __typename?: 'Users' }
    & Pick<GqlUsers, '_id' | 'email' | 'fullName' | 'firstName' | 'lastName'>
    & { permissions?: Maybe<(
      { __typename?: 'Users_permissions' }
      & Pick<GqlUsers_Permissions, 'menuReview' | 'superMenuReview'>
    )> }
  )>>> }
);

export type GqlImportCustomerCsvMutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  CSV: Scalars['String'];
}>;


export type GqlImportCustomerCsvMutation = (
  { __typename?: 'Mutation' }
  & { importCustomerCSV?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlImportDeliveryZipCodesMutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  csv: Scalars['String'];
}>;


export type GqlImportDeliveryZipCodesMutation = (
  { __typename?: 'Mutation' }
  & { importDeliveryZipCodes?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateCnameMutationVariables = Exact<{
  dispensaryId: Scalars['String'];
  cname: Scalars['String'];
}>;


export type GqlUpdateCnameMutation = (
  { __typename?: 'Mutation' }
  & { updateCname?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateUserEmailMutationVariables = Exact<{
  currentEmail: Scalars['String'];
  newEmail: Scalars['String'];
}>;


export type GqlUpdateUserEmailMutation = (
  { __typename?: 'Mutation' }
  & { updateUserEmail?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateUserPermissionsMutationVariables = Exact<{
  email: Scalars['String'];
  permission: Scalars['String'];
}>;


export type GqlUpdateUserPermissionsMutation = (
  { __typename?: 'Mutation' }
  & { updateUserPermissions?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateUserRoleV2MutationVariables = Exact<{
  email: Scalars['String'];
  role: UserRoles;
}>;


export type GqlUpdateUserRoleV2Mutation = (
  { __typename?: 'Mutation' }
  & { updateUserRoleV2?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export type GqlUpdateUserRoleMutationVariables = Exact<{
  email: Scalars['String'];
  role: Scalars['String'];
}>;


export type GqlUpdateUserRoleMutation = (
  { __typename?: 'Mutation' }
  & { updateUserRole?: Maybe<(
    { __typename?: 'GenericResponse' }
    & Pick<GqlGenericResponse, 'success' | 'message'>
  )> }
);

export const BrandDispensaryFragmentFragmentDoc = gql`
    fragment brandDispensaryFragment on Brand {
  dispensary {
    id
    name
  }
}
    `;
export const BrandFragmentForDropdownFragmentDoc = gql`
    fragment brandFragmentForDropdown on Brand {
  _id
  id
  name
  imageUrl
}
    `;
export const BrandFragmentFragmentDoc = gql`
    fragment brandFragment on Brand {
  _id
  aliasList
  createdAt
  description
  id
  imageUrl
  libraryProductsCount
  name
  productsCount
  updatedAt
}
    `;
export const BucketListFragmentFragmentDoc = gql`
    fragment bucketListFragment on Bucket {
  createdBy {
    _id
    firstName
    lastName
  }
  checkedOutAt
  checkedOutBy {
    _id
    firstName
    lastName
  }
  completedReviewsCount
  id
  name
  productsCount
  teamName
}
    `;
export const CouponFragmentFragmentDoc = gql`
    fragment couponFragment on Coupons {
  _id
  active
  addedDate
  applicableCategories {
    category
    subcategory
  }
  code
  dispensaryId
  expDate
  fixedDiscountInCents
  numAllowedUses
  numUses
  percentDiscount
  oneUsePerCustomer
  restrictions {
    minimumPurchase
    minimumPurchaseInCents
    noSpecials
  }
  usedBy
}
    `;
export const DeviceFragmentFragmentDoc = gql`
    fragment deviceFragment on Devices {
  _id
  accessCode
  autoPrintDevice
  buildNumber
  config {
    getDeliveryOrders
    getKioskOrders
    getPickupOrders
    orderSource
  }
  dispensaryId
  lastSeenAt
  nickname
  online
  printerConnected
  updatedAt
  versionNumber
}
    `;
export const GetSubscriptionsV2PaymentSourcesFragmentDoc = gql`
    fragment GetSubscriptionsV2PaymentSources on DispensaryBillingV2 {
  paymentSources {
    card {
      brand
      last4
    }
    type
  }
}
    `;
export const HourSetFragmentFragmentDoc = gql`
    fragment hourSetFragment on Dispensaries_profile_hours {
  Monday {
    active
    end
    start
  }
  Tuesday {
    active
    end
    start
  }
  Wednesday {
    active
    end
    start
  }
  Thursday {
    active
    end
    start
  }
  Friday {
    active
    end
    start
  }
  Saturday {
    active
    end
    start
  }
  Sunday {
    active
    end
    start
  }
}
    `;
export const PaymentTypesFragmentFragmentDoc = gql`
    fragment paymentTypesFragment on PaymentTypesConfig {
  alt36
  check
  creditCardAtDoor
  payOnlineChase
  payOnlineHypur
  payOnlineMerrco
  payOnlineMoneris
  creditCardByPhone
  debit
  dutchiePay
  cash
  linx
  canPay
  paytender
  aeropay
}
    `;
export const BaseDispensaryFragmentFragmentDoc = gql`
    fragment baseDispensaryFragment on Dispensaries {
  id
  complianceCode
  customDomainSettings {
    domain
  }
  plusSettings {
    checkoutUrl
    defaultReturnUrl
  }
  distance
  name
  cName
  timezone
  phone
  address
  description
  status
  chain
  location {
    ln1
    ln2
    city
    state
    country
    geometry {
      coordinates
    }
  }
  temporalLocation {
    lastUpdatedAt
    coordinates
    onDuty
  }
  deliveryHours {
    ...hourSetFragment
  }
  pickupHours {
    ...hourSetFragment
  }
  categoryPhotos {
    src
    category
  }
  customCategoryPhotos {
    url
    category
  }
  specialHours {
    name
    startDate
    endDate
    hoursPerDay {
      date
      pickupHours {
        active
        start
        end
      }
      deliveryHours {
        active
        start
        end
      }
    }
  }
  effectiveHours {
    deliveryHours {
      ...hourSetFragment
    }
    pickupHours {
      ...hourSetFragment
    }
  }
  offerAnyPickupService
  offerPickup
  offerCurbsidePickup
  offerDriveThruPickup
  offerDelivery
  listImage
  bannerImage
  logoImage
  embeddedLogoImage
  embeddedMenuUrl
  SpecialLogoImage
  embedBackUrl
  embedSettings {
    disclaimerTextHtml
    disablePageLoadsAtTop
    autoGTM
  }
  alt36
  check
  creditCardAtDoor
  payOnlineHypur
  payOnlineMerrco
  creditCardByPhone
  debitOnly
  cashOnly
  cashless
  linx
  canPay
  paytender
  aeropay
  recDispensary
  medicalDispensary
  maxDeliveryDistance
  mixAndMatchPricingWeights
  feeTiers {
    fee
    feeType
    max
    min
    percentFee
  }
  acceptsTips
  acceptsDutchiePayTips
  requiresDriversLicense
  requiresDriversLicenseForPickup
  requirePhotoIdForDelivery
  requirePhotoIdForPickup
  removeMedicalCardFieldsAtCheckout
  menuOrder
  menuSortSettings {
    brands
    category
    menuOrder
  }
  callConfirmation
  phoneTree
  email
  emailConfirmation
  stealthMode
  actionEstimates {
    pickup {
      readyInMinutes
      rangeInMinutes
    }
    delivery {
      readyInMinutes
      rangeInMinutes
      deliveryTimeInMinutes
    }
  }
  durationEstimateOverrides {
    delivery {
      enabled
      lowInMinutes
      highInMinutes
    }
    pickup {
      enabled
      lowInMinutes
      highInMinutes
    }
  }
  paymentFees {
    fee
    feeType
    paymentType
  }
  ordersConfig {
    posItemNames
    autoConfirm
    autoClose
    terminalReceiptOptions {
      customerNameOption
      birthdate
      deliveryAddress
      phone
      medical
      potencyInfo
      disableSocialImpact
    }
  }
  kioskOrderingEnabled
  kioskInstructions
  kioskConfig {
    fullNameOnly
    phoneRequired
    notesField
    directedOrders
    hidePhoneField
    hideEmailField
    showBirthdateField
  }
  categoryLimits {
    name
    value
  }
  categoryLimitsEnabled
  specialsSettings {
    discountBehavior
    discountStacking
    discountPrecedence
    enableIndividualSpecialPrecedence
    enableIndividualDiscountStacking
    stackingBehavior
    nonStackingBehavior
  }
  storeSettings {
    isolatedMenus
    customerMessagingTermsAccepted
    defaultViewStyle
    disablePurchaseLimits
    disableGuestDOB
    displayPhoneConfirmation
    requireEmailAddressForGuestCheckout
    requireMedCardPhotoForPickup
    hideAddressFromDutchieMain
    requireMedCardPhotoForDelivery
    enableAfterHoursOrderingForPickup
    enableAfterHoursOrderingForDelivery
    enableLLxSaleDiscountSync
    enableMixAndMatchPricingForPickup
    enableMixAndMatchPricingForDelivery
    enableScheduledOrderingForPickup
    enableScheduledOrderingForDelivery
    enableLimitPerCustomer
    quantityLimit
    enableOrderStatusEmails
    enableStorefrontAgeGate
    disableGuestCheckout
    stealthMode
    dontCombineWeightedProducts
    keepUncombinedWeights
    dontMapSubcategoriesByProductName
    prioritizeStaffPicksInSearchResults
    hideEffects
    hideFilters
    subscriptions {
      enabled
    }
    rewardsIntegrationConfiguration {
      rewardsProgramDisplayName
    }
  }
  featureFlags {
    hideStoreHours
    enableOnfleet
    hideDeliveryEstimate
    hideMyAccount
    enablePausedOrders
    hasEffectsFilter
    enableAdvancedDiscountSettings
    enableAfterHoursOrdering
    enableBogoSpecials
    enableBogoTotalQuantityAndWeight
    enableScheduledOrdering
    enableArrivals
    enableDriveThruPickup
    enableMenuImport
    enableMixAndMatch
    enableNonTerminalAutoConfirm
  }
  menuScore
  menuScoresByCategory {
    category
    value
  }
  productCategorySummary {
    category
    value
  }
  updatedAt
  updatedAtISO
  updatedBy
  terminals {
    _id
    nickname
    versionNumber
    lastSeenAt
    lastSeenAtISO
    config {
      orderSource
    }
  }
  ordersArePaused
  ageVerificationBannerHtml
  ageVerificationBannerColor
  menuBannerHtml
  menuBannerColor
  menuUrl
  colorSettings {
    linkColor
    navBarColor
  }
  pickupMinimum {
    enabled
    minimumInCents
  }
  orderTypesConfig {
    pickup {
      enabled
      paymentTypes {
        ...paymentTypesFragment
      }
    }
    curbsidePickup {
      enabled
      paymentTypes {
        ...paymentTypesFragment
      }
    }
    driveThruPickup {
      enabled
      paymentTypes {
        ...paymentTypesFragment
      }
    }
    delivery {
      enabled
      paymentTypes {
        ...paymentTypesFragment
      }
    }
    kiosk {
      enabled
      paymentTypes {
        ...paymentTypesFragment
      }
    }
    offerAnyPickupService
    offerDeliveryService
  }
  paymentTypesAccepted {
    alt36
    check
    creditCardAtDoor
    payOnlineChase
    payOnlineHypur
    payOnlineMerrco
    payOnlineMoneris
    creditCardByPhone
    debit
    dutchiePay
    cash
    linx
    canPay
    paytender
    aeropay
  }
}
    ${HourSetFragmentFragmentDoc}
${PaymentTypesFragmentFragmentDoc}`;
export const BaseOrderingSettingsFragmentFragmentDoc = gql`
    fragment baseOrderingSettingsFragment on BaseOrderingSettings {
  enableASAPOrdering
  enableScheduledOrdering
  enableAfterHoursOrdering
  paymentTypes {
    ...paymentTypesFragment
  }
  scheduledOrderingConfigV2 {
    advancedDayOrderingEnabled
    advancedDayOrderingLimit
    incrementInMinutes
    nextAvailableInMinutes
    orderLimitsEnabled
  }
}
    ${PaymentTypesFragmentFragmentDoc}`;
export const CurbsidePickupOrderingSettingsFragmentFragmentDoc = gql`
    fragment curbsidePickupOrderingSettingsFragment on CurbsidePickupOrderingSettings {
  ...baseOrderingSettingsFragment
  orderMinimum {
    enabled
    minimumInCents
  }
  enableCurbsideArrivals
  arrivalInformationInstructions
}
    ${BaseOrderingSettingsFragmentFragmentDoc}`;
export const DeliveryOrderingSettingsFragmentFragmentDoc = gql`
    fragment deliveryOrderingSettingsFragment on DeliveryOrderingSettings {
  ...baseOrderingSettingsFragment
  deliveryFeeTiers {
    feeInCents
    maximumInCents
    minimumInCents
    feeType
    percentFee
  }
  deliveryMode
  deliveryRadius {
    orderMinimum {
      enabled
      minimumInCents
    }
    radiusInMiles
  }
  deliveryZipCodes {
    zipCode
    feeInCents
    minimumInCents
    feeType
    percentFee
  }
}
    ${BaseOrderingSettingsFragmentFragmentDoc}`;
export const DeliveryZonesFragmentFragmentDoc = gql`
    fragment deliveryZonesFragment on DeliveryOrderingSettings {
  deliveryZones {
    name
    area {
      type
      features {
        type
        geometry {
          type
          coordinates
        }
      }
    }
    feeInCents
    minimumInCents
    feeType
    percentFee
  }
}
    `;
export const DriveThruPickupOrderingSettingsFragmentFragmentDoc = gql`
    fragment driveThruPickupOrderingSettingsFragment on DriveThruPickupOrderingSettings {
  ...baseOrderingSettingsFragment
  orderMinimum {
    enabled
    minimumInCents
  }
}
    ${BaseOrderingSettingsFragmentFragmentDoc}`;
export const HoursForDayFragmentDoc = gql`
    fragment hoursForDay on dayBounds {
  active
  end
  start
}
    `;
export const WeeklyHoursFragmentFragmentDoc = gql`
    fragment weeklyHoursFragment on WeeklyHours {
  Friday {
    ...hoursForDay
  }
  Monday {
    ...hoursForDay
  }
  Saturday {
    ...hoursForDay
  }
  Sunday {
    ...hoursForDay
  }
  Thursday {
    ...hoursForDay
  }
  Tuesday {
    ...hoursForDay
  }
  Wednesday {
    ...hoursForDay
  }
}
    ${HoursForDayFragmentDoc}`;
export const SpecialHoursDayFragmentFragmentDoc = gql`
    fragment specialHoursDayFragment on SpecialHoursDay {
  date
  hours {
    ...hoursForDay
  }
}
    ${HoursForDayFragmentDoc}`;
export const SpecialHoursFragmentFragmentDoc = gql`
    fragment specialHoursFragment on SpecialHours {
  id
  name
  startDate
  endDate
  hoursPerDay {
    ...specialHoursDayFragment
  }
}
    ${SpecialHoursDayFragmentFragmentDoc}`;
export const HoursSettingsForOrderTypeFragmentFragmentDoc = gql`
    fragment hoursSettingsForOrderTypeFragment on HoursSettingsForOrderType {
  hours {
    ...weeklyHoursFragment
  }
  specialHours {
    ...specialHoursFragment
  }
}
    ${WeeklyHoursFragmentFragmentDoc}
${SpecialHoursFragmentFragmentDoc}`;
export const InStorePickupOrderingSettingsFragmentFragmentDoc = gql`
    fragment inStorePickupOrderingSettingsFragment on InStorePickupOrderingSettings {
  ...baseOrderingSettingsFragment
  orderMinimum {
    enabled
    minimumInCents
  }
}
    ${BaseOrderingSettingsFragmentFragmentDoc}`;
export const KioskOrderingSettingsFragmentFragmentDoc = gql`
    fragment kioskOrderingSettingsFragment on KioskOrderingSettings {
  enabled
  fullNameOnly
  phoneRequired
  notesField
  directedOrders
  hideEmailField
  hidePhoneField
  showBirthdateField
  kioskInstructions
  paymentTypes {
    ...paymentTypesFragment
  }
}
    ${PaymentTypesFragmentFragmentDoc}`;
export const MaxReservationSlotFragmentFragmentDoc = gql`
    fragment maxReservationSlotFragment on MaxReservationSlot {
  currentCount
  date
  startTime
  endTime
  maxOrders
}
    `;
export const MaxReservationSlotsByDayFragmentFragmentDoc = gql`
    fragment maxReservationSlotsByDayFragment on MaxReservationSlotsByDay {
  Monday {
    ...maxReservationSlotFragment
  }
  Tuesday {
    ...maxReservationSlotFragment
  }
  Wednesday {
    ...maxReservationSlotFragment
  }
  Thursday {
    ...maxReservationSlotFragment
  }
  Friday {
    ...maxReservationSlotFragment
  }
  Saturday {
    ...maxReservationSlotFragment
  }
  Sunday {
    ...maxReservationSlotFragment
  }
}
    ${MaxReservationSlotFragmentFragmentDoc}`;
export const ScheduledOrderingConfigFragmentFragmentDoc = gql`
    fragment scheduledOrderingConfigFragment on ReservationOptionsForOrderType {
  advancedDayOrderingEnabled
  advancedDayOrderingLimit
  incrementInMinutes
  nextAvailableInMinutes
  orderLimitsEnabled
}
    `;
export const TaxPropertiesFragmentDoc = gql`
    fragment taxProperties on Dispensaries_TaxConfig_Tax {
  id
  type
  name
  rate
  potencyRate
  potency
  medical
  recreational
  taxBasis
  stages {
    op
    type
  }
  applyTo {
    types
    hemp
  }
  order
  deliveryPolicy
  includeStateSalesTaxInDestinationRate
}
    `;
export const ConsumerBaseProductFragmentFragmentDoc = gql`
    fragment consumerBaseProductFragment on Products {
  _id
  id
  AdditionalOptions
  brandId
  brandName
  CBD
  CBDContent {
    unit
    range
  }
  comingSoon
  createdAt
  DispensaryID
  Image
  images {
    url
    description
    active
  }
  imgixSettings {
    productCard {
      border
      mark
      markscale
      markpad
      fit
    }
    productModal {
      border
      mark
      markscale
      markpad
      fit
    }
  }
  measurements {
    netWeight {
      unit
      values
    }
    volume {
      unit
      values
    }
  }
  medicalOnly
  medicalPrices
  medicalSpecialPrices
  wholesalePrices
  Name
  nonArmsLength
  Options
  limitsPerCustomer {
    key
    value
  }
  manualInventory {
    option
    inventory
  }
  POSMetaData {
    canonicalID
    canonicalBrandName
    children {
      option
      quantity
      quantityAvailable
      kioskQuantityAvailable
      standardEquivalent {
        value
        unit
      }
      recEquivalent {
        value
        unit
      }
    }
  }
  Prices
  pricingTierData {
    generatedTiersId
    tiersId
    tiersName
    tiers {
      startWeight
      endWeight
      price
      pricePerGram
      weightUOM
    }
  }
  recOnly
  recPrices
  recSpecialPrices
  special
  specialData {
    bogoSpecials {
      bogoConditionLogicOperator
      bogoConditions {
        _id
        brandId
        brandName
        categoryName
        selectedCategoriesAndSubcategories
        productGroup
        productId
        quantity
        weight
        weightOperator
      }
      bogoRewardLogicOperator
      bogoRewards {
        _id
        brandId
        brandName
        categoryName
        selectedCategoriesAndSubcategories
        dollarDiscount
        productGroup
        productId
        percentDiscount
        quantity
        targetPrice
        weight
      }
      discountToCart {
        _id
        enabled
        discountType
        value
      }
      discountBehavior
      discountStacking
      discountPrecedence
      endStamp
      excludedProducts {
        conditions {
          _id
          key
          Name
        }
        rewards {
          _id
          key
          Name
        }
      }
      isRecurring
      itemsForAPrice {
        _id
        enabled
        value
      }
      menuType
      recurringEndDate
      redemptionLimit
      specialId
      specialName
      stackingBehavior
      totalQuantity {
        enabled
        maxQuantity
        quantity
        quantityOperator
      }
      totalWeight {
        enabled
        weight
        weightOperator
      }
      totalSpend {
        enabled
        maximumSpend
        minimumSpend
        spendOperator
      }
      qualifyingOptions
    }
    saleSpecials {
      discount
      discountStacking
      menuType
      percentDiscount
      source
      sourceId
      specialId
      specialName
      specialRestrictions
      stackingBehavior
      stackingMode
      targetPrice
    }
  }
  Status
  strainType
  subcategory
  THC
  THCContent {
    unit
    range
  }
  type
  vapeTaxApplicable
  weight
  featured {
    current
    startTime
    endTime
  }
  isBelowThreshold
  isBelowKioskThreshold
  optionsBelowThreshold
  optionsBelowKioskThreshold
  cName
  pastCNames
  brandLogo
  bottleDepositTaxCents
}
    `;
export const TerpeneFragmentFragmentDoc = gql`
    fragment TerpeneFragment on Terpene {
  aliasList
  aromas
  description
  effects
  id
  name
  unitSymbol
  potentialHealthBenefits
}
    `;
export const AdminIdentityFragmentFragmentDoc = gql`
    fragment adminIdentityFragment on LoginAdmin {
  accessToken
  user {
    _id
    createdAt
    emails {
      address
    }
    profile {
      browserNotification
      chainID
      desktopNotification
      dispensaryId
      emailNotifications
      emailOptIn
      firstName
      fullName
      lastName
      permissions {
        allLocations
        billing
        analytics
        customers
        driver
        enterpriseAdmin
        enterpriseSpecials
        menu
        menuReview
        superMenuReview
        orders
        promote
        settings
        users
        tasks
      }
      phone
      textNotifications
      type
    }
  }
}
    `;
export const EnterpriseSpecialDataFragmentDoc = gql`
    fragment enterpriseSpecialData on EnterpriseSpecial {
  _id
  active
  menuDisplayName
  menuDisplayDescription
  menuDisplayImage
  bogoConditionLogicOperator
  bogoConditions {
    _id
    brandId
    brandName
    categoryName
    productGroup
    productId
    quantity
    weight
    weightOperator
  }
  bogoRewardLogicOperator
  bogoRewards {
    _id
    brandId
    brandName
    categoryName
    dollarDiscount
    productGroup
    productId
    percentDiscount
    quantity
    targetPrice
    weight
  }
  cipher
  clicks
  complete
  createdAt
  createdBy
  description
  descriptionHtml
  discount
  discountedPrices
  discountToCart {
    _id
    enabled
    discountType
    value
  }
  discountPrecedence
  discountStacking
  dispensaryId
  dispensaries
  displayRank: dollarDiscount
  duplicatedFrom
  emailSpecial
  endDay
  endStamp
  endTime
  enterpriseId
  enterpriseSpecialId
  excludedProducts {
    _id
    Name
    key
    conditions {
      _id
      Name
      key
    }
    rewards {
      _id
      Name
      key
    }
  }
  heading
  id
  inactiveDispensaries
  isRecurring
  itemsForAPrice {
    _id
    enabled
    value
  }
  localTime
  menuType
  name
  percentDiscount
  productDiscounts
  productGroup
  productGroupRewards
  products
  recurring {
    days
    endDate
    endTime
    setEndDate
    startTime
  }
  redemptionLimit
  scope
  source
  sourceId
  specialRestrictions
  stackingBehavior
  stackingMode
  startDay
  startStamp
  startTime
  specialType
  subject
  targetPrice
  timezone
  totalQuantity {
    enabled
    maxQuantity
    quantity
    quantityOperator
  }
  totalWeight {
    enabled
    weight
    weightOperator
  }
  totalSpend {
    enabled
    maximumSpend
    minimumSpend
    spendOperator
  }
  updatedAt
  updatedBy
  version
}
    `;
export const SpecialDataFragmentDoc = gql`
    fragment specialData on Specials {
  _id
  active
  menuDisplayName
  menuDisplayDescription
  bogoConditionLogicOperator
  menuDisplayImage
  bogoConditions {
    _id
    brandId
    brandName
    categoryName
    productGroup
    productId
    quantity
    weight
    weightOperator
  }
  bogoRewardLogicOperator
  bogoRewards {
    _id
    brandId
    brandName
    categoryName
    dollarDiscount
    productGroup
    productId
    percentDiscount
    quantity
    targetPrice
    weight
  }
  clicks
  createdAt
  createdBy
  description
  descriptionHtml
  discount
  discountedPrices
  discountPrecedence
  discountStacking
  discountToCart {
    _id
    enabled
    discountType
    value
  }
  dispensaryId
  displayRank
  emailSpecial
  endDay
  endStamp
  endTime
  excludedProducts {
    _id
    Name
    key
    conditions {
      _id
      Name
      key
    }
    rewards {
      _id
      Name
      key
    }
  }
  heading
  isRecurring
  itemsForAPrice {
    _id
    enabled
    value
  }
  menuType
  name
  percentDiscount
  productDiscounts
  productGroup
  productGroupRewards
  products
  recurring {
    days
    endDate
    endTime
    setEndDate
    startTime
  }
  redemptionLimit
  scope
  source
  sourceId
  specialId
  specialRestrictions
  specialType
  stackingBehavior
  stackingMode
  startDate
  startDay
  startStamp
  startTime
  subject
  targetPrice
  totalQuantity {
    enabled
    maxQuantity
    quantity
    quantityOperator
  }
  totalWeight {
    enabled
    weight
    weightOperator
  }
  totalSpend {
    enabled
    maximumSpend
    minimumSpend
    spendOperator
  }
  updatedAt
  updatedBy
  version
}
    `;
export const BillToTextPaymentSourcesFragmentDoc = gql`
    fragment BillToTextPaymentSources on DispensaryBillingV2 {
  paymentSources {
    card {
      brand
      last4
    }
    type
  }
}
    `;
export const InvoicesTableInvoicesFragmentDoc = gql`
    fragment InvoicesTableInvoices on ChargebeeSubscriptionV2 {
  invoices {
    amountDue
    billingCycle
    dueDate
    id
    lineItems {
      dateFrom
      dateTo
    }
    status
    total
  }
}
    `;
export const AdminContentBaseProductFragmentFragmentDoc = gql`
    fragment adminContentBaseProductFragment on Products {
  id
  _id
  AdditionalOptions
  brand {
    _id
    id
    name
  }
  brandName
  CBD
  CBDContent {
    unit
    range
  }
  connectedAt
  connectedBy
  createdAt
  dateCreated
  Description
  descriptionHtml
  DispensaryID
  dispensaryName
  duplicatedProductId
  effects
  Image
  images {
    _id
    url
    origin
    active
    label
    description
  }
  imgixSettings {
    productCard {
      border
      mark
      markscale
      markpad
      fit
    }
    productModal {
      border
      mark
      markscale
      markpad
      fit
    }
  }
  integrationKey
  matchedLibraryItemsConfidence
  medicalOnly
  medicalPrices
  medicalSpecialPrices
  Name
  Options
  limitsPerCustomer {
    key
    value
  }
  manualInventory {
    option
    inventory
  }
  originalPrices
  overrides
  POSMetaData {
    canonicalCategory
    canonicalID
    canonicalImgUrl
    canonicalName
    canonicalBrandName
    children {
      canonicalCategory
      canonicalID
      canonicalName
      medPrice
      option
      price
      quantity
      quantityAvailable
      recPrice
    }
    integrationID
  }
  preCropImage
  Prices
  wholesalePrices
  rawPrices
  rawMedicalPrices
  recOnly
  recPrices
  recSpecialPrices
  reviewedAt
  reviewedBy
  score
  special
  specialData {
    bogoSpecials {
      bogoConditionLogicOperator
      bogoConditions {
        _id
        brandId
        brandName
        categoryName
        productGroup
        productId
        quantity
        weight
        weightOperator
      }
      bogoRewardLogicOperator
      bogoRewards {
        _id
        brandId
        brandName
        categoryName
        dollarDiscount
        productGroup
        productId
        percentDiscount
        quantity
        targetPrice
        weight
      }
      endStamp
      excludedProducts {
        conditions {
          _id
          key
          Name
        }
        rewards {
          _id
          key
          Name
        }
      }
      isRecurring
      itemsForAPrice {
        _id
        enabled
        value
      }
      discountBundle {
        _id
        applyTo
        discountType
        enabled
        limit
        value
      }
      menuType
      recurringEndDate
      redemptionLimit
      specialId
      specialName
      totalQuantity {
        enabled
        maxQuantity
        quantity
        quantityOperator
      }
      totalWeight {
        enabled
        weight
        weightOperator
      }
      totalSpend {
        enabled
        maximumSpend
        minimumSpend
        spendOperator
      }
    }
    saleSpecials {
      discount
      menuType
      percentDiscount
      source
      sourceId
      specialId
      specialRestrictions
      stackingMode
      targetPrice
    }
    discount
    percentDiscount
  }
  Status
  strainType
  subcategory
  syncedAt
  updatedAt
  updatedBy
  THC
  THCContent {
    unit
    range
  }
  type
  weight
  featured {
    current
    startTime
    endTime
  }
  isBelowThreshold
  optionsBelowThreshold
  adminEdits {
    updatedAt
    updatedBy
  }
  brandLogo
  brandDescription
  cName
  brandId
}
    `;
export const PersistCheckoutV2Document = gql`
    mutation PersistCheckoutV2($order: JSON!, $dispensaryId: String!, $token: String) {
  persistCheckoutV2(order: $order, dispensaryId: $dispensaryId, token: $token) {
    checkoutToken
  }
}
    `;
export type GqlPersistCheckoutV2MutationFn = ApolloReactCommon.MutationFunction<GqlPersistCheckoutV2Mutation, GqlPersistCheckoutV2MutationVariables>;

/**
 * __usePersistCheckoutV2Mutation__
 *
 * To run a mutation, you first call `usePersistCheckoutV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePersistCheckoutV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [persistCheckoutV2Mutation, { data, loading, error }] = usePersistCheckoutV2Mutation({
 *   variables: {
 *      order: // value for 'order'
 *      dispensaryId: // value for 'dispensaryId'
 *      token: // value for 'token'
 *   },
 * });
 */
export function usePersistCheckoutV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlPersistCheckoutV2Mutation, GqlPersistCheckoutV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlPersistCheckoutV2Mutation, GqlPersistCheckoutV2MutationVariables>(PersistCheckoutV2Document, baseOptions);
      }
export type PersistCheckoutV2MutationHookResult = ReturnType<typeof usePersistCheckoutV2Mutation>;
export type PersistCheckoutV2MutationResult = ApolloReactCommon.MutationResult<GqlPersistCheckoutV2Mutation>;
export type PersistCheckoutV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlPersistCheckoutV2Mutation, GqlPersistCheckoutV2MutationVariables>;
export const PersistCheckoutDocument = gql`
    mutation PersistCheckout($order: JSON!, $dispensaryId: String!, $token: String!) {
  persistCheckout(order: $order, dispensaryId: $dispensaryId, token: $token) {
    success
  }
}
    `;
export type GqlPersistCheckoutMutationFn = ApolloReactCommon.MutationFunction<GqlPersistCheckoutMutation, GqlPersistCheckoutMutationVariables>;

/**
 * __usePersistCheckoutMutation__
 *
 * To run a mutation, you first call `usePersistCheckoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePersistCheckoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [persistCheckoutMutation, { data, loading, error }] = usePersistCheckoutMutation({
 *   variables: {
 *      order: // value for 'order'
 *      dispensaryId: // value for 'dispensaryId'
 *      token: // value for 'token'
 *   },
 * });
 */
export function usePersistCheckoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlPersistCheckoutMutation, GqlPersistCheckoutMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlPersistCheckoutMutation, GqlPersistCheckoutMutationVariables>(PersistCheckoutDocument, baseOptions);
      }
export type PersistCheckoutMutationHookResult = ReturnType<typeof usePersistCheckoutMutation>;
export type PersistCheckoutMutationResult = ApolloReactCommon.MutationResult<GqlPersistCheckoutMutation>;
export type PersistCheckoutMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlPersistCheckoutMutation, GqlPersistCheckoutMutationVariables>;
export const ReservationConfigQueryDocument = gql`
    query ReservationConfigQuery($dispensaryId: String!) {
  filteredDispensaries(filter: {cNameOrID: $dispensaryId}) {
    reservationConfig {
      enabled
      pickup {
        advancedDayOrderingEnabled
        advancedDayOrderingLimit
        nextAvailableInMinutes
      }
      delivery {
        advancedDayOrderingEnabled
        advancedDayOrderingLimit
        nextAvailableInMinutes
      }
    }
  }
}
    `;

/**
 * __useReservationConfigQueryQuery__
 *
 * To run a query within a React component, call `useReservationConfigQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useReservationConfigQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useReservationConfigQueryQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useReservationConfigQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlReservationConfigQueryQuery, GqlReservationConfigQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlReservationConfigQueryQuery, GqlReservationConfigQueryQueryVariables>(ReservationConfigQueryDocument, baseOptions);
      }
export function useReservationConfigQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlReservationConfigQueryQuery, GqlReservationConfigQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlReservationConfigQueryQuery, GqlReservationConfigQueryQueryVariables>(ReservationConfigQueryDocument, baseOptions);
        }
export type ReservationConfigQueryQueryHookResult = ReturnType<typeof useReservationConfigQueryQuery>;
export type ReservationConfigQueryLazyQueryHookResult = ReturnType<typeof useReservationConfigQueryLazyQuery>;
export type ReservationConfigQueryQueryResult = ApolloReactCommon.QueryResult<GqlReservationConfigQueryQuery, GqlReservationConfigQueryQueryVariables>;
export const CreateBrandDocument = gql`
    mutation CreateBrand($brand: brandInput!) {
  createBrandV2(brand: $brand) {
    ...brandFragment
  }
}
    ${BrandFragmentFragmentDoc}`;
export type GqlCreateBrandMutationFn = ApolloReactCommon.MutationFunction<GqlCreateBrandMutation, GqlCreateBrandMutationVariables>;

/**
 * __useCreateBrandMutation__
 *
 * To run a mutation, you first call `useCreateBrandMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBrandMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBrandMutation, { data, loading, error }] = useCreateBrandMutation({
 *   variables: {
 *      brand: // value for 'brand'
 *   },
 * });
 */
export function useCreateBrandMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateBrandMutation, GqlCreateBrandMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateBrandMutation, GqlCreateBrandMutationVariables>(CreateBrandDocument, baseOptions);
      }
export type CreateBrandMutationHookResult = ReturnType<typeof useCreateBrandMutation>;
export type CreateBrandMutationResult = ApolloReactCommon.MutationResult<GqlCreateBrandMutation>;
export type CreateBrandMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateBrandMutation, GqlCreateBrandMutationVariables>;
export const DeleteBrandDocument = gql`
    mutation DeleteBrand($id: String!) {
  deleteBrand(id: $id) {
    _id
  }
}
    `;
export type GqlDeleteBrandMutationFn = ApolloReactCommon.MutationFunction<GqlDeleteBrandMutation, GqlDeleteBrandMutationVariables>;

/**
 * __useDeleteBrandMutation__
 *
 * To run a mutation, you first call `useDeleteBrandMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteBrandMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteBrandMutation, { data, loading, error }] = useDeleteBrandMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteBrandMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteBrandMutation, GqlDeleteBrandMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteBrandMutation, GqlDeleteBrandMutationVariables>(DeleteBrandDocument, baseOptions);
      }
export type DeleteBrandMutationHookResult = ReturnType<typeof useDeleteBrandMutation>;
export type DeleteBrandMutationResult = ApolloReactCommon.MutationResult<GqlDeleteBrandMutation>;
export type DeleteBrandMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteBrandMutation, GqlDeleteBrandMutationVariables>;
export const UpdateBrandDocument = gql`
    mutation UpdateBrand($id: String!, $brand: brandInput!) {
  updateBrandV2(id: $id, brand: $brand) {
    ...brandFragment
  }
}
    ${BrandFragmentFragmentDoc}`;
export type GqlUpdateBrandMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateBrandMutation, GqlUpdateBrandMutationVariables>;

/**
 * __useUpdateBrandMutation__
 *
 * To run a mutation, you first call `useUpdateBrandMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBrandMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBrandMutation, { data, loading, error }] = useUpdateBrandMutation({
 *   variables: {
 *      id: // value for 'id'
 *      brand: // value for 'brand'
 *   },
 * });
 */
export function useUpdateBrandMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateBrandMutation, GqlUpdateBrandMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateBrandMutation, GqlUpdateBrandMutationVariables>(UpdateBrandDocument, baseOptions);
      }
export type UpdateBrandMutationHookResult = ReturnType<typeof useUpdateBrandMutation>;
export type UpdateBrandMutationResult = ApolloReactCommon.MutationResult<GqlUpdateBrandMutation>;
export type UpdateBrandMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateBrandMutation, GqlUpdateBrandMutationVariables>;
export const BrandsForDropdownDocument = gql`
    query BrandsForDropdown($dispensaryId: String, $searchString: String, $limit: Int, $parentBrandId: ID, $hasParent: Boolean) {
  searchBrandsV2(
    filters: {dispensaryId: $dispensaryId, parentBrandId: $parentBrandId, hasParent: $hasParent}
    pagination: {limit: $limit, offset: 0}
    search: $searchString
    sort: {sortBy: score, sortDirection: desc}
  ) {
    brands {
      ...brandFragmentForDropdown
      isGlobal
    }
  }
}
    ${BrandFragmentForDropdownFragmentDoc}`;

/**
 * __useBrandsForDropdownQuery__
 *
 * To run a query within a React component, call `useBrandsForDropdownQuery` and pass it any options that fit your needs.
 * When your component renders, `useBrandsForDropdownQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBrandsForDropdownQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      searchString: // value for 'searchString'
 *      limit: // value for 'limit'
 *      parentBrandId: // value for 'parentBrandId'
 *      hasParent: // value for 'hasParent'
 *   },
 * });
 */
export function useBrandsForDropdownQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlBrandsForDropdownQuery, GqlBrandsForDropdownQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlBrandsForDropdownQuery, GqlBrandsForDropdownQueryVariables>(BrandsForDropdownDocument, baseOptions);
      }
export function useBrandsForDropdownLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlBrandsForDropdownQuery, GqlBrandsForDropdownQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlBrandsForDropdownQuery, GqlBrandsForDropdownQueryVariables>(BrandsForDropdownDocument, baseOptions);
        }
export type BrandsForDropdownQueryHookResult = ReturnType<typeof useBrandsForDropdownQuery>;
export type BrandsForDropdownLazyQueryHookResult = ReturnType<typeof useBrandsForDropdownLazyQuery>;
export type BrandsForDropdownQueryResult = ApolloReactCommon.QueryResult<GqlBrandsForDropdownQuery, GqlBrandsForDropdownQueryVariables>;
export const GetBrandDocument = gql`
    query GetBrand($id: String!) {
  getBrand(id: $id) {
    ...brandFragment
    isGlobal
    source
    creatorUserId
    dispensary {
      name
      id
    }
    parentBrandId
  }
}
    ${BrandFragmentFragmentDoc}`;

/**
 * __useGetBrandQuery__
 *
 * To run a query within a React component, call `useGetBrandQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBrandQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBrandQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBrandQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetBrandQuery, GqlGetBrandQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetBrandQuery, GqlGetBrandQueryVariables>(GetBrandDocument, baseOptions);
      }
export function useGetBrandLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetBrandQuery, GqlGetBrandQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetBrandQuery, GqlGetBrandQueryVariables>(GetBrandDocument, baseOptions);
        }
export type GetBrandQueryHookResult = ReturnType<typeof useGetBrandQuery>;
export type GetBrandLazyQueryHookResult = ReturnType<typeof useGetBrandLazyQuery>;
export type GetBrandQueryResult = ApolloReactCommon.QueryResult<GqlGetBrandQuery, GqlGetBrandQueryVariables>;
export const SuperBrandsIndexDocument = gql`
    query SuperBrandsIndex($filters: searchBrandsFilters, $pagination: paginationInput, $search: String, $sort: searchBrandsSort) {
  searchBrandsV2(
    filters: $filters
    pagination: $pagination
    search: $search
    sort: $sort
  ) {
    brands {
      ...brandFragment
      ...brandDispensaryFragment
    }
    queryInfo {
      totalCount
    }
  }
}
    ${BrandFragmentFragmentDoc}
${BrandDispensaryFragmentFragmentDoc}`;

/**
 * __useSuperBrandsIndexQuery__
 *
 * To run a query within a React component, call `useSuperBrandsIndexQuery` and pass it any options that fit your needs.
 * When your component renders, `useSuperBrandsIndexQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSuperBrandsIndexQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *      pagination: // value for 'pagination'
 *      search: // value for 'search'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useSuperBrandsIndexQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlSuperBrandsIndexQuery, GqlSuperBrandsIndexQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlSuperBrandsIndexQuery, GqlSuperBrandsIndexQueryVariables>(SuperBrandsIndexDocument, baseOptions);
      }
export function useSuperBrandsIndexLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlSuperBrandsIndexQuery, GqlSuperBrandsIndexQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlSuperBrandsIndexQuery, GqlSuperBrandsIndexQueryVariables>(SuperBrandsIndexDocument, baseOptions);
        }
export type SuperBrandsIndexQueryHookResult = ReturnType<typeof useSuperBrandsIndexQuery>;
export type SuperBrandsIndexLazyQueryHookResult = ReturnType<typeof useSuperBrandsIndexLazyQuery>;
export type SuperBrandsIndexQueryResult = ApolloReactCommon.QueryResult<GqlSuperBrandsIndexQuery, GqlSuperBrandsIndexQueryVariables>;
export const GetCannabinoidsDocument = gql`
    query GetCannabinoids {
  getCannabinoids {
    name
    id
  }
}
    `;

/**
 * __useGetCannabinoidsQuery__
 *
 * To run a query within a React component, call `useGetCannabinoidsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCannabinoidsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCannabinoidsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCannabinoidsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlGetCannabinoidsQuery, GqlGetCannabinoidsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetCannabinoidsQuery, GqlGetCannabinoidsQueryVariables>(GetCannabinoidsDocument, baseOptions);
      }
export function useGetCannabinoidsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetCannabinoidsQuery, GqlGetCannabinoidsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetCannabinoidsQuery, GqlGetCannabinoidsQueryVariables>(GetCannabinoidsDocument, baseOptions);
        }
export type GetCannabinoidsQueryHookResult = ReturnType<typeof useGetCannabinoidsQuery>;
export type GetCannabinoidsLazyQueryHookResult = ReturnType<typeof useGetCannabinoidsLazyQuery>;
export type GetCannabinoidsQueryResult = ApolloReactCommon.QueryResult<GqlGetCannabinoidsQuery, GqlGetCannabinoidsQueryVariables>;
export const CreateCouponV2Document = gql`
    mutation CreateCouponV2($input: createCouponInput!) {
  createCouponV2(coupon: $input) {
    ...couponFragment
  }
}
    ${CouponFragmentFragmentDoc}`;
export type GqlCreateCouponV2MutationFn = ApolloReactCommon.MutationFunction<GqlCreateCouponV2Mutation, GqlCreateCouponV2MutationVariables>;

/**
 * __useCreateCouponV2Mutation__
 *
 * To run a mutation, you first call `useCreateCouponV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCouponV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCouponV2Mutation, { data, loading, error }] = useCreateCouponV2Mutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCouponV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateCouponV2Mutation, GqlCreateCouponV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateCouponV2Mutation, GqlCreateCouponV2MutationVariables>(CreateCouponV2Document, baseOptions);
      }
export type CreateCouponV2MutationHookResult = ReturnType<typeof useCreateCouponV2Mutation>;
export type CreateCouponV2MutationResult = ApolloReactCommon.MutationResult<GqlCreateCouponV2Mutation>;
export type CreateCouponV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateCouponV2Mutation, GqlCreateCouponV2MutationVariables>;
export const DeleteCouponDocument = gql`
    mutation DeleteCoupon($id: String!) {
  deleteCoupon(id: $id) {
    success
  }
}
    `;
export type GqlDeleteCouponMutationFn = ApolloReactCommon.MutationFunction<GqlDeleteCouponMutation, GqlDeleteCouponMutationVariables>;

/**
 * __useDeleteCouponMutation__
 *
 * To run a mutation, you first call `useDeleteCouponMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCouponMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCouponMutation, { data, loading, error }] = useDeleteCouponMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCouponMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteCouponMutation, GqlDeleteCouponMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteCouponMutation, GqlDeleteCouponMutationVariables>(DeleteCouponDocument, baseOptions);
      }
export type DeleteCouponMutationHookResult = ReturnType<typeof useDeleteCouponMutation>;
export type DeleteCouponMutationResult = ApolloReactCommon.MutationResult<GqlDeleteCouponMutation>;
export type DeleteCouponMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteCouponMutation, GqlDeleteCouponMutationVariables>;
export const DeleteCouponV2Document = gql`
    mutation DeleteCouponV2($id: String!) {
  deleteCouponV2(id: $id) {
    success
  }
}
    `;
export type GqlDeleteCouponV2MutationFn = ApolloReactCommon.MutationFunction<GqlDeleteCouponV2Mutation, GqlDeleteCouponV2MutationVariables>;

/**
 * __useDeleteCouponV2Mutation__
 *
 * To run a mutation, you first call `useDeleteCouponV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCouponV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCouponV2Mutation, { data, loading, error }] = useDeleteCouponV2Mutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCouponV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteCouponV2Mutation, GqlDeleteCouponV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteCouponV2Mutation, GqlDeleteCouponV2MutationVariables>(DeleteCouponV2Document, baseOptions);
      }
export type DeleteCouponV2MutationHookResult = ReturnType<typeof useDeleteCouponV2Mutation>;
export type DeleteCouponV2MutationResult = ApolloReactCommon.MutationResult<GqlDeleteCouponV2Mutation>;
export type DeleteCouponV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteCouponV2Mutation, GqlDeleteCouponV2MutationVariables>;
export const UpdateCouponDocument = gql`
    mutation UpdateCoupon($input: updateCouponInput!) {
  updateCoupon(coupon: $input) {
    ...couponFragment
  }
}
    ${CouponFragmentFragmentDoc}`;
export type GqlUpdateCouponMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateCouponMutation, GqlUpdateCouponMutationVariables>;

/**
 * __useUpdateCouponMutation__
 *
 * To run a mutation, you first call `useUpdateCouponMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCouponMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCouponMutation, { data, loading, error }] = useUpdateCouponMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateCouponMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateCouponMutation, GqlUpdateCouponMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateCouponMutation, GqlUpdateCouponMutationVariables>(UpdateCouponDocument, baseOptions);
      }
export type UpdateCouponMutationHookResult = ReturnType<typeof useUpdateCouponMutation>;
export type UpdateCouponMutationResult = ApolloReactCommon.MutationResult<GqlUpdateCouponMutation>;
export type UpdateCouponMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateCouponMutation, GqlUpdateCouponMutationVariables>;
export const FilteredCouponsDocument = gql`
    query FilteredCoupons($filter: couponsFilterInput, $sort: couponsSortInput, $pagination: couponsPaginationInput) {
  filteredCoupons(filter: $filter, sort: $sort, pagination: $pagination) {
    queryInfo {
      totalCount
    }
    coupons {
      ...couponFragment
      dispensary
      reimbursed
    }
  }
}
    ${CouponFragmentFragmentDoc}`;

/**
 * __useFilteredCouponsQuery__
 *
 * To run a query within a React component, call `useFilteredCouponsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFilteredCouponsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFilteredCouponsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useFilteredCouponsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlFilteredCouponsQuery, GqlFilteredCouponsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlFilteredCouponsQuery, GqlFilteredCouponsQueryVariables>(FilteredCouponsDocument, baseOptions);
      }
export function useFilteredCouponsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlFilteredCouponsQuery, GqlFilteredCouponsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlFilteredCouponsQuery, GqlFilteredCouponsQueryVariables>(FilteredCouponsDocument, baseOptions);
        }
export type FilteredCouponsQueryHookResult = ReturnType<typeof useFilteredCouponsQuery>;
export type FilteredCouponsLazyQueryHookResult = ReturnType<typeof useFilteredCouponsLazyQuery>;
export type FilteredCouponsQueryResult = ApolloReactCommon.QueryResult<GqlFilteredCouponsQuery, GqlFilteredCouponsQueryVariables>;
export const ClearAllCurbsideArrivalsDocument = gql`
    mutation ClearAllCurbsideArrivals($dispensaryId: String!) {
  clearAllCurbsideArrivals(dispensaryId: $dispensaryId) {
    success
  }
}
    `;
export type GqlClearAllCurbsideArrivalsMutationFn = ApolloReactCommon.MutationFunction<GqlClearAllCurbsideArrivalsMutation, GqlClearAllCurbsideArrivalsMutationVariables>;

/**
 * __useClearAllCurbsideArrivalsMutation__
 *
 * To run a mutation, you first call `useClearAllCurbsideArrivalsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useClearAllCurbsideArrivalsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [clearAllCurbsideArrivalsMutation, { data, loading, error }] = useClearAllCurbsideArrivalsMutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useClearAllCurbsideArrivalsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlClearAllCurbsideArrivalsMutation, GqlClearAllCurbsideArrivalsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlClearAllCurbsideArrivalsMutation, GqlClearAllCurbsideArrivalsMutationVariables>(ClearAllCurbsideArrivalsDocument, baseOptions);
      }
export type ClearAllCurbsideArrivalsMutationHookResult = ReturnType<typeof useClearAllCurbsideArrivalsMutation>;
export type ClearAllCurbsideArrivalsMutationResult = ApolloReactCommon.MutationResult<GqlClearAllCurbsideArrivalsMutation>;
export type ClearAllCurbsideArrivalsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlClearAllCurbsideArrivalsMutation, GqlClearAllCurbsideArrivalsMutationVariables>;
export const ClearCurbsideArrivalDocument = gql`
    mutation ClearCurbsideArrival($arrivalId: String!) {
  clearCurbsideArrival(arrivalId: $arrivalId) {
    success
  }
}
    `;
export type GqlClearCurbsideArrivalMutationFn = ApolloReactCommon.MutationFunction<GqlClearCurbsideArrivalMutation, GqlClearCurbsideArrivalMutationVariables>;

/**
 * __useClearCurbsideArrivalMutation__
 *
 * To run a mutation, you first call `useClearCurbsideArrivalMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useClearCurbsideArrivalMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [clearCurbsideArrivalMutation, { data, loading, error }] = useClearCurbsideArrivalMutation({
 *   variables: {
 *      arrivalId: // value for 'arrivalId'
 *   },
 * });
 */
export function useClearCurbsideArrivalMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlClearCurbsideArrivalMutation, GqlClearCurbsideArrivalMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlClearCurbsideArrivalMutation, GqlClearCurbsideArrivalMutationVariables>(ClearCurbsideArrivalDocument, baseOptions);
      }
export type ClearCurbsideArrivalMutationHookResult = ReturnType<typeof useClearCurbsideArrivalMutation>;
export type ClearCurbsideArrivalMutationResult = ApolloReactCommon.MutationResult<GqlClearCurbsideArrivalMutation>;
export type ClearCurbsideArrivalMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlClearCurbsideArrivalMutation, GqlClearCurbsideArrivalMutationVariables>;
export const MarkCurbsideArrivalArrivedV2Document = gql`
    mutation MarkCurbsideArrivalArrivedV2($token: String!) {
  markCurbsideArrivalArrivedV2(token: $token) {
    id
  }
}
    `;
export type GqlMarkCurbsideArrivalArrivedV2MutationFn = ApolloReactCommon.MutationFunction<GqlMarkCurbsideArrivalArrivedV2Mutation, GqlMarkCurbsideArrivalArrivedV2MutationVariables>;

/**
 * __useMarkCurbsideArrivalArrivedV2Mutation__
 *
 * To run a mutation, you first call `useMarkCurbsideArrivalArrivedV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMarkCurbsideArrivalArrivedV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [markCurbsideArrivalArrivedV2Mutation, { data, loading, error }] = useMarkCurbsideArrivalArrivedV2Mutation({
 *   variables: {
 *      token: // value for 'token'
 *   },
 * });
 */
export function useMarkCurbsideArrivalArrivedV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlMarkCurbsideArrivalArrivedV2Mutation, GqlMarkCurbsideArrivalArrivedV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlMarkCurbsideArrivalArrivedV2Mutation, GqlMarkCurbsideArrivalArrivedV2MutationVariables>(MarkCurbsideArrivalArrivedV2Document, baseOptions);
      }
export type MarkCurbsideArrivalArrivedV2MutationHookResult = ReturnType<typeof useMarkCurbsideArrivalArrivedV2Mutation>;
export type MarkCurbsideArrivalArrivedV2MutationResult = ApolloReactCommon.MutationResult<GqlMarkCurbsideArrivalArrivedV2Mutation>;
export type MarkCurbsideArrivalArrivedV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlMarkCurbsideArrivalArrivedV2Mutation, GqlMarkCurbsideArrivalArrivedV2MutationVariables>;
export const UpdateCurbsideArrivalV2Document = gql`
    mutation UpdateCurbsideArrivalV2($token: String!, $arrivalInformation: String!) {
  updateCurbsideArrivalV2(token: $token, arrivalInformation: $arrivalInformation) {
    id
  }
}
    `;
export type GqlUpdateCurbsideArrivalV2MutationFn = ApolloReactCommon.MutationFunction<GqlUpdateCurbsideArrivalV2Mutation, GqlUpdateCurbsideArrivalV2MutationVariables>;

/**
 * __useUpdateCurbsideArrivalV2Mutation__
 *
 * To run a mutation, you first call `useUpdateCurbsideArrivalV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCurbsideArrivalV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCurbsideArrivalV2Mutation, { data, loading, error }] = useUpdateCurbsideArrivalV2Mutation({
 *   variables: {
 *      token: // value for 'token'
 *      arrivalInformation: // value for 'arrivalInformation'
 *   },
 * });
 */
export function useUpdateCurbsideArrivalV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateCurbsideArrivalV2Mutation, GqlUpdateCurbsideArrivalV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateCurbsideArrivalV2Mutation, GqlUpdateCurbsideArrivalV2MutationVariables>(UpdateCurbsideArrivalV2Document, baseOptions);
      }
export type UpdateCurbsideArrivalV2MutationHookResult = ReturnType<typeof useUpdateCurbsideArrivalV2Mutation>;
export type UpdateCurbsideArrivalV2MutationResult = ApolloReactCommon.MutationResult<GqlUpdateCurbsideArrivalV2Mutation>;
export type UpdateCurbsideArrivalV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateCurbsideArrivalV2Mutation, GqlUpdateCurbsideArrivalV2MutationVariables>;
export const GetCurbsideArrivalByTokenDocument = gql`
    query GetCurbsideArrivalByToken($token: String!) {
  getCurbsideArrivalByToken(token: $token) {
    id
    dispensary {
      id
      phone
      arrivalInformationInstructions
      orderTypesConfigV2 {
        curbsidePickup {
          arrivalInformationInstructions
        }
      }
    }
    arrivalInformation
    arrivedAt
    clearedAt
    createdAt
    updatedAt
  }
}
    `;

/**
 * __useGetCurbsideArrivalByTokenQuery__
 *
 * To run a query within a React component, call `useGetCurbsideArrivalByTokenQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurbsideArrivalByTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurbsideArrivalByTokenQuery({
 *   variables: {
 *      token: // value for 'token'
 *   },
 * });
 */
export function useGetCurbsideArrivalByTokenQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetCurbsideArrivalByTokenQuery, GqlGetCurbsideArrivalByTokenQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetCurbsideArrivalByTokenQuery, GqlGetCurbsideArrivalByTokenQueryVariables>(GetCurbsideArrivalByTokenDocument, baseOptions);
      }
export function useGetCurbsideArrivalByTokenLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetCurbsideArrivalByTokenQuery, GqlGetCurbsideArrivalByTokenQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetCurbsideArrivalByTokenQuery, GqlGetCurbsideArrivalByTokenQueryVariables>(GetCurbsideArrivalByTokenDocument, baseOptions);
        }
export type GetCurbsideArrivalByTokenQueryHookResult = ReturnType<typeof useGetCurbsideArrivalByTokenQuery>;
export type GetCurbsideArrivalByTokenLazyQueryHookResult = ReturnType<typeof useGetCurbsideArrivalByTokenLazyQuery>;
export type GetCurbsideArrivalByTokenQueryResult = ApolloReactCommon.QueryResult<GqlGetCurbsideArrivalByTokenQuery, GqlGetCurbsideArrivalByTokenQueryVariables>;
export const GetCurbsideArrivalsForBannerDocument = gql`
    query GetCurbsideArrivalsForBanner($dispensaryId: String!) {
  getCurbsideArrivals(dispensaryId: $dispensaryId) {
    id
  }
}
    `;

/**
 * __useGetCurbsideArrivalsForBannerQuery__
 *
 * To run a query within a React component, call `useGetCurbsideArrivalsForBannerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurbsideArrivalsForBannerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurbsideArrivalsForBannerQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useGetCurbsideArrivalsForBannerQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetCurbsideArrivalsForBannerQuery, GqlGetCurbsideArrivalsForBannerQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetCurbsideArrivalsForBannerQuery, GqlGetCurbsideArrivalsForBannerQueryVariables>(GetCurbsideArrivalsForBannerDocument, baseOptions);
      }
export function useGetCurbsideArrivalsForBannerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetCurbsideArrivalsForBannerQuery, GqlGetCurbsideArrivalsForBannerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetCurbsideArrivalsForBannerQuery, GqlGetCurbsideArrivalsForBannerQueryVariables>(GetCurbsideArrivalsForBannerDocument, baseOptions);
        }
export type GetCurbsideArrivalsForBannerQueryHookResult = ReturnType<typeof useGetCurbsideArrivalsForBannerQuery>;
export type GetCurbsideArrivalsForBannerLazyQueryHookResult = ReturnType<typeof useGetCurbsideArrivalsForBannerLazyQuery>;
export type GetCurbsideArrivalsForBannerQueryResult = ApolloReactCommon.QueryResult<GqlGetCurbsideArrivalsForBannerQuery, GqlGetCurbsideArrivalsForBannerQueryVariables>;
export const GetCurbsideArrivalsDocument = gql`
    query GetCurbsideArrivals($dispensaryId: String!) {
  getCurbsideArrivals(dispensaryId: $dispensaryId) {
    id
    order {
      id
      orderId
      customer {
        profile {
          firstName
          lastName
          phone
        }
      }
      guestCustomer {
        firstName
        lastName
        phone
      }
    }
    arrivalInformation
    arrivedAt
    clearedAt
    createdAt
    updatedAt
  }
}
    `;

/**
 * __useGetCurbsideArrivalsQuery__
 *
 * To run a query within a React component, call `useGetCurbsideArrivalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurbsideArrivalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurbsideArrivalsQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useGetCurbsideArrivalsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetCurbsideArrivalsQuery, GqlGetCurbsideArrivalsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetCurbsideArrivalsQuery, GqlGetCurbsideArrivalsQueryVariables>(GetCurbsideArrivalsDocument, baseOptions);
      }
export function useGetCurbsideArrivalsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetCurbsideArrivalsQuery, GqlGetCurbsideArrivalsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetCurbsideArrivalsQuery, GqlGetCurbsideArrivalsQueryVariables>(GetCurbsideArrivalsDocument, baseOptions);
        }
export type GetCurbsideArrivalsQueryHookResult = ReturnType<typeof useGetCurbsideArrivalsQuery>;
export type GetCurbsideArrivalsLazyQueryHookResult = ReturnType<typeof useGetCurbsideArrivalsLazyQuery>;
export type GetCurbsideArrivalsQueryResult = ApolloReactCommon.QueryResult<GqlGetCurbsideArrivalsQuery, GqlGetCurbsideArrivalsQueryVariables>;
export const UpdateCustomerSubscriptionDocument = gql`
    mutation UpdateCustomerSubscription($customerId: String!, $subscribed: Boolean!) {
  updateCustomerSubscription(customerId: $customerId, subscribed: $subscribed) {
    success
  }
}
    `;
export type GqlUpdateCustomerSubscriptionMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateCustomerSubscriptionMutation, GqlUpdateCustomerSubscriptionMutationVariables>;

/**
 * __useUpdateCustomerSubscriptionMutation__
 *
 * To run a mutation, you first call `useUpdateCustomerSubscriptionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCustomerSubscriptionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCustomerSubscriptionMutation, { data, loading, error }] = useUpdateCustomerSubscriptionMutation({
 *   variables: {
 *      customerId: // value for 'customerId'
 *      subscribed: // value for 'subscribed'
 *   },
 * });
 */
export function useUpdateCustomerSubscriptionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateCustomerSubscriptionMutation, GqlUpdateCustomerSubscriptionMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateCustomerSubscriptionMutation, GqlUpdateCustomerSubscriptionMutationVariables>(UpdateCustomerSubscriptionDocument, baseOptions);
      }
export type UpdateCustomerSubscriptionMutationHookResult = ReturnType<typeof useUpdateCustomerSubscriptionMutation>;
export type UpdateCustomerSubscriptionMutationResult = ApolloReactCommon.MutationResult<GqlUpdateCustomerSubscriptionMutation>;
export type UpdateCustomerSubscriptionMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateCustomerSubscriptionMutation, GqlUpdateCustomerSubscriptionMutationVariables>;
export const GetDevicesDocument = gql`
    query GetDevices($dispensaryId: String!) {
  getDevices(dispensaryId: $dispensaryId) {
    ...deviceFragment
  }
}
    ${DeviceFragmentFragmentDoc}`;

/**
 * __useGetDevicesQuery__
 *
 * To run a query within a React component, call `useGetDevicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDevicesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDevicesQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useGetDevicesQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetDevicesQuery, GqlGetDevicesQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetDevicesQuery, GqlGetDevicesQueryVariables>(GetDevicesDocument, baseOptions);
      }
export function useGetDevicesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetDevicesQuery, GqlGetDevicesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetDevicesQuery, GqlGetDevicesQueryVariables>(GetDevicesDocument, baseOptions);
        }
export type GetDevicesQueryHookResult = ReturnType<typeof useGetDevicesQuery>;
export type GetDevicesLazyQueryHookResult = ReturnType<typeof useGetDevicesLazyQuery>;
export type GetDevicesQueryResult = ApolloReactCommon.QueryResult<GqlGetDevicesQuery, GqlGetDevicesQueryVariables>;
export const GetKioskTerminalsDocument = gql`
    query GetKioskTerminals($dispensaryId: String!) {
  getKioskTerminals(dispensaryId: $dispensaryId) {
    id
    dispensaryId
    nickname
  }
}
    `;

/**
 * __useGetKioskTerminalsQuery__
 *
 * To run a query within a React component, call `useGetKioskTerminalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetKioskTerminalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetKioskTerminalsQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useGetKioskTerminalsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetKioskTerminalsQuery, GqlGetKioskTerminalsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetKioskTerminalsQuery, GqlGetKioskTerminalsQueryVariables>(GetKioskTerminalsDocument, baseOptions);
      }
export function useGetKioskTerminalsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetKioskTerminalsQuery, GqlGetKioskTerminalsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetKioskTerminalsQuery, GqlGetKioskTerminalsQueryVariables>(GetKioskTerminalsDocument, baseOptions);
        }
export type GetKioskTerminalsQueryHookResult = ReturnType<typeof useGetKioskTerminalsQuery>;
export type GetKioskTerminalsLazyQueryHookResult = ReturnType<typeof useGetKioskTerminalsLazyQuery>;
export type GetKioskTerminalsQueryResult = ApolloReactCommon.QueryResult<GqlGetKioskTerminalsQuery, GqlGetKioskTerminalsQueryVariables>;
export const AddSubscriptionToChainDocument = gql`
    mutation AddSubscriptionToChain($dispensaryIds: [String]!, $chargebeeCustomerId: String!) {
  addSubscriptionToChain(
    dispensaryIds: $dispensaryIds
    chargebeeCustomerId: $chargebeeCustomerId
  ) {
    message
    success
  }
}
    `;
export type GqlAddSubscriptionToChainMutationFn = ApolloReactCommon.MutationFunction<GqlAddSubscriptionToChainMutation, GqlAddSubscriptionToChainMutationVariables>;

/**
 * __useAddSubscriptionToChainMutation__
 *
 * To run a mutation, you first call `useAddSubscriptionToChainMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddSubscriptionToChainMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addSubscriptionToChainMutation, { data, loading, error }] = useAddSubscriptionToChainMutation({
 *   variables: {
 *      dispensaryIds: // value for 'dispensaryIds'
 *      chargebeeCustomerId: // value for 'chargebeeCustomerId'
 *   },
 * });
 */
export function useAddSubscriptionToChainMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlAddSubscriptionToChainMutation, GqlAddSubscriptionToChainMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlAddSubscriptionToChainMutation, GqlAddSubscriptionToChainMutationVariables>(AddSubscriptionToChainDocument, baseOptions);
      }
export type AddSubscriptionToChainMutationHookResult = ReturnType<typeof useAddSubscriptionToChainMutation>;
export type AddSubscriptionToChainMutationResult = ApolloReactCommon.MutationResult<GqlAddSubscriptionToChainMutation>;
export type AddSubscriptionToChainMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlAddSubscriptionToChainMutation, GqlAddSubscriptionToChainMutationVariables>;
export const RemoveSubscriptionFromChainDocument = gql`
    mutation RemoveSubscriptionFromChain($ids: [String]!, $chargebeeCustomerId: String!) {
  removeSubscriptionFromChain(
    ids: $ids
    chargebeeCustomerId: $chargebeeCustomerId
  ) {
    message
    success
  }
}
    `;
export type GqlRemoveSubscriptionFromChainMutationFn = ApolloReactCommon.MutationFunction<GqlRemoveSubscriptionFromChainMutation, GqlRemoveSubscriptionFromChainMutationVariables>;

/**
 * __useRemoveSubscriptionFromChainMutation__
 *
 * To run a mutation, you first call `useRemoveSubscriptionFromChainMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveSubscriptionFromChainMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeSubscriptionFromChainMutation, { data, loading, error }] = useRemoveSubscriptionFromChainMutation({
 *   variables: {
 *      ids: // value for 'ids'
 *      chargebeeCustomerId: // value for 'chargebeeCustomerId'
 *   },
 * });
 */
export function useRemoveSubscriptionFromChainMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlRemoveSubscriptionFromChainMutation, GqlRemoveSubscriptionFromChainMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlRemoveSubscriptionFromChainMutation, GqlRemoveSubscriptionFromChainMutationVariables>(RemoveSubscriptionFromChainDocument, baseOptions);
      }
export type RemoveSubscriptionFromChainMutationHookResult = ReturnType<typeof useRemoveSubscriptionFromChainMutation>;
export type RemoveSubscriptionFromChainMutationResult = ApolloReactCommon.MutationResult<GqlRemoveSubscriptionFromChainMutation>;
export type RemoveSubscriptionFromChainMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlRemoveSubscriptionFromChainMutation, GqlRemoveSubscriptionFromChainMutationVariables>;
export const GetChainBillingInfoDocument = gql`
    query GetChainBillingInfo($dispensaries: [String!]) {
  getBillingSubscriptions(dispensaries: $dispensaries) {
    dispensaryBilling {
      chain
      chargebeeCustomerId
    }
  }
}
    `;

/**
 * __useGetChainBillingInfoQuery__
 *
 * To run a query within a React component, call `useGetChainBillingInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChainBillingInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChainBillingInfoQuery({
 *   variables: {
 *      dispensaries: // value for 'dispensaries'
 *   },
 * });
 */
export function useGetChainBillingInfoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlGetChainBillingInfoQuery, GqlGetChainBillingInfoQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetChainBillingInfoQuery, GqlGetChainBillingInfoQueryVariables>(GetChainBillingInfoDocument, baseOptions);
      }
export function useGetChainBillingInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetChainBillingInfoQuery, GqlGetChainBillingInfoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetChainBillingInfoQuery, GqlGetChainBillingInfoQueryVariables>(GetChainBillingInfoDocument, baseOptions);
        }
export type GetChainBillingInfoQueryHookResult = ReturnType<typeof useGetChainBillingInfoQuery>;
export type GetChainBillingInfoLazyQueryHookResult = ReturnType<typeof useGetChainBillingInfoLazyQuery>;
export type GetChainBillingInfoQueryResult = ApolloReactCommon.QueryResult<GqlGetChainBillingInfoQuery, GqlGetChainBillingInfoQueryVariables>;
export const GetSubscriptionsForChainDocument = gql`
    query GetSubscriptionsForChain($dispensaries: [String!]) {
  getBillingSubscriptions(dispensaries: $dispensaries) {
    dispensaryBilling {
      chain
      chargebeeCustomer {
        company
      }
    }
  }
}
    `;

/**
 * __useGetSubscriptionsForChainQuery__
 *
 * To run a query within a React component, call `useGetSubscriptionsForChainQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSubscriptionsForChainQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSubscriptionsForChainQuery({
 *   variables: {
 *      dispensaries: // value for 'dispensaries'
 *   },
 * });
 */
export function useGetSubscriptionsForChainQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlGetSubscriptionsForChainQuery, GqlGetSubscriptionsForChainQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetSubscriptionsForChainQuery, GqlGetSubscriptionsForChainQueryVariables>(GetSubscriptionsForChainDocument, baseOptions);
      }
export function useGetSubscriptionsForChainLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetSubscriptionsForChainQuery, GqlGetSubscriptionsForChainQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetSubscriptionsForChainQuery, GqlGetSubscriptionsForChainQueryVariables>(GetSubscriptionsForChainDocument, baseOptions);
        }
export type GetSubscriptionsForChainQueryHookResult = ReturnType<typeof useGetSubscriptionsForChainQuery>;
export type GetSubscriptionsForChainLazyQueryHookResult = ReturnType<typeof useGetSubscriptionsForChainLazyQuery>;
export type GetSubscriptionsForChainQueryResult = ApolloReactCommon.QueryResult<GqlGetSubscriptionsForChainQuery, GqlGetSubscriptionsForChainQueryVariables>;
export const GetSubscriptionsV2Document = gql`
    query GetSubscriptionsV2($retailers: [RetailerInput]!) {
  getSubscriptionsV2(retailers: $retailers) {
    dispensaryBilling {
      chain
      chargebeeCustomer {
        id
        company
        contacts {
          email
          sendBillingEmail
        }
        locationCount
      }
      ...GetSubscriptionsV2PaymentSources
    }
    chargebeeSubscription {
      status
      trialStart
      trialEnd
      currentTermStart
      currentTermEnd
      nextBillingAt
      createdAt
      startedAt
      activatedAt
      invoices {
        id
        total
        lineItems {
          dateFrom
          dateTo
          quantity
          amount
        }
        status
        amountPaid
        amountDue
        creditsApplied
      }
      planAmount
    }
    manualPayments
    chargebeePlan {
      period
      periodUnit
    }
    retailerId
  }
}
    ${GetSubscriptionsV2PaymentSourcesFragmentDoc}`;

/**
 * __useGetSubscriptionsV2Query__
 *
 * To run a query within a React component, call `useGetSubscriptionsV2Query` and pass it any options that fit your needs.
 * When your component renders, `useGetSubscriptionsV2Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSubscriptionsV2Query({
 *   variables: {
 *      retailers: // value for 'retailers'
 *   },
 * });
 */
export function useGetSubscriptionsV2Query(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetSubscriptionsV2Query, GqlGetSubscriptionsV2QueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetSubscriptionsV2Query, GqlGetSubscriptionsV2QueryVariables>(GetSubscriptionsV2Document, baseOptions);
      }
export function useGetSubscriptionsV2LazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetSubscriptionsV2Query, GqlGetSubscriptionsV2QueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetSubscriptionsV2Query, GqlGetSubscriptionsV2QueryVariables>(GetSubscriptionsV2Document, baseOptions);
        }
export type GetSubscriptionsV2QueryHookResult = ReturnType<typeof useGetSubscriptionsV2Query>;
export type GetSubscriptionsV2LazyQueryHookResult = ReturnType<typeof useGetSubscriptionsV2LazyQuery>;
export type GetSubscriptionsV2QueryResult = ApolloReactCommon.QueryResult<GqlGetSubscriptionsV2Query, GqlGetSubscriptionsV2QueryVariables>;
export const GetSubscriptionsDocument = gql`
    query GetSubscriptions($dispensaries: [String!]) {
  getBillingSubscriptions(dispensaries: $dispensaries) {
    dispensaryBilling {
      chain
      chargebeeCustomerId
      chargebeeCustomer {
        company
        contacts {
          email
          sendBillingEmail
        }
        locationCount
      }
      paymentSources {
        card {
          brand
          last4
        }
        type
      }
    }
    dispensaryId
    chargebeeSubscriptionId
    chargebeeSubscription {
      status
      trialStart
      trialEnd
      currentTermStart
      currentTermEnd
      nextBillingAt
      createdAt
      startedAt
      activatedAt
      invoices {
        id
        total
        lineItems {
          dateFrom
          dateTo
          quantity
          amount
        }
        status
        amountPaid
        amountDue
        creditsApplied
      }
      planAmount
    }
    manualPayments
    chargebeePlan {
      period
      periodUnit
    }
  }
}
    `;

/**
 * __useGetSubscriptionsQuery__
 *
 * To run a query within a React component, call `useGetSubscriptionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSubscriptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSubscriptionsQuery({
 *   variables: {
 *      dispensaries: // value for 'dispensaries'
 *   },
 * });
 */
export function useGetSubscriptionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlGetSubscriptionsQuery, GqlGetSubscriptionsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetSubscriptionsQuery, GqlGetSubscriptionsQueryVariables>(GetSubscriptionsDocument, baseOptions);
      }
export function useGetSubscriptionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetSubscriptionsQuery, GqlGetSubscriptionsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetSubscriptionsQuery, GqlGetSubscriptionsQueryVariables>(GetSubscriptionsDocument, baseOptions);
        }
export type GetSubscriptionsQueryHookResult = ReturnType<typeof useGetSubscriptionsQuery>;
export type GetSubscriptionsLazyQueryHookResult = ReturnType<typeof useGetSubscriptionsLazyQuery>;
export type GetSubscriptionsQueryResult = ApolloReactCommon.QueryResult<GqlGetSubscriptionsQuery, GqlGetSubscriptionsQueryVariables>;
export const DispensaryOnboardingDocument = gql`
    mutation DispensaryOnboarding($input: dispensaryOnboardingInput!) {
  dispensaryOnboarding(input: $input) {
    success
  }
}
    `;
export type GqlDispensaryOnboardingMutationFn = ApolloReactCommon.MutationFunction<GqlDispensaryOnboardingMutation, GqlDispensaryOnboardingMutationVariables>;

/**
 * __useDispensaryOnboardingMutation__
 *
 * To run a mutation, you first call `useDispensaryOnboardingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDispensaryOnboardingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [dispensaryOnboardingMutation, { data, loading, error }] = useDispensaryOnboardingMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDispensaryOnboardingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDispensaryOnboardingMutation, GqlDispensaryOnboardingMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDispensaryOnboardingMutation, GqlDispensaryOnboardingMutationVariables>(DispensaryOnboardingDocument, baseOptions);
      }
export type DispensaryOnboardingMutationHookResult = ReturnType<typeof useDispensaryOnboardingMutation>;
export type DispensaryOnboardingMutationResult = ApolloReactCommon.MutationResult<GqlDispensaryOnboardingMutation>;
export type DispensaryOnboardingMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDispensaryOnboardingMutation, GqlDispensaryOnboardingMutationVariables>;
export const DispensaryUploadOnboardingAssetDocument = gql`
    mutation DispensaryUploadOnboardingAsset($data: String!, $fileName: String!) {
  dispensaryUploadOnboardingAsset(data: $data, fileName: $fileName) {
    fileIds
  }
}
    `;
export type GqlDispensaryUploadOnboardingAssetMutationFn = ApolloReactCommon.MutationFunction<GqlDispensaryUploadOnboardingAssetMutation, GqlDispensaryUploadOnboardingAssetMutationVariables>;

/**
 * __useDispensaryUploadOnboardingAssetMutation__
 *
 * To run a mutation, you first call `useDispensaryUploadOnboardingAssetMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDispensaryUploadOnboardingAssetMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [dispensaryUploadOnboardingAssetMutation, { data, loading, error }] = useDispensaryUploadOnboardingAssetMutation({
 *   variables: {
 *      data: // value for 'data'
 *      fileName: // value for 'fileName'
 *   },
 * });
 */
export function useDispensaryUploadOnboardingAssetMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDispensaryUploadOnboardingAssetMutation, GqlDispensaryUploadOnboardingAssetMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDispensaryUploadOnboardingAssetMutation, GqlDispensaryUploadOnboardingAssetMutationVariables>(DispensaryUploadOnboardingAssetDocument, baseOptions);
      }
export type DispensaryUploadOnboardingAssetMutationHookResult = ReturnType<typeof useDispensaryUploadOnboardingAssetMutation>;
export type DispensaryUploadOnboardingAssetMutationResult = ApolloReactCommon.MutationResult<GqlDispensaryUploadOnboardingAssetMutation>;
export type DispensaryUploadOnboardingAssetMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDispensaryUploadOnboardingAssetMutation, GqlDispensaryUploadOnboardingAssetMutationVariables>;
export const DispensarySearchDocument = gql`
    query DispensarySearch($dispensaryFilter: dispensariesFilterInput!) {
  filteredDispensaries(filter: $dispensaryFilter) {
    id
    name
    cName
    status
    recDispensary
    medicalDispensary
    offerPickup
    offerCurbsidePickup
    offerDriveThruPickup
    offerAnyPickupService
    offerDelivery
    listImage
    location {
      city
      county
      geometry {
        coordinates
        type
      }
      ln1
      ln2
      state
      zipcode
      country
    }
    actionEstimates {
      delivery {
        readyInMinutes
        rangeInMinutes
        deliveryTimeInMinutes
      }
      pickup {
        readyInMinutes
        rangeInMinutes
      }
    }
    durationEstimateOverrides {
      pickup {
        enabled
        lowInMinutes
        highInMinutes
      }
      delivery {
        enabled
        lowInMinutes
        highInMinutes
      }
    }
    storeSettings {
      enableAfterHoursOrderingForPickup
      enableAfterHoursOrderingForDelivery
      enableScheduledOrderingForPickup
      enableScheduledOrderingForDelivery
    }
    featureFlags {
      hideDeliveryEstimate
    }
    effectiveHours {
      deliveryHours {
        ...hourSetFragment
      }
      pickupHours {
        ...hourSetFragment
      }
    }
    deliveryHours {
      ...hourSetFragment
    }
    deliveryInfo {
      withinBounds
      fee
      minimum
      feeVaries
      minimumVaries
      feeType
      percentFee
    }
    feeTiers {
      fee
      feeType
      max
      min
      percentFee
    }
    pickupHours {
      ...hourSetFragment
    }
    specialHours {
      name
      startDate
      endDate
      hoursPerDay {
        date
        pickupHours {
          active
          start
          end
        }
        deliveryHours {
          active
          start
          end
        }
      }
    }
    distance
    maxDeliveryDistance
    timezone
    orderTypesConfig {
      pickup {
        enabled
        paymentTypes {
          alt36
          check
          creditCardAtDoor
          payOnlineChase
          payOnlineHypur
          payOnlineMerrco
          payOnlineMoneris
          creditCardByPhone
          debit
          cash
          linx
          canPay
          paytender
          aeropay
          dutchiePay
        }
      }
      curbsidePickup {
        enabled
        paymentTypes {
          alt36
          check
          creditCardAtDoor
          payOnlineChase
          payOnlineHypur
          payOnlineMerrco
          payOnlineMoneris
          creditCardByPhone
          debit
          cash
          linx
          canPay
          paytender
          aeropay
          dutchiePay
        }
      }
      driveThruPickup {
        enabled
        paymentTypes {
          alt36
          check
          creditCardAtDoor
          payOnlineChase
          payOnlineHypur
          payOnlineMerrco
          payOnlineMoneris
          creditCardByPhone
          debit
          cash
          linx
          canPay
          paytender
          aeropay
          dutchiePay
        }
      }
      delivery {
        enabled
        paymentTypes {
          alt36
          check
          creditCardAtDoor
          payOnlineChase
          payOnlineHypur
          payOnlineMerrco
          payOnlineMoneris
          creditCardByPhone
          debit
          cash
          linx
          canPay
          paytender
          aeropay
          dutchiePay
        }
      }
      kiosk {
        enabled
        paymentTypes {
          alt36
          check
          creditCardAtDoor
          payOnlineChase
          payOnlineHypur
          payOnlineMerrco
          payOnlineMoneris
          creditCardByPhone
          debit
          cash
          linx
          canPay
          paytender
          aeropay
          dutchiePay
        }
      }
      offerAnyPickupService
      offerDeliveryService
    }
    orderTypesConfigV2 {
      inStorePickup {
        enableASAPOrdering
        enableScheduledOrdering
        enableAfterHoursOrdering
      }
      curbsidePickup {
        enableASAPOrdering
        enableScheduledOrdering
        enableAfterHoursOrdering
      }
      driveThruPickup {
        enableASAPOrdering
        enableScheduledOrdering
        enableAfterHoursOrdering
      }
      delivery {
        enableASAPOrdering
        enableScheduledOrdering
        enableAfterHoursOrdering
      }
      offerAnyPickupService
      offerDeliveryService
    }
    hoursSettings {
      inStorePickup {
        ...hoursSettingsForOrderTypeFragment
      }
      curbsidePickup {
        ...hoursSettingsForOrderTypeFragment
      }
      driveThruPickup {
        ...hoursSettingsForOrderTypeFragment
      }
      delivery {
        ...hoursSettingsForOrderTypeFragment
      }
    }
    enabledOrderTypes {
      pickup
      inStorePickup
      curbsidePickup
      driveThruPickup
      delivery
      kiosk
    }
    paymentTypesAccepted {
      alt36
      check
      creditCardAtDoor
      payOnlineChase
      payOnlineHypur
      payOnlineMerrco
      payOnlineMoneris
      creditCardByPhone
      debit
      cash
      linx
      canPay
      paytender
      aeropay
      dutchiePay
    }
  }
}
    ${HourSetFragmentFragmentDoc}
${HoursSettingsForOrderTypeFragmentFragmentDoc}`;

/**
 * __useDispensarySearchQuery__
 *
 * To run a query within a React component, call `useDispensarySearchQuery` and pass it any options that fit your needs.
 * When your component renders, `useDispensarySearchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDispensarySearchQuery({
 *   variables: {
 *      dispensaryFilter: // value for 'dispensaryFilter'
 *   },
 * });
 */
export function useDispensarySearchQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlDispensarySearchQuery, GqlDispensarySearchQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlDispensarySearchQuery, GqlDispensarySearchQueryVariables>(DispensarySearchDocument, baseOptions);
      }
export function useDispensarySearchLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlDispensarySearchQuery, GqlDispensarySearchQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlDispensarySearchQuery, GqlDispensarySearchQueryVariables>(DispensarySearchDocument, baseOptions);
        }
export type DispensarySearchQueryHookResult = ReturnType<typeof useDispensarySearchQuery>;
export type DispensarySearchLazyQueryHookResult = ReturnType<typeof useDispensarySearchLazyQuery>;
export type DispensarySearchQueryResult = ApolloReactCommon.QueryResult<GqlDispensarySearchQuery, GqlDispensarySearchQueryVariables>;
export const GeolocateConsumerDocument = gql`
    query GeolocateConsumer {
  geolocate {
    ip
    hostname
    city
    region
    country
    loc
    org
    postal
    timezone
  }
}
    `;

/**
 * __useGeolocateConsumerQuery__
 *
 * To run a query within a React component, call `useGeolocateConsumerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGeolocateConsumerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGeolocateConsumerQuery({
 *   variables: {
 *   },
 * });
 */
export function useGeolocateConsumerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlGeolocateConsumerQuery, GqlGeolocateConsumerQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGeolocateConsumerQuery, GqlGeolocateConsumerQueryVariables>(GeolocateConsumerDocument, baseOptions);
      }
export function useGeolocateConsumerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGeolocateConsumerQuery, GqlGeolocateConsumerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGeolocateConsumerQuery, GqlGeolocateConsumerQueryVariables>(GeolocateConsumerDocument, baseOptions);
        }
export type GeolocateConsumerQueryHookResult = ReturnType<typeof useGeolocateConsumerQuery>;
export type GeolocateConsumerLazyQueryHookResult = ReturnType<typeof useGeolocateConsumerLazyQuery>;
export type GeolocateConsumerQueryResult = ApolloReactCommon.QueryResult<GqlGeolocateConsumerQuery, GqlGeolocateConsumerQueryVariables>;
export const GenerateHypurTokenV2Document = gql`
    mutation GenerateHypurTokenV2($code: String!, $hostname: String, $state: String!) {
  generateHypurTokenV2(code: $code, hostname: $hostname, state: $state) {
    accessToken
    embedded
  }
}
    `;
export type GqlGenerateHypurTokenV2MutationFn = ApolloReactCommon.MutationFunction<GqlGenerateHypurTokenV2Mutation, GqlGenerateHypurTokenV2MutationVariables>;

/**
 * __useGenerateHypurTokenV2Mutation__
 *
 * To run a mutation, you first call `useGenerateHypurTokenV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGenerateHypurTokenV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [generateHypurTokenV2Mutation, { data, loading, error }] = useGenerateHypurTokenV2Mutation({
 *   variables: {
 *      code: // value for 'code'
 *      hostname: // value for 'hostname'
 *      state: // value for 'state'
 *   },
 * });
 */
export function useGenerateHypurTokenV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlGenerateHypurTokenV2Mutation, GqlGenerateHypurTokenV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlGenerateHypurTokenV2Mutation, GqlGenerateHypurTokenV2MutationVariables>(GenerateHypurTokenV2Document, baseOptions);
      }
export type GenerateHypurTokenV2MutationHookResult = ReturnType<typeof useGenerateHypurTokenV2Mutation>;
export type GenerateHypurTokenV2MutationResult = ApolloReactCommon.MutationResult<GqlGenerateHypurTokenV2Mutation>;
export type GenerateHypurTokenV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlGenerateHypurTokenV2Mutation, GqlGenerateHypurTokenV2MutationVariables>;
export const CreateLibraryProductV2Document = gql`
    mutation CreateLibraryProductV2($libraryProduct: NewLibraryProduct!, $state: String!) {
  createLibraryProductV2(libraryProduct: $libraryProduct, state: $state) {
    id
  }
}
    `;
export type GqlCreateLibraryProductV2MutationFn = ApolloReactCommon.MutationFunction<GqlCreateLibraryProductV2Mutation, GqlCreateLibraryProductV2MutationVariables>;

/**
 * __useCreateLibraryProductV2Mutation__
 *
 * To run a mutation, you first call `useCreateLibraryProductV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateLibraryProductV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createLibraryProductV2Mutation, { data, loading, error }] = useCreateLibraryProductV2Mutation({
 *   variables: {
 *      libraryProduct: // value for 'libraryProduct'
 *      state: // value for 'state'
 *   },
 * });
 */
export function useCreateLibraryProductV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateLibraryProductV2Mutation, GqlCreateLibraryProductV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateLibraryProductV2Mutation, GqlCreateLibraryProductV2MutationVariables>(CreateLibraryProductV2Document, baseOptions);
      }
export type CreateLibraryProductV2MutationHookResult = ReturnType<typeof useCreateLibraryProductV2Mutation>;
export type CreateLibraryProductV2MutationResult = ApolloReactCommon.MutationResult<GqlCreateLibraryProductV2Mutation>;
export type CreateLibraryProductV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateLibraryProductV2Mutation, GqlCreateLibraryProductV2MutationVariables>;
export const CreateLibraryProductV3Document = gql`
    mutation CreateLibraryProductV3($libraryProduct: NewLibraryProductV2!, $state: String!) {
  createLibraryProductV3(libraryProduct: $libraryProduct, state: $state) {
    id
  }
}
    `;
export type GqlCreateLibraryProductV3MutationFn = ApolloReactCommon.MutationFunction<GqlCreateLibraryProductV3Mutation, GqlCreateLibraryProductV3MutationVariables>;

/**
 * __useCreateLibraryProductV3Mutation__
 *
 * To run a mutation, you first call `useCreateLibraryProductV3Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateLibraryProductV3Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createLibraryProductV3Mutation, { data, loading, error }] = useCreateLibraryProductV3Mutation({
 *   variables: {
 *      libraryProduct: // value for 'libraryProduct'
 *      state: // value for 'state'
 *   },
 * });
 */
export function useCreateLibraryProductV3Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateLibraryProductV3Mutation, GqlCreateLibraryProductV3MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateLibraryProductV3Mutation, GqlCreateLibraryProductV3MutationVariables>(CreateLibraryProductV3Document, baseOptions);
      }
export type CreateLibraryProductV3MutationHookResult = ReturnType<typeof useCreateLibraryProductV3Mutation>;
export type CreateLibraryProductV3MutationResult = ApolloReactCommon.MutationResult<GqlCreateLibraryProductV3Mutation>;
export type CreateLibraryProductV3MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateLibraryProductV3Mutation, GqlCreateLibraryProductV3MutationVariables>;
export const MatchLibraryProductsV2Document = gql`
    query MatchLibraryProductsV2($limit: Int, $name: String!, $state: String!, $category: String, $subcategory: String, $brandIds: [String], $brand: String, $scopes: [String]) {
  matchLibraryProductsV2(
    limit: $limit
    name: $name
    state: $state
    category: $category
    subcategory: $subcategory
    brandIds: $brandIds
    brand: $brand
    scopes: $scopes
  ) {
    id
    brand {
      id
      name
    }
    category
    cbdContent {
      unit
      range
    }
    image
    name
    price
    strainType
    subcategory
    thcContent {
      unit
      range
    }
  }
}
    `;

/**
 * __useMatchLibraryProductsV2Query__
 *
 * To run a query within a React component, call `useMatchLibraryProductsV2Query` and pass it any options that fit your needs.
 * When your component renders, `useMatchLibraryProductsV2Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMatchLibraryProductsV2Query({
 *   variables: {
 *      limit: // value for 'limit'
 *      name: // value for 'name'
 *      state: // value for 'state'
 *      category: // value for 'category'
 *      subcategory: // value for 'subcategory'
 *      brandIds: // value for 'brandIds'
 *      brand: // value for 'brand'
 *      scopes: // value for 'scopes'
 *   },
 * });
 */
export function useMatchLibraryProductsV2Query(baseOptions: ApolloReactHooks.QueryHookOptions<GqlMatchLibraryProductsV2Query, GqlMatchLibraryProductsV2QueryVariables>) {
        return ApolloReactHooks.useQuery<GqlMatchLibraryProductsV2Query, GqlMatchLibraryProductsV2QueryVariables>(MatchLibraryProductsV2Document, baseOptions);
      }
export function useMatchLibraryProductsV2LazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlMatchLibraryProductsV2Query, GqlMatchLibraryProductsV2QueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlMatchLibraryProductsV2Query, GqlMatchLibraryProductsV2QueryVariables>(MatchLibraryProductsV2Document, baseOptions);
        }
export type MatchLibraryProductsV2QueryHookResult = ReturnType<typeof useMatchLibraryProductsV2Query>;
export type MatchLibraryProductsV2LazyQueryHookResult = ReturnType<typeof useMatchLibraryProductsV2LazyQuery>;
export type MatchLibraryProductsV2QueryResult = ApolloReactCommon.QueryResult<GqlMatchLibraryProductsV2Query, GqlMatchLibraryProductsV2QueryVariables>;
export const MatchLibraryProductsDocument = gql`
    query MatchLibraryProducts($limit: Int, $name: String!, $state: String!, $category: String, $subcategory: String, $brandIds: [String], $brand: String, $productTemplate: Boolean) {
  matchLibraryProducts(
    limit: $limit
    name: $name
    state: $state
    category: $category
    subcategory: $subcategory
    brandIds: $brandIds
    brand: $brand
    productTemplate: $productTemplate
  ) {
    id
    brand {
      id
      name
    }
    category
    cbdContent {
      unit
      range
    }
    image
    name
    price
    strainType
    subcategory
    thcContent {
      unit
      range
    }
  }
}
    `;

/**
 * __useMatchLibraryProductsQuery__
 *
 * To run a query within a React component, call `useMatchLibraryProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMatchLibraryProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMatchLibraryProductsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      name: // value for 'name'
 *      state: // value for 'state'
 *      category: // value for 'category'
 *      subcategory: // value for 'subcategory'
 *      brandIds: // value for 'brandIds'
 *      brand: // value for 'brand'
 *      productTemplate: // value for 'productTemplate'
 *   },
 * });
 */
export function useMatchLibraryProductsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlMatchLibraryProductsQuery, GqlMatchLibraryProductsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlMatchLibraryProductsQuery, GqlMatchLibraryProductsQueryVariables>(MatchLibraryProductsDocument, baseOptions);
      }
export function useMatchLibraryProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlMatchLibraryProductsQuery, GqlMatchLibraryProductsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlMatchLibraryProductsQuery, GqlMatchLibraryProductsQueryVariables>(MatchLibraryProductsDocument, baseOptions);
        }
export type MatchLibraryProductsQueryHookResult = ReturnType<typeof useMatchLibraryProductsQuery>;
export type MatchLibraryProductsLazyQueryHookResult = ReturnType<typeof useMatchLibraryProductsLazyQuery>;
export type MatchLibraryProductsQueryResult = ApolloReactCommon.QueryResult<GqlMatchLibraryProductsQuery, GqlMatchLibraryProductsQueryVariables>;
export const AddressResidentialCheckDocument = gql`
    query AddressResidentialCheck($input: addressResidentialCheckInput!) {
  addressResidentialCheck(input: $input) {
    isValid
  }
}
    `;

/**
 * __useAddressResidentialCheckQuery__
 *
 * To run a query within a React component, call `useAddressResidentialCheckQuery` and pass it any options that fit your needs.
 * When your component renders, `useAddressResidentialCheckQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAddressResidentialCheckQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAddressResidentialCheckQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAddressResidentialCheckQuery, GqlAddressResidentialCheckQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAddressResidentialCheckQuery, GqlAddressResidentialCheckQueryVariables>(AddressResidentialCheckDocument, baseOptions);
      }
export function useAddressResidentialCheckLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAddressResidentialCheckQuery, GqlAddressResidentialCheckQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAddressResidentialCheckQuery, GqlAddressResidentialCheckQueryVariables>(AddressResidentialCheckDocument, baseOptions);
        }
export type AddressResidentialCheckQueryHookResult = ReturnType<typeof useAddressResidentialCheckQuery>;
export type AddressResidentialCheckLazyQueryHookResult = ReturnType<typeof useAddressResidentialCheckLazyQuery>;
export type AddressResidentialCheckQueryResult = ApolloReactCommon.QueryResult<GqlAddressResidentialCheckQuery, GqlAddressResidentialCheckQueryVariables>;
export const ResetPasswordV2Document = gql`
    mutation ResetPasswordV2($input: resetPasswordInput!) {
  resetPasswordV2(input: $input) {
    message
    success
  }
}
    `;
export type GqlResetPasswordV2MutationFn = ApolloReactCommon.MutationFunction<GqlResetPasswordV2Mutation, GqlResetPasswordV2MutationVariables>;

/**
 * __useResetPasswordV2Mutation__
 *
 * To run a mutation, you first call `useResetPasswordV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetPasswordV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetPasswordV2Mutation, { data, loading, error }] = useResetPasswordV2Mutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useResetPasswordV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlResetPasswordV2Mutation, GqlResetPasswordV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlResetPasswordV2Mutation, GqlResetPasswordV2MutationVariables>(ResetPasswordV2Document, baseOptions);
      }
export type ResetPasswordV2MutationHookResult = ReturnType<typeof useResetPasswordV2Mutation>;
export type ResetPasswordV2MutationResult = ApolloReactCommon.MutationResult<GqlResetPasswordV2Mutation>;
export type ResetPasswordV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlResetPasswordV2Mutation, GqlResetPasswordV2MutationVariables>;
export const SendBrandUserPasswordResetEmailDocument = gql`
    mutation SendBrandUserPasswordResetEmail($email: String!) {
  sendBrandUserPasswordResetEmail(email: $email) {
    message
    success
  }
}
    `;
export type GqlSendBrandUserPasswordResetEmailMutationFn = ApolloReactCommon.MutationFunction<GqlSendBrandUserPasswordResetEmailMutation, GqlSendBrandUserPasswordResetEmailMutationVariables>;

/**
 * __useSendBrandUserPasswordResetEmailMutation__
 *
 * To run a mutation, you first call `useSendBrandUserPasswordResetEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendBrandUserPasswordResetEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendBrandUserPasswordResetEmailMutation, { data, loading, error }] = useSendBrandUserPasswordResetEmailMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useSendBrandUserPasswordResetEmailMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSendBrandUserPasswordResetEmailMutation, GqlSendBrandUserPasswordResetEmailMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSendBrandUserPasswordResetEmailMutation, GqlSendBrandUserPasswordResetEmailMutationVariables>(SendBrandUserPasswordResetEmailDocument, baseOptions);
      }
export type SendBrandUserPasswordResetEmailMutationHookResult = ReturnType<typeof useSendBrandUserPasswordResetEmailMutation>;
export type SendBrandUserPasswordResetEmailMutationResult = ApolloReactCommon.MutationResult<GqlSendBrandUserPasswordResetEmailMutation>;
export type SendBrandUserPasswordResetEmailMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSendBrandUserPasswordResetEmailMutation, GqlSendBrandUserPasswordResetEmailMutationVariables>;
export const SendPasswordResetEmailV2Document = gql`
    mutation SendPasswordResetEmailV2($email: String!) {
  sendPasswordResetEmailV2(email: $email) {
    message
    success
  }
}
    `;
export type GqlSendPasswordResetEmailV2MutationFn = ApolloReactCommon.MutationFunction<GqlSendPasswordResetEmailV2Mutation, GqlSendPasswordResetEmailV2MutationVariables>;

/**
 * __useSendPasswordResetEmailV2Mutation__
 *
 * To run a mutation, you first call `useSendPasswordResetEmailV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendPasswordResetEmailV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendPasswordResetEmailV2Mutation, { data, loading, error }] = useSendPasswordResetEmailV2Mutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useSendPasswordResetEmailV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSendPasswordResetEmailV2Mutation, GqlSendPasswordResetEmailV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSendPasswordResetEmailV2Mutation, GqlSendPasswordResetEmailV2MutationVariables>(SendPasswordResetEmailV2Document, baseOptions);
      }
export type SendPasswordResetEmailV2MutationHookResult = ReturnType<typeof useSendPasswordResetEmailV2Mutation>;
export type SendPasswordResetEmailV2MutationResult = ApolloReactCommon.MutationResult<GqlSendPasswordResetEmailV2Mutation>;
export type SendPasswordResetEmailV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSendPasswordResetEmailV2Mutation, GqlSendPasswordResetEmailV2MutationVariables>;
export const SetPasswordV2Document = gql`
    mutation SetPasswordV2($input: setPasswordInput!) {
  setPasswordV2(input: $input) {
    message
    success
  }
}
    `;
export type GqlSetPasswordV2MutationFn = ApolloReactCommon.MutationFunction<GqlSetPasswordV2Mutation, GqlSetPasswordV2MutationVariables>;

/**
 * __useSetPasswordV2Mutation__
 *
 * To run a mutation, you first call `useSetPasswordV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetPasswordV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setPasswordV2Mutation, { data, loading, error }] = useSetPasswordV2Mutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSetPasswordV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSetPasswordV2Mutation, GqlSetPasswordV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSetPasswordV2Mutation, GqlSetPasswordV2MutationVariables>(SetPasswordV2Document, baseOptions);
      }
export type SetPasswordV2MutationHookResult = ReturnType<typeof useSetPasswordV2Mutation>;
export type SetPasswordV2MutationResult = ApolloReactCommon.MutationResult<GqlSetPasswordV2Mutation>;
export type SetPasswordV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSetPasswordV2Mutation, GqlSetPasswordV2MutationVariables>;
export const UpdatePasswordV2Document = gql`
    mutation UpdatePasswordV2($oldPassword: String!, $newPassword: String!) {
  updatePasswordV2(oldPassword: $oldPassword, newPassword: $newPassword) {
    accessToken
  }
}
    `;
export type GqlUpdatePasswordV2MutationFn = ApolloReactCommon.MutationFunction<GqlUpdatePasswordV2Mutation, GqlUpdatePasswordV2MutationVariables>;

/**
 * __useUpdatePasswordV2Mutation__
 *
 * To run a mutation, you first call `useUpdatePasswordV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePasswordV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePasswordV2Mutation, { data, loading, error }] = useUpdatePasswordV2Mutation({
 *   variables: {
 *      oldPassword: // value for 'oldPassword'
 *      newPassword: // value for 'newPassword'
 *   },
 * });
 */
export function useUpdatePasswordV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdatePasswordV2Mutation, GqlUpdatePasswordV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdatePasswordV2Mutation, GqlUpdatePasswordV2MutationVariables>(UpdatePasswordV2Document, baseOptions);
      }
export type UpdatePasswordV2MutationHookResult = ReturnType<typeof useUpdatePasswordV2Mutation>;
export type UpdatePasswordV2MutationResult = ApolloReactCommon.MutationResult<GqlUpdatePasswordV2Mutation>;
export type UpdatePasswordV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdatePasswordV2Mutation, GqlUpdatePasswordV2MutationVariables>;
export const GetPaymentsCheckoutCredentialsDocument = gql`
    query GetPaymentsCheckoutCredentials($adapter: String!, $dispensaryId: String!) {
  getPaymentsCheckoutCredentials(adapter: $adapter, dispensaryId: $dispensaryId) {
    ... on ChaseHostedProfileCredentials {
      uID
    }
    ... on MonerisHTProfileCredentials {
      profileId
    }
  }
}
    `;

/**
 * __useGetPaymentsCheckoutCredentialsQuery__
 *
 * To run a query within a React component, call `useGetPaymentsCheckoutCredentialsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPaymentsCheckoutCredentialsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPaymentsCheckoutCredentialsQuery({
 *   variables: {
 *      adapter: // value for 'adapter'
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useGetPaymentsCheckoutCredentialsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetPaymentsCheckoutCredentialsQuery, GqlGetPaymentsCheckoutCredentialsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetPaymentsCheckoutCredentialsQuery, GqlGetPaymentsCheckoutCredentialsQueryVariables>(GetPaymentsCheckoutCredentialsDocument, baseOptions);
      }
export function useGetPaymentsCheckoutCredentialsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetPaymentsCheckoutCredentialsQuery, GqlGetPaymentsCheckoutCredentialsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetPaymentsCheckoutCredentialsQuery, GqlGetPaymentsCheckoutCredentialsQueryVariables>(GetPaymentsCheckoutCredentialsDocument, baseOptions);
        }
export type GetPaymentsCheckoutCredentialsQueryHookResult = ReturnType<typeof useGetPaymentsCheckoutCredentialsQuery>;
export type GetPaymentsCheckoutCredentialsLazyQueryHookResult = ReturnType<typeof useGetPaymentsCheckoutCredentialsLazyQuery>;
export type GetPaymentsCheckoutCredentialsQueryResult = ApolloReactCommon.QueryResult<GqlGetPaymentsCheckoutCredentialsQuery, GqlGetPaymentsCheckoutCredentialsQueryVariables>;
export const GetMonerisTokenizationProfileDocument = gql`
    query GetMonerisTokenizationProfile($dispensaryId: String!) {
  getMonerisTokenizationProfile(dispensaryId: $dispensaryId) {
    profileId
  }
}
    `;

/**
 * __useGetMonerisTokenizationProfileQuery__
 *
 * To run a query within a React component, call `useGetMonerisTokenizationProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMonerisTokenizationProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMonerisTokenizationProfileQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useGetMonerisTokenizationProfileQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetMonerisTokenizationProfileQuery, GqlGetMonerisTokenizationProfileQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetMonerisTokenizationProfileQuery, GqlGetMonerisTokenizationProfileQueryVariables>(GetMonerisTokenizationProfileDocument, baseOptions);
      }
export function useGetMonerisTokenizationProfileLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetMonerisTokenizationProfileQuery, GqlGetMonerisTokenizationProfileQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetMonerisTokenizationProfileQuery, GqlGetMonerisTokenizationProfileQueryVariables>(GetMonerisTokenizationProfileDocument, baseOptions);
        }
export type GetMonerisTokenizationProfileQueryHookResult = ReturnType<typeof useGetMonerisTokenizationProfileQuery>;
export type GetMonerisTokenizationProfileLazyQueryHookResult = ReturnType<typeof useGetMonerisTokenizationProfileLazyQuery>;
export type GetMonerisTokenizationProfileQueryResult = ApolloReactCommon.QueryResult<GqlGetMonerisTokenizationProfileQuery, GqlGetMonerisTokenizationProfileQueryVariables>;
export const FilteredProductsDocument = gql`
    query FilteredProducts($productsFilter: productsFilterInput!, $useCache: Boolean, $page: Int, $perPage: Int, $includeEnterpriseSpecials: Boolean = false, $includeCannabinoids: Boolean = true) {
  filteredProducts(
    filter: $productsFilter
    useCache: $useCache
    page: $page
    perPage: $perPage
    includeEnterpriseSpecials: $includeEnterpriseSpecials
  ) {
    products {
      ...consumerBaseProductFragment
      brand {
        id
        _id
        description
        imageUrl
        name
      }
      popularSortKey
      cannabinoidsV2 @include(if: $includeCannabinoids) {
        value
        unit
        cannabinoid {
          name
        }
      }
    }
    queryInfo {
      totalCount
      totalPages
    }
  }
}
    ${ConsumerBaseProductFragmentFragmentDoc}`;

/**
 * __useFilteredProductsQuery__
 *
 * To run a query within a React component, call `useFilteredProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFilteredProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFilteredProductsQuery({
 *   variables: {
 *      productsFilter: // value for 'productsFilter'
 *      useCache: // value for 'useCache'
 *      page: // value for 'page'
 *      perPage: // value for 'perPage'
 *      includeEnterpriseSpecials: // value for 'includeEnterpriseSpecials'
 *      includeCannabinoids: // value for 'includeCannabinoids'
 *   },
 * });
 */
export function useFilteredProductsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlFilteredProductsQuery, GqlFilteredProductsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlFilteredProductsQuery, GqlFilteredProductsQueryVariables>(FilteredProductsDocument, baseOptions);
      }
export function useFilteredProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlFilteredProductsQuery, GqlFilteredProductsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlFilteredProductsQuery, GqlFilteredProductsQueryVariables>(FilteredProductsDocument, baseOptions);
        }
export type FilteredProductsQueryHookResult = ReturnType<typeof useFilteredProductsQuery>;
export type FilteredProductsLazyQueryHookResult = ReturnType<typeof useFilteredProductsLazyQuery>;
export type FilteredProductsQueryResult = ApolloReactCommon.QueryResult<GqlFilteredProductsQuery, GqlFilteredProductsQueryVariables>;
export const IndividualFilteredProductDocument = gql`
    query IndividualFilteredProduct($productsFilter: productsFilterInput!, $useCache: Boolean, $includeTerpenes: Boolean! = false, $includeEnterpriseSpecials: Boolean = false, $includeCannabinoids: Boolean = true) {
  filteredProducts(
    filter: $productsFilter
    useCache: $useCache
    includeEnterpriseSpecials: $includeEnterpriseSpecials
  ) {
    products {
      ...consumerBaseProductFragment
      brand {
        id
        _id
        description
        imageUrl
        name
      }
      terpenes @include(if: $includeTerpenes) {
        id
        libraryTerpene {
          aromas
          description
          effects
          name
        }
        terpeneId
        unit
        unitSymbol
        value
      }
      cannabinoidsV2 @include(if: $includeCannabinoids) {
        value
        unit
        cannabinoid {
          name
          description
        }
      }
      effects
      description
      descriptionHtml
    }
  }
}
    ${ConsumerBaseProductFragmentFragmentDoc}`;

/**
 * __useIndividualFilteredProductQuery__
 *
 * To run a query within a React component, call `useIndividualFilteredProductQuery` and pass it any options that fit your needs.
 * When your component renders, `useIndividualFilteredProductQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIndividualFilteredProductQuery({
 *   variables: {
 *      productsFilter: // value for 'productsFilter'
 *      useCache: // value for 'useCache'
 *      includeTerpenes: // value for 'includeTerpenes'
 *      includeEnterpriseSpecials: // value for 'includeEnterpriseSpecials'
 *      includeCannabinoids: // value for 'includeCannabinoids'
 *   },
 * });
 */
export function useIndividualFilteredProductQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlIndividualFilteredProductQuery, GqlIndividualFilteredProductQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlIndividualFilteredProductQuery, GqlIndividualFilteredProductQueryVariables>(IndividualFilteredProductDocument, baseOptions);
      }
export function useIndividualFilteredProductLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlIndividualFilteredProductQuery, GqlIndividualFilteredProductQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlIndividualFilteredProductQuery, GqlIndividualFilteredProductQueryVariables>(IndividualFilteredProductDocument, baseOptions);
        }
export type IndividualFilteredProductQueryHookResult = ReturnType<typeof useIndividualFilteredProductQuery>;
export type IndividualFilteredProductLazyQueryHookResult = ReturnType<typeof useIndividualFilteredProductLazyQuery>;
export type IndividualFilteredProductQueryResult = ApolloReactCommon.QueryResult<GqlIndividualFilteredProductQuery, GqlIndividualFilteredProductQueryVariables>;
export const CreateAlpineUserV2Document = gql`
    mutation CreateAlpineUserV2($firstName: String, $lastName: String, $address: String, $email: String, $program: String!, $dispensaryId: String!, $favoriteStore: String!, $phoneNumber: String!, $acceptedTerms: Boolean!) {
  createAlpineUserV2(
    firstName: $firstName
    lastName: $lastName
    address: $address
    email: $email
    program: $program
    dispensaryId: $dispensaryId
    favoriteStore: $favoriteStore
    phoneNumber: $phoneNumber
    acceptedTerms: $acceptedTerms
  ) {
    success
    wallet {
      balance
      rewardBrand
      rewards {
        id
        copy
        available
        operator
        cost
        value
        rewardType
      }
      userHasWallet
      auth {
        pinConfirmed
        incorrectPinProvided
        authTextMessageSent
      }
    }
  }
}
    `;
export type GqlCreateAlpineUserV2MutationFn = ApolloReactCommon.MutationFunction<GqlCreateAlpineUserV2Mutation, GqlCreateAlpineUserV2MutationVariables>;

/**
 * __useCreateAlpineUserV2Mutation__
 *
 * To run a mutation, you first call `useCreateAlpineUserV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAlpineUserV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAlpineUserV2Mutation, { data, loading, error }] = useCreateAlpineUserV2Mutation({
 *   variables: {
 *      firstName: // value for 'firstName'
 *      lastName: // value for 'lastName'
 *      address: // value for 'address'
 *      email: // value for 'email'
 *      program: // value for 'program'
 *      dispensaryId: // value for 'dispensaryId'
 *      favoriteStore: // value for 'favoriteStore'
 *      phoneNumber: // value for 'phoneNumber'
 *      acceptedTerms: // value for 'acceptedTerms'
 *   },
 * });
 */
export function useCreateAlpineUserV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateAlpineUserV2Mutation, GqlCreateAlpineUserV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateAlpineUserV2Mutation, GqlCreateAlpineUserV2MutationVariables>(CreateAlpineUserV2Document, baseOptions);
      }
export type CreateAlpineUserV2MutationHookResult = ReturnType<typeof useCreateAlpineUserV2Mutation>;
export type CreateAlpineUserV2MutationResult = ApolloReactCommon.MutationResult<GqlCreateAlpineUserV2Mutation>;
export type CreateAlpineUserV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateAlpineUserV2Mutation, GqlCreateAlpineUserV2MutationVariables>;
export const CreateAlpineUserDocument = gql`
    mutation CreateAlpineUser($firstName: String, $lastName: String, $address: String, $email: String, $program: String!, $dispensaryId: String!, $favoriteStore: String!, $phoneNumber: String!, $acceptedTerms: Boolean!) {
  createAlpineUser(
    firstName: $firstName
    lastName: $lastName
    address: $address
    email: $email
    program: $program
    dispensaryId: $dispensaryId
    favoriteStore: $favoriteStore
    phoneNumber: $phoneNumber
    acceptedTerms: $acceptedTerms
  ) {
    success
    wallet {
      balance
      rewardBrand
      rewards {
        id
        copy
        available
        operator
        cost
        value
        rewardType
      }
      userHasWallet
      auth {
        pinConfirmed
        incorrectPinProvided
        authTextMessageSent
      }
    }
  }
}
    `;
export type GqlCreateAlpineUserMutationFn = ApolloReactCommon.MutationFunction<GqlCreateAlpineUserMutation, GqlCreateAlpineUserMutationVariables>;

/**
 * __useCreateAlpineUserMutation__
 *
 * To run a mutation, you first call `useCreateAlpineUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAlpineUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAlpineUserMutation, { data, loading, error }] = useCreateAlpineUserMutation({
 *   variables: {
 *      firstName: // value for 'firstName'
 *      lastName: // value for 'lastName'
 *      address: // value for 'address'
 *      email: // value for 'email'
 *      program: // value for 'program'
 *      dispensaryId: // value for 'dispensaryId'
 *      favoriteStore: // value for 'favoriteStore'
 *      phoneNumber: // value for 'phoneNumber'
 *      acceptedTerms: // value for 'acceptedTerms'
 *   },
 * });
 */
export function useCreateAlpineUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateAlpineUserMutation, GqlCreateAlpineUserMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateAlpineUserMutation, GqlCreateAlpineUserMutationVariables>(CreateAlpineUserDocument, baseOptions);
      }
export type CreateAlpineUserMutationHookResult = ReturnType<typeof useCreateAlpineUserMutation>;
export type CreateAlpineUserMutationResult = ApolloReactCommon.MutationResult<GqlCreateAlpineUserMutation>;
export type CreateAlpineUserMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateAlpineUserMutation, GqlCreateAlpineUserMutationVariables>;
export const GetRewardsV2Document = gql`
    query GetRewardsV2($phoneNumber: String!, $dispensaryId: String!, $dob: String, $pin: String) {
  getRewardsV2(
    phoneNumber: $phoneNumber
    dispensaryId: $dispensaryId
    dob: $dob
    pin: $pin
  ) {
    balance
    rewards {
      id
      copy
      available
      operator
      cost
      value
      rewardType
    }
    rewardBrand
    userHasWallet
    auth {
      pinConfirmed
      incorrectPinProvided
      authTextMessageSent
    }
  }
}
    `;

/**
 * __useGetRewardsV2Query__
 *
 * To run a query within a React component, call `useGetRewardsV2Query` and pass it any options that fit your needs.
 * When your component renders, `useGetRewardsV2Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRewardsV2Query({
 *   variables: {
 *      phoneNumber: // value for 'phoneNumber'
 *      dispensaryId: // value for 'dispensaryId'
 *      dob: // value for 'dob'
 *      pin: // value for 'pin'
 *   },
 * });
 */
export function useGetRewardsV2Query(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetRewardsV2Query, GqlGetRewardsV2QueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetRewardsV2Query, GqlGetRewardsV2QueryVariables>(GetRewardsV2Document, baseOptions);
      }
export function useGetRewardsV2LazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetRewardsV2Query, GqlGetRewardsV2QueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetRewardsV2Query, GqlGetRewardsV2QueryVariables>(GetRewardsV2Document, baseOptions);
        }
export type GetRewardsV2QueryHookResult = ReturnType<typeof useGetRewardsV2Query>;
export type GetRewardsV2LazyQueryHookResult = ReturnType<typeof useGetRewardsV2LazyQuery>;
export type GetRewardsV2QueryResult = ApolloReactCommon.QueryResult<GqlGetRewardsV2Query, GqlGetRewardsV2QueryVariables>;
export const BulkEndSpecialsV2Document = gql`
    mutation BulkEndSpecialsV2($input: endSpecialsInput!) {
  bulkEndSpecialsV2(input: $input) {
    message
    success
  }
}
    `;
export type GqlBulkEndSpecialsV2MutationFn = ApolloReactCommon.MutationFunction<GqlBulkEndSpecialsV2Mutation, GqlBulkEndSpecialsV2MutationVariables>;

/**
 * __useBulkEndSpecialsV2Mutation__
 *
 * To run a mutation, you first call `useBulkEndSpecialsV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBulkEndSpecialsV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [bulkEndSpecialsV2Mutation, { data, loading, error }] = useBulkEndSpecialsV2Mutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBulkEndSpecialsV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlBulkEndSpecialsV2Mutation, GqlBulkEndSpecialsV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlBulkEndSpecialsV2Mutation, GqlBulkEndSpecialsV2MutationVariables>(BulkEndSpecialsV2Document, baseOptions);
      }
export type BulkEndSpecialsV2MutationHookResult = ReturnType<typeof useBulkEndSpecialsV2Mutation>;
export type BulkEndSpecialsV2MutationResult = ApolloReactCommon.MutationResult<GqlBulkEndSpecialsV2Mutation>;
export type BulkEndSpecialsV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlBulkEndSpecialsV2Mutation, GqlBulkEndSpecialsV2MutationVariables>;
export const BulkEndSpecialsDocument = gql`
    mutation BulkEndSpecials($input: endSpecialsInput!) {
  bulkEndSpecials(input: $input) {
    message
    success
  }
}
    `;
export type GqlBulkEndSpecialsMutationFn = ApolloReactCommon.MutationFunction<GqlBulkEndSpecialsMutation, GqlBulkEndSpecialsMutationVariables>;

/**
 * __useBulkEndSpecialsMutation__
 *
 * To run a mutation, you first call `useBulkEndSpecialsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBulkEndSpecialsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [bulkEndSpecialsMutation, { data, loading, error }] = useBulkEndSpecialsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBulkEndSpecialsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlBulkEndSpecialsMutation, GqlBulkEndSpecialsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlBulkEndSpecialsMutation, GqlBulkEndSpecialsMutationVariables>(BulkEndSpecialsDocument, baseOptions);
      }
export type BulkEndSpecialsMutationHookResult = ReturnType<typeof useBulkEndSpecialsMutation>;
export type BulkEndSpecialsMutationResult = ApolloReactCommon.MutationResult<GqlBulkEndSpecialsMutation>;
export type BulkEndSpecialsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlBulkEndSpecialsMutation, GqlBulkEndSpecialsMutationVariables>;
export const CreateEnterpriseSpecialV2Document = gql`
    mutation CreateEnterpriseSpecialV2($input: EnterpriseSpecialInputV2!) {
  createEnterpriseSpecialV2(input: $input) {
    message
    success
  }
}
    `;
export type GqlCreateEnterpriseSpecialV2MutationFn = ApolloReactCommon.MutationFunction<GqlCreateEnterpriseSpecialV2Mutation, GqlCreateEnterpriseSpecialV2MutationVariables>;

/**
 * __useCreateEnterpriseSpecialV2Mutation__
 *
 * To run a mutation, you first call `useCreateEnterpriseSpecialV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateEnterpriseSpecialV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createEnterpriseSpecialV2Mutation, { data, loading, error }] = useCreateEnterpriseSpecialV2Mutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateEnterpriseSpecialV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateEnterpriseSpecialV2Mutation, GqlCreateEnterpriseSpecialV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateEnterpriseSpecialV2Mutation, GqlCreateEnterpriseSpecialV2MutationVariables>(CreateEnterpriseSpecialV2Document, baseOptions);
      }
export type CreateEnterpriseSpecialV2MutationHookResult = ReturnType<typeof useCreateEnterpriseSpecialV2Mutation>;
export type CreateEnterpriseSpecialV2MutationResult = ApolloReactCommon.MutationResult<GqlCreateEnterpriseSpecialV2Mutation>;
export type CreateEnterpriseSpecialV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateEnterpriseSpecialV2Mutation, GqlCreateEnterpriseSpecialV2MutationVariables>;
export const CreateSpecialV3Document = gql`
    mutation CreateSpecialV3($input: SpecialsInputV3!) {
  createSpecialV3(input: $input) {
    _id
  }
}
    `;
export type GqlCreateSpecialV3MutationFn = ApolloReactCommon.MutationFunction<GqlCreateSpecialV3Mutation, GqlCreateSpecialV3MutationVariables>;

/**
 * __useCreateSpecialV3Mutation__
 *
 * To run a mutation, you first call `useCreateSpecialV3Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSpecialV3Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSpecialV3Mutation, { data, loading, error }] = useCreateSpecialV3Mutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateSpecialV3Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateSpecialV3Mutation, GqlCreateSpecialV3MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateSpecialV3Mutation, GqlCreateSpecialV3MutationVariables>(CreateSpecialV3Document, baseOptions);
      }
export type CreateSpecialV3MutationHookResult = ReturnType<typeof useCreateSpecialV3Mutation>;
export type CreateSpecialV3MutationResult = ApolloReactCommon.MutationResult<GqlCreateSpecialV3Mutation>;
export type CreateSpecialV3MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateSpecialV3Mutation, GqlCreateSpecialV3MutationVariables>;
export const DeleteEnterpriseSpecialDocument = gql`
    mutation DeleteEnterpriseSpecial($enterpriseId: String!, $id: String!) {
  deleteEnterpriseSpecial(enterprise_id: $enterpriseId, id: $id) {
    message
    success
  }
}
    `;
export type GqlDeleteEnterpriseSpecialMutationFn = ApolloReactCommon.MutationFunction<GqlDeleteEnterpriseSpecialMutation, GqlDeleteEnterpriseSpecialMutationVariables>;

/**
 * __useDeleteEnterpriseSpecialMutation__
 *
 * To run a mutation, you first call `useDeleteEnterpriseSpecialMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteEnterpriseSpecialMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteEnterpriseSpecialMutation, { data, loading, error }] = useDeleteEnterpriseSpecialMutation({
 *   variables: {
 *      enterpriseId: // value for 'enterpriseId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteEnterpriseSpecialMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteEnterpriseSpecialMutation, GqlDeleteEnterpriseSpecialMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteEnterpriseSpecialMutation, GqlDeleteEnterpriseSpecialMutationVariables>(DeleteEnterpriseSpecialDocument, baseOptions);
      }
export type DeleteEnterpriseSpecialMutationHookResult = ReturnType<typeof useDeleteEnterpriseSpecialMutation>;
export type DeleteEnterpriseSpecialMutationResult = ApolloReactCommon.MutationResult<GqlDeleteEnterpriseSpecialMutation>;
export type DeleteEnterpriseSpecialMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteEnterpriseSpecialMutation, GqlDeleteEnterpriseSpecialMutationVariables>;
export const DeleteSpecialV2Document = gql`
    mutation DeleteSpecialV2($id: String!) {
  deleteSpecialV2(id: $id) {
    _id
  }
}
    `;
export type GqlDeleteSpecialV2MutationFn = ApolloReactCommon.MutationFunction<GqlDeleteSpecialV2Mutation, GqlDeleteSpecialV2MutationVariables>;

/**
 * __useDeleteSpecialV2Mutation__
 *
 * To run a mutation, you first call `useDeleteSpecialV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSpecialV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSpecialV2Mutation, { data, loading, error }] = useDeleteSpecialV2Mutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteSpecialV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteSpecialV2Mutation, GqlDeleteSpecialV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteSpecialV2Mutation, GqlDeleteSpecialV2MutationVariables>(DeleteSpecialV2Document, baseOptions);
      }
export type DeleteSpecialV2MutationHookResult = ReturnType<typeof useDeleteSpecialV2Mutation>;
export type DeleteSpecialV2MutationResult = ApolloReactCommon.MutationResult<GqlDeleteSpecialV2Mutation>;
export type DeleteSpecialV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteSpecialV2Mutation, GqlDeleteSpecialV2MutationVariables>;
export const EndEnterpriseSpecialDocument = gql`
    mutation EndEnterpriseSpecial($enterpriseId: String!, $id: String!) {
  endEnterpriseSpecial(enterprise_id: $enterpriseId, id: $id) {
    success
    message
  }
}
    `;
export type GqlEndEnterpriseSpecialMutationFn = ApolloReactCommon.MutationFunction<GqlEndEnterpriseSpecialMutation, GqlEndEnterpriseSpecialMutationVariables>;

/**
 * __useEndEnterpriseSpecialMutation__
 *
 * To run a mutation, you first call `useEndEnterpriseSpecialMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEndEnterpriseSpecialMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [endEnterpriseSpecialMutation, { data, loading, error }] = useEndEnterpriseSpecialMutation({
 *   variables: {
 *      enterpriseId: // value for 'enterpriseId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useEndEnterpriseSpecialMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlEndEnterpriseSpecialMutation, GqlEndEnterpriseSpecialMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlEndEnterpriseSpecialMutation, GqlEndEnterpriseSpecialMutationVariables>(EndEnterpriseSpecialDocument, baseOptions);
      }
export type EndEnterpriseSpecialMutationHookResult = ReturnType<typeof useEndEnterpriseSpecialMutation>;
export type EndEnterpriseSpecialMutationResult = ApolloReactCommon.MutationResult<GqlEndEnterpriseSpecialMutation>;
export type EndEnterpriseSpecialMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlEndEnterpriseSpecialMutation, GqlEndEnterpriseSpecialMutationVariables>;
export const EndSpecialV2Document = gql`
    mutation EndSpecialV2($id: String!) {
  endSpecialV2(id: $id) {
    _id
  }
}
    `;
export type GqlEndSpecialV2MutationFn = ApolloReactCommon.MutationFunction<GqlEndSpecialV2Mutation, GqlEndSpecialV2MutationVariables>;

/**
 * __useEndSpecialV2Mutation__
 *
 * To run a mutation, you first call `useEndSpecialV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEndSpecialV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [endSpecialV2Mutation, { data, loading, error }] = useEndSpecialV2Mutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useEndSpecialV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlEndSpecialV2Mutation, GqlEndSpecialV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlEndSpecialV2Mutation, GqlEndSpecialV2MutationVariables>(EndSpecialV2Document, baseOptions);
      }
export type EndSpecialV2MutationHookResult = ReturnType<typeof useEndSpecialV2Mutation>;
export type EndSpecialV2MutationResult = ApolloReactCommon.MutationResult<GqlEndSpecialV2Mutation>;
export type EndSpecialV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlEndSpecialV2Mutation, GqlEndSpecialV2MutationVariables>;
export const IncrementSpecialClicksDocument = gql`
    mutation IncrementSpecialClicks($input: incrementClicksInput!) {
  incrementClicks(special: $input) {
    message
    success
  }
}
    `;
export type GqlIncrementSpecialClicksMutationFn = ApolloReactCommon.MutationFunction<GqlIncrementSpecialClicksMutation, GqlIncrementSpecialClicksMutationVariables>;

/**
 * __useIncrementSpecialClicksMutation__
 *
 * To run a mutation, you first call `useIncrementSpecialClicksMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useIncrementSpecialClicksMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [incrementSpecialClicksMutation, { data, loading, error }] = useIncrementSpecialClicksMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useIncrementSpecialClicksMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlIncrementSpecialClicksMutation, GqlIncrementSpecialClicksMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlIncrementSpecialClicksMutation, GqlIncrementSpecialClicksMutationVariables>(IncrementSpecialClicksDocument, baseOptions);
      }
export type IncrementSpecialClicksMutationHookResult = ReturnType<typeof useIncrementSpecialClicksMutation>;
export type IncrementSpecialClicksMutationResult = ApolloReactCommon.MutationResult<GqlIncrementSpecialClicksMutation>;
export type IncrementSpecialClicksMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlIncrementSpecialClicksMutation, GqlIncrementSpecialClicksMutationVariables>;
export const UpdateEnterpriseSpecialV2Document = gql`
    mutation UpdateEnterpriseSpecialV2($id: String!, $input: EnterpriseSpecialInputV2!) {
  updateEnterpriseSpecialV2(id: $id, input: $input) {
    message
    success
  }
}
    `;
export type GqlUpdateEnterpriseSpecialV2MutationFn = ApolloReactCommon.MutationFunction<GqlUpdateEnterpriseSpecialV2Mutation, GqlUpdateEnterpriseSpecialV2MutationVariables>;

/**
 * __useUpdateEnterpriseSpecialV2Mutation__
 *
 * To run a mutation, you first call `useUpdateEnterpriseSpecialV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateEnterpriseSpecialV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateEnterpriseSpecialV2Mutation, { data, loading, error }] = useUpdateEnterpriseSpecialV2Mutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateEnterpriseSpecialV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateEnterpriseSpecialV2Mutation, GqlUpdateEnterpriseSpecialV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateEnterpriseSpecialV2Mutation, GqlUpdateEnterpriseSpecialV2MutationVariables>(UpdateEnterpriseSpecialV2Document, baseOptions);
      }
export type UpdateEnterpriseSpecialV2MutationHookResult = ReturnType<typeof useUpdateEnterpriseSpecialV2Mutation>;
export type UpdateEnterpriseSpecialV2MutationResult = ApolloReactCommon.MutationResult<GqlUpdateEnterpriseSpecialV2Mutation>;
export type UpdateEnterpriseSpecialV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateEnterpriseSpecialV2Mutation, GqlUpdateEnterpriseSpecialV2MutationVariables>;
export const UpdateSpecialV3Document = gql`
    mutation UpdateSpecialV3($id: String!, $input: SpecialsInputV3!) {
  updateSpecialV3(id: $id, input: $input) {
    _id
  }
}
    `;
export type GqlUpdateSpecialV3MutationFn = ApolloReactCommon.MutationFunction<GqlUpdateSpecialV3Mutation, GqlUpdateSpecialV3MutationVariables>;

/**
 * __useUpdateSpecialV3Mutation__
 *
 * To run a mutation, you first call `useUpdateSpecialV3Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSpecialV3Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSpecialV3Mutation, { data, loading, error }] = useUpdateSpecialV3Mutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateSpecialV3Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateSpecialV3Mutation, GqlUpdateSpecialV3MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateSpecialV3Mutation, GqlUpdateSpecialV3MutationVariables>(UpdateSpecialV3Document, baseOptions);
      }
export type UpdateSpecialV3MutationHookResult = ReturnType<typeof useUpdateSpecialV3Mutation>;
export type UpdateSpecialV3MutationResult = ApolloReactCommon.MutationResult<GqlUpdateSpecialV3Mutation>;
export type UpdateSpecialV3MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateSpecialV3Mutation, GqlUpdateSpecialV3MutationVariables>;
export const UpdateSpecialsSortOrderDocument = gql`
    mutation UpdateSpecialsSortOrder($input: SortOrderInput!) {
  updateSpecialsSortOrder(input: $input) {
    message
    success
  }
}
    `;
export type GqlUpdateSpecialsSortOrderMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateSpecialsSortOrderMutation, GqlUpdateSpecialsSortOrderMutationVariables>;

/**
 * __useUpdateSpecialsSortOrderMutation__
 *
 * To run a mutation, you first call `useUpdateSpecialsSortOrderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSpecialsSortOrderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSpecialsSortOrderMutation, { data, loading, error }] = useUpdateSpecialsSortOrderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateSpecialsSortOrderMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateSpecialsSortOrderMutation, GqlUpdateSpecialsSortOrderMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateSpecialsSortOrderMutation, GqlUpdateSpecialsSortOrderMutationVariables>(UpdateSpecialsSortOrderDocument, baseOptions);
      }
export type UpdateSpecialsSortOrderMutationHookResult = ReturnType<typeof useUpdateSpecialsSortOrderMutation>;
export type UpdateSpecialsSortOrderMutationResult = ApolloReactCommon.MutationResult<GqlUpdateSpecialsSortOrderMutation>;
export type UpdateSpecialsSortOrderMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateSpecialsSortOrderMutation, GqlUpdateSpecialsSortOrderMutationVariables>;
export const EnterpriseSpecialsV3Document = gql`
    query EnterpriseSpecialsV3($enterpriseId: ID!, $filter: filteredSpecialsInputV2) {
  enterpriseSpecialsV3(enterpriseId: $enterpriseId, filter: $filter) {
    queryInfo {
      totalCount
    }
    specials {
      _id
      active
      bogoConditionLogicOperator
      bogoConditions {
        _id
        brandId
        brandName
        categoryName
        productGroup
        productId
        quantity
        weight
        weightOperator
      }
      bogoRewardLogicOperator
      bogoRewards {
        _id
        brandId
        brandName
        categoryName
        dollarDiscount
        productGroup
        productId
        percentDiscount
        quantity
        targetPrice
        weight
      }
      cipher
      clicks
      complete
      createdAt
      createdBy
      description
      descriptionHtml
      discount
      discountedPrices
      discountToCart {
        _id
        enabled
        discountType
        value
      }
      displayRank
      earliestStartStamp
      emailSpecial
      endDay
      endStamp
      endTime
      enterpriseId
      enterpriseSpecialId
      excludedProducts {
        _id
        Name
        key
        conditions {
          _id
          Name
          key
        }
        rewards {
          _id
          Name
          key
        }
      }
      heading
      isRecurring
      itemsForAPrice {
        _id
        enabled
        value
      }
      latestEndStamp
      localTime
      menuDisplayDescription
      menuDisplayName
      menuDisplayImage
      menuType
      name
      percentDiscount
      productDiscounts
      productGroup
      productGroupRewards
      products
      recurring {
        days
        endDate
        endTime
        setEndDate
        startTime
      }
      redemptionLimit
      retailers
      scope
      source
      sourceId
      specialRestrictions
      specialType
      startDay
      startStamp
      startTime
      subject
      targetPrice
      timezone
      totalQuantity {
        enabled
        maxQuantity
        quantity
        quantityOperator
      }
      totalWeight {
        enabled
        weight
        weightOperator
      }
      totalSpend {
        enabled
        maximumSpend
        minimumSpend
        spendOperator
      }
      updatedAt
      updatedBy
      version
    }
  }
}
    `;

/**
 * __useEnterpriseSpecialsV3Query__
 *
 * To run a query within a React component, call `useEnterpriseSpecialsV3Query` and pass it any options that fit your needs.
 * When your component renders, `useEnterpriseSpecialsV3Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useEnterpriseSpecialsV3Query({
 *   variables: {
 *      enterpriseId: // value for 'enterpriseId'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useEnterpriseSpecialsV3Query(baseOptions: ApolloReactHooks.QueryHookOptions<GqlEnterpriseSpecialsV3Query, GqlEnterpriseSpecialsV3QueryVariables>) {
        return ApolloReactHooks.useQuery<GqlEnterpriseSpecialsV3Query, GqlEnterpriseSpecialsV3QueryVariables>(EnterpriseSpecialsV3Document, baseOptions);
      }
export function useEnterpriseSpecialsV3LazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlEnterpriseSpecialsV3Query, GqlEnterpriseSpecialsV3QueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlEnterpriseSpecialsV3Query, GqlEnterpriseSpecialsV3QueryVariables>(EnterpriseSpecialsV3Document, baseOptions);
        }
export type EnterpriseSpecialsV3QueryHookResult = ReturnType<typeof useEnterpriseSpecialsV3Query>;
export type EnterpriseSpecialsV3LazyQueryHookResult = ReturnType<typeof useEnterpriseSpecialsV3LazyQuery>;
export type EnterpriseSpecialsV3QueryResult = ApolloReactCommon.QueryResult<GqlEnterpriseSpecialsV3Query, GqlEnterpriseSpecialsV3QueryVariables>;
export const EnterpriseSpecialsDocument = gql`
    query EnterpriseSpecials($enterpriseId: ID!) {
  enterpriseSpecials(enterpriseId: $enterpriseId) {
    _id
    active
    bogoConditionLogicOperator
    bogoConditions {
      _id
      brandId
      brandName
      categoryName
      productGroup
      productId
      quantity
      weight
      weightOperator
    }
    bogoRewardLogicOperator
    bogoRewards {
      _id
      brandId
      brandName
      categoryName
      dollarDiscount
      productGroup
      productId
      percentDiscount
      quantity
      targetPrice
      weight
    }
    cipher
    clicks
    createdAt
    createdBy
    description
    descriptionHtml
    discount
    discountedPrices
    discountToCart {
      _id
      enabled
      discountType
      value
    }
    displayRank
    emailSpecial
    endDay
    endStamp
    endTime
    enterpriseId
    enterpriseSpecialId
    excludedProducts {
      _id
      Name
      key
      conditions {
        _id
        Name
        key
      }
      rewards {
        _id
        Name
        key
      }
    }
    heading
    isRecurring
    itemsForAPrice {
      _id
      enabled
      value
    }
    localTime
    menuDisplayDescription
    menuDisplayName
    menuDisplayImage
    menuType
    name
    percentDiscount
    productDiscounts
    productGroup
    productGroupRewards
    products
    recurring {
      days
      endDate
      endTime
      setEndDate
      startTime
    }
    redemptionLimit
    retailers
    scope
    source
    sourceId
    specialRestrictions
    specialType
    startDay
    startStamp
    startTime
    subject
    targetPrice
    timezone
    totalQuantity {
      enabled
      maxQuantity
      quantity
      quantityOperator
    }
    totalWeight {
      enabled
      weight
      weightOperator
    }
    totalSpend {
      enabled
      maximumSpend
      minimumSpend
      spendOperator
    }
    updatedAt
    updatedBy
    version
  }
}
    `;

/**
 * __useEnterpriseSpecialsQuery__
 *
 * To run a query within a React component, call `useEnterpriseSpecialsQuery` and pass it any options that fit your needs.
 * When your component renders, `useEnterpriseSpecialsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useEnterpriseSpecialsQuery({
 *   variables: {
 *      enterpriseId: // value for 'enterpriseId'
 *   },
 * });
 */
export function useEnterpriseSpecialsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlEnterpriseSpecialsQuery, GqlEnterpriseSpecialsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlEnterpriseSpecialsQuery, GqlEnterpriseSpecialsQueryVariables>(EnterpriseSpecialsDocument, baseOptions);
      }
export function useEnterpriseSpecialsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlEnterpriseSpecialsQuery, GqlEnterpriseSpecialsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlEnterpriseSpecialsQuery, GqlEnterpriseSpecialsQueryVariables>(EnterpriseSpecialsDocument, baseOptions);
        }
export type EnterpriseSpecialsQueryHookResult = ReturnType<typeof useEnterpriseSpecialsQuery>;
export type EnterpriseSpecialsLazyQueryHookResult = ReturnType<typeof useEnterpriseSpecialsLazyQuery>;
export type EnterpriseSpecialsQueryResult = ApolloReactCommon.QueryResult<GqlEnterpriseSpecialsQuery, GqlEnterpriseSpecialsQueryVariables>;
export const FilteredSpecialsDocument = gql`
    query FilteredSpecials($specialsFilter: filteredSpecialsInput!, $includeEnterpriseSpecials: Boolean = false) {
  filteredSpecials(
    filter: $specialsFilter
    includeEnterpriseSpecials: $includeEnterpriseSpecials
  ) {
    queryInfo {
      totalCount
    }
    specials {
      _id
      active
      menuDisplayName
      menuDisplayDescription
      bogoConditionLogicOperator
      menuDisplayImage
      bogoConditions {
        _id
        brandId
        brandName
        categoryName
        productGroup
        productId
        quantity
        weight
        weightOperator
      }
      bogoRewardLogicOperator
      bogoRewards {
        _id
        brandId
        brandName
        categoryName
        dollarDiscount
        productGroup
        productId
        percentDiscount
        quantity
        targetPrice
        weight
      }
      clicks
      createdAt
      createdBy
      description
      descriptionHtml
      discount
      discountedPrices
      discountPrecedence
      discountStacking
      discountToCart {
        _id
        enabled
        discountType
        value
      }
      dispensaryId
      displayRank
      emailSpecial
      endDay
      endStamp
      endTime
      excludedProducts {
        _id
        Name
        key
        conditions {
          _id
          Name
          key
        }
        rewards {
          _id
          Name
          key
        }
      }
      heading
      isRecurring
      itemsForAPrice {
        _id
        enabled
        value
      }
      discountBundle {
        _id
        applyTo
        discountType
        enabled
        limit
        value
      }
      menuType
      name
      percentDiscount
      productDiscounts
      productGroup
      productGroupRewards
      products
      recurring {
        days
        endDate
        endTime
        setEndDate
        startTime
      }
      redemptionLimit
      scope
      source
      sourceId
      specialId
      specialRestrictions
      specialType
      stackingBehavior
      stackingMode
      startDate
      startDay
      startStamp
      startTime
      subject
      targetPrice
      totalQuantity {
        enabled
        maxQuantity
        quantity
        quantityOperator
      }
      totalWeight {
        enabled
        weight
        weightOperator
      }
      totalSpend {
        enabled
        maximumSpend
        minimumSpend
        spendOperator
      }
      updatedAt
      updatedBy
      version
    }
  }
}
    `;

/**
 * __useFilteredSpecialsQuery__
 *
 * To run a query within a React component, call `useFilteredSpecialsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFilteredSpecialsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFilteredSpecialsQuery({
 *   variables: {
 *      specialsFilter: // value for 'specialsFilter'
 *      includeEnterpriseSpecials: // value for 'includeEnterpriseSpecials'
 *   },
 * });
 */
export function useFilteredSpecialsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlFilteredSpecialsQuery, GqlFilteredSpecialsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlFilteredSpecialsQuery, GqlFilteredSpecialsQueryVariables>(FilteredSpecialsDocument, baseOptions);
      }
export function useFilteredSpecialsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlFilteredSpecialsQuery, GqlFilteredSpecialsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlFilteredSpecialsQuery, GqlFilteredSpecialsQueryVariables>(FilteredSpecialsDocument, baseOptions);
        }
export type FilteredSpecialsQueryHookResult = ReturnType<typeof useFilteredSpecialsQuery>;
export type FilteredSpecialsLazyQueryHookResult = ReturnType<typeof useFilteredSpecialsLazyQuery>;
export type FilteredSpecialsQueryResult = ApolloReactCommon.QueryResult<GqlFilteredSpecialsQuery, GqlFilteredSpecialsQueryVariables>;
export const GetStockImageDocument = gql`
    query getStockImage($category: String, $productName: String) {
  getStockImage(category: $category, productName: $productName) {
    url
  }
}
    `;

/**
 * __useGetStockImageQuery__
 *
 * To run a query within a React component, call `useGetStockImageQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStockImageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStockImageQuery({
 *   variables: {
 *      category: // value for 'category'
 *      productName: // value for 'productName'
 *   },
 * });
 */
export function useGetStockImageQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlGetStockImageQuery, GqlGetStockImageQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetStockImageQuery, GqlGetStockImageQueryVariables>(GetStockImageDocument, baseOptions);
      }
export function useGetStockImageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetStockImageQuery, GqlGetStockImageQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetStockImageQuery, GqlGetStockImageQueryVariables>(GetStockImageDocument, baseOptions);
        }
export type GetStockImageQueryHookResult = ReturnType<typeof useGetStockImageQuery>;
export type GetStockImageLazyQueryHookResult = ReturnType<typeof useGetStockImageLazyQuery>;
export type GetStockImageQueryResult = ApolloReactCommon.QueryResult<GqlGetStockImageQuery, GqlGetStockImageQueryVariables>;
export const CreateStrainV2Document = gql`
    mutation CreateStrainV2($input: strainInput!) {
  createStrainV2(strain: $input) {
    id
  }
}
    `;
export type GqlCreateStrainV2MutationFn = ApolloReactCommon.MutationFunction<GqlCreateStrainV2Mutation, GqlCreateStrainV2MutationVariables>;

/**
 * __useCreateStrainV2Mutation__
 *
 * To run a mutation, you first call `useCreateStrainV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateStrainV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createStrainV2Mutation, { data, loading, error }] = useCreateStrainV2Mutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateStrainV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateStrainV2Mutation, GqlCreateStrainV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateStrainV2Mutation, GqlCreateStrainV2MutationVariables>(CreateStrainV2Document, baseOptions);
      }
export type CreateStrainV2MutationHookResult = ReturnType<typeof useCreateStrainV2Mutation>;
export type CreateStrainV2MutationResult = ApolloReactCommon.MutationResult<GqlCreateStrainV2Mutation>;
export type CreateStrainV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateStrainV2Mutation, GqlCreateStrainV2MutationVariables>;
export const DeleteStrainDocument = gql`
    mutation DeleteStrain($id: String!) {
  deleteStrain(id: $id) {
    id
  }
}
    `;
export type GqlDeleteStrainMutationFn = ApolloReactCommon.MutationFunction<GqlDeleteStrainMutation, GqlDeleteStrainMutationVariables>;

/**
 * __useDeleteStrainMutation__
 *
 * To run a mutation, you first call `useDeleteStrainMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteStrainMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteStrainMutation, { data, loading, error }] = useDeleteStrainMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteStrainMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteStrainMutation, GqlDeleteStrainMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteStrainMutation, GqlDeleteStrainMutationVariables>(DeleteStrainDocument, baseOptions);
      }
export type DeleteStrainMutationHookResult = ReturnType<typeof useDeleteStrainMutation>;
export type DeleteStrainMutationResult = ApolloReactCommon.MutationResult<GqlDeleteStrainMutation>;
export type DeleteStrainMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteStrainMutation, GqlDeleteStrainMutationVariables>;
export const UpdateStrainV2Document = gql`
    mutation UpdateStrainV2($id: String!, $input: strainInput!) {
  updateStrainV2(id: $id, strain: $input) {
    id
  }
}
    `;
export type GqlUpdateStrainV2MutationFn = ApolloReactCommon.MutationFunction<GqlUpdateStrainV2Mutation, GqlUpdateStrainV2MutationVariables>;

/**
 * __useUpdateStrainV2Mutation__
 *
 * To run a mutation, you first call `useUpdateStrainV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateStrainV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateStrainV2Mutation, { data, loading, error }] = useUpdateStrainV2Mutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateStrainV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateStrainV2Mutation, GqlUpdateStrainV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateStrainV2Mutation, GqlUpdateStrainV2MutationVariables>(UpdateStrainV2Document, baseOptions);
      }
export type UpdateStrainV2MutationHookResult = ReturnType<typeof useUpdateStrainV2Mutation>;
export type UpdateStrainV2MutationResult = ApolloReactCommon.MutationResult<GqlUpdateStrainV2Mutation>;
export type UpdateStrainV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateStrainV2Mutation, GqlUpdateStrainV2MutationVariables>;
export const FilteredStrainsDocument = gql`
    query FilteredStrains($filter: strainsFilterInput, $sort: strainsSortInput, $pagination: paginationInput) {
  filteredStrains(filter: $filter, sort: $sort, pagination: $pagination) {
    queryInfo {
      totalCount
    }
    strains {
      description
      effects
      id
      imageUrl
      name
      potentialHealthBenefits
    }
  }
}
    `;

/**
 * __useFilteredStrainsQuery__
 *
 * To run a query within a React component, call `useFilteredStrainsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFilteredStrainsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFilteredStrainsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useFilteredStrainsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlFilteredStrainsQuery, GqlFilteredStrainsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlFilteredStrainsQuery, GqlFilteredStrainsQueryVariables>(FilteredStrainsDocument, baseOptions);
      }
export function useFilteredStrainsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlFilteredStrainsQuery, GqlFilteredStrainsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlFilteredStrainsQuery, GqlFilteredStrainsQueryVariables>(FilteredStrainsDocument, baseOptions);
        }
export type FilteredStrainsQueryHookResult = ReturnType<typeof useFilteredStrainsQuery>;
export type FilteredStrainsLazyQueryHookResult = ReturnType<typeof useFilteredStrainsLazyQuery>;
export type FilteredStrainsQueryResult = ApolloReactCommon.QueryResult<GqlFilteredStrainsQuery, GqlFilteredStrainsQueryVariables>;
export const GetStrainDocument = gql`
    query GetStrain($id: String!) {
  getStrain(id: $id) {
    aromas
    description
    effects
    id
    imageUrl
    labels
    name
    potentialHealthBenefits
    ratio
    terpenes {
      id
      name
    }
  }
}
    `;

/**
 * __useGetStrainQuery__
 *
 * To run a query within a React component, call `useGetStrainQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStrainQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStrainQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetStrainQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetStrainQuery, GqlGetStrainQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetStrainQuery, GqlGetStrainQueryVariables>(GetStrainDocument, baseOptions);
      }
export function useGetStrainLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetStrainQuery, GqlGetStrainQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetStrainQuery, GqlGetStrainQueryVariables>(GetStrainDocument, baseOptions);
        }
export type GetStrainQueryHookResult = ReturnType<typeof useGetStrainQuery>;
export type GetStrainLazyQueryHookResult = ReturnType<typeof useGetStrainLazyQuery>;
export type GetStrainQueryResult = ApolloReactCommon.QueryResult<GqlGetStrainQuery, GqlGetStrainQueryVariables>;
export const FilteredSubscriptionsDocument = gql`
    query FilteredSubscriptions($subscriptionsFilter: subscriptionsFilterInput) {
  filteredSubscriptions(filter: $subscriptionsFilter) {
    _id
    createdAt
    createdBy
    dateAdded
    dispensaryId
    dispensaryName
    email
    emailOptIn
    emailSubscription
    name
    numOrders
    orderTotal
    phone
    source
    textSubscription
    userId
  }
}
    `;

/**
 * __useFilteredSubscriptionsQuery__
 *
 * To run a query within a React component, call `useFilteredSubscriptionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFilteredSubscriptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFilteredSubscriptionsQuery({
 *   variables: {
 *      subscriptionsFilter: // value for 'subscriptionsFilter'
 *   },
 * });
 */
export function useFilteredSubscriptionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlFilteredSubscriptionsQuery, GqlFilteredSubscriptionsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlFilteredSubscriptionsQuery, GqlFilteredSubscriptionsQueryVariables>(FilteredSubscriptionsDocument, baseOptions);
      }
export function useFilteredSubscriptionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlFilteredSubscriptionsQuery, GqlFilteredSubscriptionsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlFilteredSubscriptionsQuery, GqlFilteredSubscriptionsQueryVariables>(FilteredSubscriptionsDocument, baseOptions);
        }
export type FilteredSubscriptionsQueryHookResult = ReturnType<typeof useFilteredSubscriptionsQuery>;
export type FilteredSubscriptionsLazyQueryHookResult = ReturnType<typeof useFilteredSubscriptionsLazyQuery>;
export type FilteredSubscriptionsQueryResult = ApolloReactCommon.QueryResult<GqlFilteredSubscriptionsQuery, GqlFilteredSubscriptionsQueryVariables>;
export const GetCustomerSubscriptionsDocument = gql`
    query GetCustomerSubscriptions {
  getCustomerSubscriptions {
    dispensaryId
    dispensaryName
    emailOptIn
    emailSubscription
    id
  }
}
    `;

/**
 * __useGetCustomerSubscriptionsQuery__
 *
 * To run a query within a React component, call `useGetCustomerSubscriptionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerSubscriptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerSubscriptionsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCustomerSubscriptionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlGetCustomerSubscriptionsQuery, GqlGetCustomerSubscriptionsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetCustomerSubscriptionsQuery, GqlGetCustomerSubscriptionsQueryVariables>(GetCustomerSubscriptionsDocument, baseOptions);
      }
export function useGetCustomerSubscriptionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetCustomerSubscriptionsQuery, GqlGetCustomerSubscriptionsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetCustomerSubscriptionsQuery, GqlGetCustomerSubscriptionsQueryVariables>(GetCustomerSubscriptionsDocument, baseOptions);
        }
export type GetCustomerSubscriptionsQueryHookResult = ReturnType<typeof useGetCustomerSubscriptionsQuery>;
export type GetCustomerSubscriptionsLazyQueryHookResult = ReturnType<typeof useGetCustomerSubscriptionsLazyQuery>;
export type GetCustomerSubscriptionsQueryResult = ApolloReactCommon.QueryResult<GqlGetCustomerSubscriptionsQuery, GqlGetCustomerSubscriptionsQueryVariables>;
export const GetUnsubscribeDispensaryDocument = gql`
    query GetUnsubscribeDispensary($customerId: String!) {
  unsubscribeCustomerQuery(customerId: $customerId) {
    subscribed
    dispensary {
      name
      logoImage
    }
  }
}
    `;

/**
 * __useGetUnsubscribeDispensaryQuery__
 *
 * To run a query within a React component, call `useGetUnsubscribeDispensaryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUnsubscribeDispensaryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUnsubscribeDispensaryQuery({
 *   variables: {
 *      customerId: // value for 'customerId'
 *   },
 * });
 */
export function useGetUnsubscribeDispensaryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetUnsubscribeDispensaryQuery, GqlGetUnsubscribeDispensaryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetUnsubscribeDispensaryQuery, GqlGetUnsubscribeDispensaryQueryVariables>(GetUnsubscribeDispensaryDocument, baseOptions);
      }
export function useGetUnsubscribeDispensaryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetUnsubscribeDispensaryQuery, GqlGetUnsubscribeDispensaryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetUnsubscribeDispensaryQuery, GqlGetUnsubscribeDispensaryQueryVariables>(GetUnsubscribeDispensaryDocument, baseOptions);
        }
export type GetUnsubscribeDispensaryQueryHookResult = ReturnType<typeof useGetUnsubscribeDispensaryQuery>;
export type GetUnsubscribeDispensaryLazyQueryHookResult = ReturnType<typeof useGetUnsubscribeDispensaryLazyQuery>;
export type GetUnsubscribeDispensaryQueryResult = ApolloReactCommon.QueryResult<GqlGetUnsubscribeDispensaryQuery, GqlGetUnsubscribeDispensaryQueryVariables>;
export const CreateTerpeneDocument = gql`
    mutation CreateTerpene($terpene: terpeneInput!) {
  createTerpeneV2(terpene: $terpene) {
    id
  }
}
    `;
export type GqlCreateTerpeneMutationFn = ApolloReactCommon.MutationFunction<GqlCreateTerpeneMutation, GqlCreateTerpeneMutationVariables>;

/**
 * __useCreateTerpeneMutation__
 *
 * To run a mutation, you first call `useCreateTerpeneMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTerpeneMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTerpeneMutation, { data, loading, error }] = useCreateTerpeneMutation({
 *   variables: {
 *      terpene: // value for 'terpene'
 *   },
 * });
 */
export function useCreateTerpeneMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateTerpeneMutation, GqlCreateTerpeneMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateTerpeneMutation, GqlCreateTerpeneMutationVariables>(CreateTerpeneDocument, baseOptions);
      }
export type CreateTerpeneMutationHookResult = ReturnType<typeof useCreateTerpeneMutation>;
export type CreateTerpeneMutationResult = ApolloReactCommon.MutationResult<GqlCreateTerpeneMutation>;
export type CreateTerpeneMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateTerpeneMutation, GqlCreateTerpeneMutationVariables>;
export const DeleteTerpeneDocument = gql`
    mutation DeleteTerpene($id: String!) {
  deleteTerpene(id: $id) {
    id
  }
}
    `;
export type GqlDeleteTerpeneMutationFn = ApolloReactCommon.MutationFunction<GqlDeleteTerpeneMutation, GqlDeleteTerpeneMutationVariables>;

/**
 * __useDeleteTerpeneMutation__
 *
 * To run a mutation, you first call `useDeleteTerpeneMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteTerpeneMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteTerpeneMutation, { data, loading, error }] = useDeleteTerpeneMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteTerpeneMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteTerpeneMutation, GqlDeleteTerpeneMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteTerpeneMutation, GqlDeleteTerpeneMutationVariables>(DeleteTerpeneDocument, baseOptions);
      }
export type DeleteTerpeneMutationHookResult = ReturnType<typeof useDeleteTerpeneMutation>;
export type DeleteTerpeneMutationResult = ApolloReactCommon.MutationResult<GqlDeleteTerpeneMutation>;
export type DeleteTerpeneMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteTerpeneMutation, GqlDeleteTerpeneMutationVariables>;
export const UpdateTerpeneDocument = gql`
    mutation UpdateTerpene($id: String!, $terpene: terpeneInput!) {
  updateTerpeneV2(id: $id, terpene: $terpene) {
    id
  }
}
    `;
export type GqlUpdateTerpeneMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateTerpeneMutation, GqlUpdateTerpeneMutationVariables>;

/**
 * __useUpdateTerpeneMutation__
 *
 * To run a mutation, you first call `useUpdateTerpeneMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTerpeneMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTerpeneMutation, { data, loading, error }] = useUpdateTerpeneMutation({
 *   variables: {
 *      id: // value for 'id'
 *      terpene: // value for 'terpene'
 *   },
 * });
 */
export function useUpdateTerpeneMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateTerpeneMutation, GqlUpdateTerpeneMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateTerpeneMutation, GqlUpdateTerpeneMutationVariables>(UpdateTerpeneDocument, baseOptions);
      }
export type UpdateTerpeneMutationHookResult = ReturnType<typeof useUpdateTerpeneMutation>;
export type UpdateTerpeneMutationResult = ApolloReactCommon.MutationResult<GqlUpdateTerpeneMutation>;
export type UpdateTerpeneMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateTerpeneMutation, GqlUpdateTerpeneMutationVariables>;
export const FilteredTerpenesDocument = gql`
    query FilteredTerpenes($filter: terpenesFilter, $sort: terpenesSort) {
  filteredTerpenes(filter: $filter, sort: $sort) {
    ...TerpeneFragment
    strains {
      _id
    }
  }
}
    ${TerpeneFragmentFragmentDoc}`;

/**
 * __useFilteredTerpenesQuery__
 *
 * To run a query within a React component, call `useFilteredTerpenesQuery` and pass it any options that fit your needs.
 * When your component renders, `useFilteredTerpenesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFilteredTerpenesQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useFilteredTerpenesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlFilteredTerpenesQuery, GqlFilteredTerpenesQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlFilteredTerpenesQuery, GqlFilteredTerpenesQueryVariables>(FilteredTerpenesDocument, baseOptions);
      }
export function useFilteredTerpenesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlFilteredTerpenesQuery, GqlFilteredTerpenesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlFilteredTerpenesQuery, GqlFilteredTerpenesQueryVariables>(FilteredTerpenesDocument, baseOptions);
        }
export type FilteredTerpenesQueryHookResult = ReturnType<typeof useFilteredTerpenesQuery>;
export type FilteredTerpenesLazyQueryHookResult = ReturnType<typeof useFilteredTerpenesLazyQuery>;
export type FilteredTerpenesQueryResult = ApolloReactCommon.QueryResult<GqlFilteredTerpenesQuery, GqlFilteredTerpenesQueryVariables>;
export const GetTerpeneDocument = gql`
    query GetTerpene($id: String!) {
  getTerpene(id: $id) {
    ...TerpeneFragment
  }
}
    ${TerpeneFragmentFragmentDoc}`;

/**
 * __useGetTerpeneQuery__
 *
 * To run a query within a React component, call `useGetTerpeneQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTerpeneQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTerpeneQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetTerpeneQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetTerpeneQuery, GqlGetTerpeneQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetTerpeneQuery, GqlGetTerpeneQueryVariables>(GetTerpeneDocument, baseOptions);
      }
export function useGetTerpeneLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetTerpeneQuery, GqlGetTerpeneQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetTerpeneQuery, GqlGetTerpeneQueryVariables>(GetTerpeneDocument, baseOptions);
        }
export type GetTerpeneQueryHookResult = ReturnType<typeof useGetTerpeneQuery>;
export type GetTerpeneLazyQueryHookResult = ReturnType<typeof useGetTerpeneLazyQuery>;
export type GetTerpeneQueryResult = ApolloReactCommon.QueryResult<GqlGetTerpeneQuery, GqlGetTerpeneQueryVariables>;
export const ConsumerSignupDocument = gql`
    mutation ConsumerSignup($input: consumerSignupInput!) {
  consumerSignup(input: $input) {
    accessToken
    user {
      _id
      emails {
        address
      }
      profile {
        birthday
        emailNotifications
        emailOptIn
        firstName
        lastName
        medicalCard {
          expirationDate
          number
          state
        }
        phone
        photoId
        textNotifications
      }
    }
  }
}
    `;
export type GqlConsumerSignupMutationFn = ApolloReactCommon.MutationFunction<GqlConsumerSignupMutation, GqlConsumerSignupMutationVariables>;

/**
 * __useConsumerSignupMutation__
 *
 * To run a mutation, you first call `useConsumerSignupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useConsumerSignupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [consumerSignupMutation, { data, loading, error }] = useConsumerSignupMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useConsumerSignupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlConsumerSignupMutation, GqlConsumerSignupMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlConsumerSignupMutation, GqlConsumerSignupMutationVariables>(ConsumerSignupDocument, baseOptions);
      }
export type ConsumerSignupMutationHookResult = ReturnType<typeof useConsumerSignupMutation>;
export type ConsumerSignupMutationResult = ApolloReactCommon.MutationResult<GqlConsumerSignupMutation>;
export type ConsumerSignupMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlConsumerSignupMutation, GqlConsumerSignupMutationVariables>;
export const CreateUserDocument = gql`
    mutation CreateUser($input: usersCreateInput!) {
  createUser(user: $input) {
    audioNotificationsOnNewArrivalsDisabled
    audioNotificationsOnNewOrdersDisabled
    chainID
    createdAt
    createdBy
    dispensaryId
    email
    fullName
    permissions {
      allLocations
      analytics
      billing
      customers
      dispensaryIds
      driver
      menu
      menuReview
      orders
      promote
      settings
      superMenuReview
      users
    }
    phone
    roleAtDispensary
    textNotifications
    type
  }
}
    `;
export type GqlCreateUserMutationFn = ApolloReactCommon.MutationFunction<GqlCreateUserMutation, GqlCreateUserMutationVariables>;

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateUserMutation, GqlCreateUserMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateUserMutation, GqlCreateUserMutationVariables>(CreateUserDocument, baseOptions);
      }
export type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;
export type CreateUserMutationResult = ApolloReactCommon.MutationResult<GqlCreateUserMutation>;
export type CreateUserMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateUserMutation, GqlCreateUserMutationVariables>;
export const DeleteUserDocument = gql`
    mutation DeleteUser($input: usersDeleteInput!) {
  deleteUser(user: $input) {
    fullName
  }
}
    `;
export type GqlDeleteUserMutationFn = ApolloReactCommon.MutationFunction<GqlDeleteUserMutation, GqlDeleteUserMutationVariables>;

/**
 * __useDeleteUserMutation__
 *
 * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteUserMutation, GqlDeleteUserMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteUserMutation, GqlDeleteUserMutationVariables>(DeleteUserDocument, baseOptions);
      }
export type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;
export type DeleteUserMutationResult = ApolloReactCommon.MutationResult<GqlDeleteUserMutation>;
export type DeleteUserMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteUserMutation, GqlDeleteUserMutationVariables>;
export const LoginAdminViaTokenDocument = gql`
    mutation LoginAdminViaToken($transferToken: String!) {
  loginAdminViaToken(transferToken: $transferToken) {
    ...adminIdentityFragment
  }
}
    ${AdminIdentityFragmentFragmentDoc}`;
export type GqlLoginAdminViaTokenMutationFn = ApolloReactCommon.MutationFunction<GqlLoginAdminViaTokenMutation, GqlLoginAdminViaTokenMutationVariables>;

/**
 * __useLoginAdminViaTokenMutation__
 *
 * To run a mutation, you first call `useLoginAdminViaTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginAdminViaTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginAdminViaTokenMutation, { data, loading, error }] = useLoginAdminViaTokenMutation({
 *   variables: {
 *      transferToken: // value for 'transferToken'
 *   },
 * });
 */
export function useLoginAdminViaTokenMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlLoginAdminViaTokenMutation, GqlLoginAdminViaTokenMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlLoginAdminViaTokenMutation, GqlLoginAdminViaTokenMutationVariables>(LoginAdminViaTokenDocument, baseOptions);
      }
export type LoginAdminViaTokenMutationHookResult = ReturnType<typeof useLoginAdminViaTokenMutation>;
export type LoginAdminViaTokenMutationResult = ApolloReactCommon.MutationResult<GqlLoginAdminViaTokenMutation>;
export type LoginAdminViaTokenMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlLoginAdminViaTokenMutation, GqlLoginAdminViaTokenMutationVariables>;
export const LoginAdminDocument = gql`
    mutation LoginAdmin($email: String!, $password: String!) {
  loginAdmin(email: $email, password: $password) {
    ...adminIdentityFragment
  }
}
    ${AdminIdentityFragmentFragmentDoc}`;
export type GqlLoginAdminMutationFn = ApolloReactCommon.MutationFunction<GqlLoginAdminMutation, GqlLoginAdminMutationVariables>;

/**
 * __useLoginAdminMutation__
 *
 * To run a mutation, you first call `useLoginAdminMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginAdminMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginAdminMutation, { data, loading, error }] = useLoginAdminMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useLoginAdminMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlLoginAdminMutation, GqlLoginAdminMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlLoginAdminMutation, GqlLoginAdminMutationVariables>(LoginAdminDocument, baseOptions);
      }
export type LoginAdminMutationHookResult = ReturnType<typeof useLoginAdminMutation>;
export type LoginAdminMutationResult = ApolloReactCommon.MutationResult<GqlLoginAdminMutation>;
export type LoginAdminMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlLoginAdminMutation, GqlLoginAdminMutationVariables>;
export const LoginConsumerDocument = gql`
    mutation LoginConsumer($email: String!, $password: String!) {
  loginConsumer(email: $email, password: $password) {
    accessToken
    transferToken
    user {
      _id
      createdAt
      emails {
        address
      }
      profile {
        birthday
        emailNotifications
        emailOptIn
        firstName
        lastName
        medicalCard {
          expirationDate
          number
          state
          photo
        }
        phone
        photoId
        textNotifications
        type
      }
    }
  }
}
    `;
export type GqlLoginConsumerMutationFn = ApolloReactCommon.MutationFunction<GqlLoginConsumerMutation, GqlLoginConsumerMutationVariables>;

/**
 * __useLoginConsumerMutation__
 *
 * To run a mutation, you first call `useLoginConsumerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginConsumerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginConsumerMutation, { data, loading, error }] = useLoginConsumerMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useLoginConsumerMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlLoginConsumerMutation, GqlLoginConsumerMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlLoginConsumerMutation, GqlLoginConsumerMutationVariables>(LoginConsumerDocument, baseOptions);
      }
export type LoginConsumerMutationHookResult = ReturnType<typeof useLoginConsumerMutation>;
export type LoginConsumerMutationResult = ApolloReactCommon.MutationResult<GqlLoginConsumerMutation>;
export type LoginConsumerMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlLoginConsumerMutation, GqlLoginConsumerMutationVariables>;
export const LogoutDocument = gql`
    mutation Logout {
  logout {
    message
    success
  }
}
    `;
export type GqlLogoutMutationFn = ApolloReactCommon.MutationFunction<GqlLogoutMutation, GqlLogoutMutationVariables>;

/**
 * __useLogoutMutation__
 *
 * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logoutMutation, { data, loading, error }] = useLogoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlLogoutMutation, GqlLogoutMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlLogoutMutation, GqlLogoutMutationVariables>(LogoutDocument, baseOptions);
      }
export type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;
export type LogoutMutationResult = ApolloReactCommon.MutationResult<GqlLogoutMutation>;
export type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlLogoutMutation, GqlLogoutMutationVariables>;
export const UpdateUserDocument = gql`
    mutation UpdateUser($input: usersUpdateInput!) {
  updateUser(user: $input) {
    audioNotificationsOnNewArrivalsDisabled
    audioNotificationsOnNewOrdersDisabled
    chainID
    createdAt
    createdBy
    dispensaryId
    email
    fullName
    isWeeklyReportEnabled
    permissions {
      allLocations
      analytics
      billing
      customers
      dispensaryIds
      driver
      menu
      menuReview
      orders
      promote
      settings
      superMenuReview
      users
    }
    phone
    roleAtDispensary
    textNotifications
    type
    unsubscribedDispensaries
  }
}
    `;
export type GqlUpdateUserMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateUserMutation, GqlUpdateUserMutationVariables>;

/**
 * __useUpdateUserMutation__
 *
 * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateUserMutation, GqlUpdateUserMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateUserMutation, GqlUpdateUserMutationVariables>(UpdateUserDocument, baseOptions);
      }
export type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;
export type UpdateUserMutationResult = ApolloReactCommon.MutationResult<GqlUpdateUserMutation>;
export type UpdateUserMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateUserMutation, GqlUpdateUserMutationVariables>;
export const MeConsumerDocument = gql`
    query MeConsumer {
  meConsumer {
    _id
    createdAt
    emails {
      address
    }
    profile {
      address {
        city
        lat
        ln1
        ln2
        lng
        state
        zipcode
      }
      birthday
      emailNotifications
      emailOptIn
      firstName
      lastName
      medicalCard {
        expirationDate
        number
        state
        photo
      }
      phone
      textNotifications
      type
      photoId
    }
  }
}
    `;

/**
 * __useMeConsumerQuery__
 *
 * To run a query within a React component, call `useMeConsumerQuery` and pass it any options that fit your needs.
 * When your component renders, `useMeConsumerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMeConsumerQuery({
 *   variables: {
 *   },
 * });
 */
export function useMeConsumerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlMeConsumerQuery, GqlMeConsumerQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlMeConsumerQuery, GqlMeConsumerQueryVariables>(MeConsumerDocument, baseOptions);
      }
export function useMeConsumerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlMeConsumerQuery, GqlMeConsumerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlMeConsumerQuery, GqlMeConsumerQueryVariables>(MeConsumerDocument, baseOptions);
        }
export type MeConsumerQueryHookResult = ReturnType<typeof useMeConsumerQuery>;
export type MeConsumerLazyQueryHookResult = ReturnType<typeof useMeConsumerLazyQuery>;
export type MeConsumerQueryResult = ApolloReactCommon.QueryResult<GqlMeConsumerQuery, GqlMeConsumerQueryVariables>;
export const AnalyticsBrandsQueryDocument = gql`
    query AnalyticsBrandsQuery($input: BrandsSummaryInput!, $pagination: AnalyticsPagination, $sort: AnalyticsSort) {
  getFilteredBrandSummaries(input: $input, pagination: $pagination, sort: $sort) {
    brands {
      brandId
      brandName
      numProducts
      percentSales
      totalSalesCents
      percentChange
      centsChange
    }
    meta {
      totalCount
    }
  }
}
    `;

/**
 * __useAnalyticsBrandsQueryQuery__
 *
 * To run a query within a React component, call `useAnalyticsBrandsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsBrandsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalyticsBrandsQueryQuery({
 *   variables: {
 *      input: // value for 'input'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsBrandsQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAnalyticsBrandsQueryQuery, GqlAnalyticsBrandsQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAnalyticsBrandsQueryQuery, GqlAnalyticsBrandsQueryQueryVariables>(AnalyticsBrandsQueryDocument, baseOptions);
      }
export function useAnalyticsBrandsQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAnalyticsBrandsQueryQuery, GqlAnalyticsBrandsQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAnalyticsBrandsQueryQuery, GqlAnalyticsBrandsQueryQueryVariables>(AnalyticsBrandsQueryDocument, baseOptions);
        }
export type AnalyticsBrandsQueryQueryHookResult = ReturnType<typeof useAnalyticsBrandsQueryQuery>;
export type AnalyticsBrandsQueryLazyQueryHookResult = ReturnType<typeof useAnalyticsBrandsQueryLazyQuery>;
export type AnalyticsBrandsQueryQueryResult = ApolloReactCommon.QueryResult<GqlAnalyticsBrandsQueryQuery, GqlAnalyticsBrandsQueryQueryVariables>;
export const AnalyticsExportBrandsMutationDocument = gql`
    mutation AnalyticsExportBrandsMutation($input: BrandsSummaryInput!, $sort: AnalyticsSort) {
  exportFilteredBrandsSummaries(input: $input, sort: $sort) {
    success
  }
}
    `;
export type GqlAnalyticsExportBrandsMutationMutationFn = ApolloReactCommon.MutationFunction<GqlAnalyticsExportBrandsMutationMutation, GqlAnalyticsExportBrandsMutationMutationVariables>;

/**
 * __useAnalyticsExportBrandsMutationMutation__
 *
 * To run a mutation, you first call `useAnalyticsExportBrandsMutationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsExportBrandsMutationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analyticsExportBrandsMutationMutation, { data, loading, error }] = useAnalyticsExportBrandsMutationMutation({
 *   variables: {
 *      input: // value for 'input'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsExportBrandsMutationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlAnalyticsExportBrandsMutationMutation, GqlAnalyticsExportBrandsMutationMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlAnalyticsExportBrandsMutationMutation, GqlAnalyticsExportBrandsMutationMutationVariables>(AnalyticsExportBrandsMutationDocument, baseOptions);
      }
export type AnalyticsExportBrandsMutationMutationHookResult = ReturnType<typeof useAnalyticsExportBrandsMutationMutation>;
export type AnalyticsExportBrandsMutationMutationResult = ApolloReactCommon.MutationResult<GqlAnalyticsExportBrandsMutationMutation>;
export type AnalyticsExportBrandsMutationMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlAnalyticsExportBrandsMutationMutation, GqlAnalyticsExportBrandsMutationMutationVariables>;
export const GetTrendingBrandsQueryDocument = gql`
    query GetTrendingBrandsQuery($input: BrandsSummaryInput!, $pagination: AnalyticsPagination, $sort: AnalyticsSort) {
  getTrendingBrands(input: $input, pagination: $pagination, sort: $sort) {
    trending {
      brandId
      brandName
      percentChangeFromLastPeriod
      dollarHistoryThisPeriod {
        date
        totalSales
      }
    }
  }
}
    `;

/**
 * __useGetTrendingBrandsQueryQuery__
 *
 * To run a query within a React component, call `useGetTrendingBrandsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTrendingBrandsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTrendingBrandsQueryQuery({
 *   variables: {
 *      input: // value for 'input'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetTrendingBrandsQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetTrendingBrandsQueryQuery, GqlGetTrendingBrandsQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetTrendingBrandsQueryQuery, GqlGetTrendingBrandsQueryQueryVariables>(GetTrendingBrandsQueryDocument, baseOptions);
      }
export function useGetTrendingBrandsQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetTrendingBrandsQueryQuery, GqlGetTrendingBrandsQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetTrendingBrandsQueryQuery, GqlGetTrendingBrandsQueryQueryVariables>(GetTrendingBrandsQueryDocument, baseOptions);
        }
export type GetTrendingBrandsQueryQueryHookResult = ReturnType<typeof useGetTrendingBrandsQueryQuery>;
export type GetTrendingBrandsQueryLazyQueryHookResult = ReturnType<typeof useGetTrendingBrandsQueryLazyQuery>;
export type GetTrendingBrandsQueryQueryResult = ApolloReactCommon.QueryResult<GqlGetTrendingBrandsQueryQuery, GqlGetTrendingBrandsQueryQueryVariables>;
export const AnalyticsAbandonedCartsQueryDocument = gql`
    query AnalyticsAbandonedCartsQuery($input: AnalyticsInput!, $pagination: AnalyticsPagination, $sort: AnalyticsSort) {
  getEcommerceAbandonedCarts(input: $input, pagination: $pagination, sort: $sort) {
    carts {
      id
      createdAt
      firstName
      lastName
      email
      phone
      valueInCents
    }
    meta {
      totalCount
    }
  }
}
    `;

/**
 * __useAnalyticsAbandonedCartsQueryQuery__
 *
 * To run a query within a React component, call `useAnalyticsAbandonedCartsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsAbandonedCartsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalyticsAbandonedCartsQueryQuery({
 *   variables: {
 *      input: // value for 'input'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsAbandonedCartsQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAnalyticsAbandonedCartsQueryQuery, GqlAnalyticsAbandonedCartsQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAnalyticsAbandonedCartsQueryQuery, GqlAnalyticsAbandonedCartsQueryQueryVariables>(AnalyticsAbandonedCartsQueryDocument, baseOptions);
      }
export function useAnalyticsAbandonedCartsQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAnalyticsAbandonedCartsQueryQuery, GqlAnalyticsAbandonedCartsQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAnalyticsAbandonedCartsQueryQuery, GqlAnalyticsAbandonedCartsQueryQueryVariables>(AnalyticsAbandonedCartsQueryDocument, baseOptions);
        }
export type AnalyticsAbandonedCartsQueryQueryHookResult = ReturnType<typeof useAnalyticsAbandonedCartsQueryQuery>;
export type AnalyticsAbandonedCartsQueryLazyQueryHookResult = ReturnType<typeof useAnalyticsAbandonedCartsQueryLazyQuery>;
export type AnalyticsAbandonedCartsQueryQueryResult = ApolloReactCommon.QueryResult<GqlAnalyticsAbandonedCartsQueryQuery, GqlAnalyticsAbandonedCartsQueryQueryVariables>;
export const AnalyticsEcommerceDataPointsQueryDocument = gql`
    query AnalyticsEcommerceDataPointsQuery($input: AnalyticsInput!) {
  getEcommerceDataPoints(input: $input) {
    conversion {
      percentOfVisits
      unitDifferenceFromLastPeriod
    }
    abandonment {
      currentValue
      unitDifferenceFromLastPeriod
    }
    order {
      currentValue
      percentDifference
    }
    repeatCustomers {
      percentOfVisits
      unitDifferenceFromLastPeriod
    }
    conversionFunnel {
      visitedMenu {
        percentOfVisits
      }
      interacted {
        percentOfVisits
      }
      addedToCart {
        percentOfVisits
      }
      visitedCheckout {
        percentOfVisits
      }
      placedOrder {
        percentOfVisits
      }
    }
  }
}
    `;

/**
 * __useAnalyticsEcommerceDataPointsQueryQuery__
 *
 * To run a query within a React component, call `useAnalyticsEcommerceDataPointsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsEcommerceDataPointsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalyticsEcommerceDataPointsQueryQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAnalyticsEcommerceDataPointsQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAnalyticsEcommerceDataPointsQueryQuery, GqlAnalyticsEcommerceDataPointsQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAnalyticsEcommerceDataPointsQueryQuery, GqlAnalyticsEcommerceDataPointsQueryQueryVariables>(AnalyticsEcommerceDataPointsQueryDocument, baseOptions);
      }
export function useAnalyticsEcommerceDataPointsQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAnalyticsEcommerceDataPointsQueryQuery, GqlAnalyticsEcommerceDataPointsQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAnalyticsEcommerceDataPointsQueryQuery, GqlAnalyticsEcommerceDataPointsQueryQueryVariables>(AnalyticsEcommerceDataPointsQueryDocument, baseOptions);
        }
export type AnalyticsEcommerceDataPointsQueryQueryHookResult = ReturnType<typeof useAnalyticsEcommerceDataPointsQueryQuery>;
export type AnalyticsEcommerceDataPointsQueryLazyQueryHookResult = ReturnType<typeof useAnalyticsEcommerceDataPointsQueryLazyQuery>;
export type AnalyticsEcommerceDataPointsQueryQueryResult = ApolloReactCommon.QueryResult<GqlAnalyticsEcommerceDataPointsQueryQuery, GqlAnalyticsEcommerceDataPointsQueryQueryVariables>;
export const AnalyticsExportCartsMutationDocument = gql`
    mutation AnalyticsExportCartsMutation($input: AnalyticsInput!, $sort: AnalyticsSort) {
  exportFilteredCartsSummaries(input: $input, sort: $sort) {
    success
  }
}
    `;
export type GqlAnalyticsExportCartsMutationMutationFn = ApolloReactCommon.MutationFunction<GqlAnalyticsExportCartsMutationMutation, GqlAnalyticsExportCartsMutationMutationVariables>;

/**
 * __useAnalyticsExportCartsMutationMutation__
 *
 * To run a mutation, you first call `useAnalyticsExportCartsMutationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsExportCartsMutationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analyticsExportCartsMutationMutation, { data, loading, error }] = useAnalyticsExportCartsMutationMutation({
 *   variables: {
 *      input: // value for 'input'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsExportCartsMutationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlAnalyticsExportCartsMutationMutation, GqlAnalyticsExportCartsMutationMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlAnalyticsExportCartsMutationMutation, GqlAnalyticsExportCartsMutationMutationVariables>(AnalyticsExportCartsMutationDocument, baseOptions);
      }
export type AnalyticsExportCartsMutationMutationHookResult = ReturnType<typeof useAnalyticsExportCartsMutationMutation>;
export type AnalyticsExportCartsMutationMutationResult = ApolloReactCommon.MutationResult<GqlAnalyticsExportCartsMutationMutation>;
export type AnalyticsExportCartsMutationMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlAnalyticsExportCartsMutationMutation, GqlAnalyticsExportCartsMutationMutationVariables>;
export const AnalyticsMarketingCampaignsQueryDocument = gql`
    query AnalyticsMarketingCampaignsQuery($input: AnalyticsInput!, $pagination: AnalyticsPagination, $sort: AnalyticsSort) {
  getMarketingCampaigns(input: $input, pagination: $pagination, sort: $sort) {
    campaigns {
      utmCampaign
      utmSource
      utmMedium
      conversionPercentage
      conversionPercentageUnitChange
      averageOrderValue
      averageOrderValueChangePercentage
      totalSales
    }
    meta {
      totalCount
    }
  }
}
    `;

/**
 * __useAnalyticsMarketingCampaignsQueryQuery__
 *
 * To run a query within a React component, call `useAnalyticsMarketingCampaignsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsMarketingCampaignsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalyticsMarketingCampaignsQueryQuery({
 *   variables: {
 *      input: // value for 'input'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsMarketingCampaignsQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAnalyticsMarketingCampaignsQueryQuery, GqlAnalyticsMarketingCampaignsQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAnalyticsMarketingCampaignsQueryQuery, GqlAnalyticsMarketingCampaignsQueryQueryVariables>(AnalyticsMarketingCampaignsQueryDocument, baseOptions);
      }
export function useAnalyticsMarketingCampaignsQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAnalyticsMarketingCampaignsQueryQuery, GqlAnalyticsMarketingCampaignsQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAnalyticsMarketingCampaignsQueryQuery, GqlAnalyticsMarketingCampaignsQueryQueryVariables>(AnalyticsMarketingCampaignsQueryDocument, baseOptions);
        }
export type AnalyticsMarketingCampaignsQueryQueryHookResult = ReturnType<typeof useAnalyticsMarketingCampaignsQueryQuery>;
export type AnalyticsMarketingCampaignsQueryLazyQueryHookResult = ReturnType<typeof useAnalyticsMarketingCampaignsQueryLazyQuery>;
export type AnalyticsMarketingCampaignsQueryQueryResult = ApolloReactCommon.QueryResult<GqlAnalyticsMarketingCampaignsQueryQuery, GqlAnalyticsMarketingCampaignsQueryQueryVariables>;
export const AnalyticsMarketingCouponQueryDocument = gql`
    query AnalyticsMarketingCouponQuery($input: AnalyticsInput!, $pagination: AnalyticsPagination, $sort: AnalyticsSort) {
  getMarketingCoupons(input: $input, pagination: $pagination, sort: $sort) {
    coupons {
      couponId
      couponName
      revenue
      prevTotalSales
      currentUsage
      prevUsage
      averageOrderValue
      averageOrderValueChangePercentage
      averageUsageChangePercentage
      discount
    }
    meta {
      totalCount
    }
  }
}
    `;

/**
 * __useAnalyticsMarketingCouponQueryQuery__
 *
 * To run a query within a React component, call `useAnalyticsMarketingCouponQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsMarketingCouponQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalyticsMarketingCouponQueryQuery({
 *   variables: {
 *      input: // value for 'input'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsMarketingCouponQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAnalyticsMarketingCouponQueryQuery, GqlAnalyticsMarketingCouponQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAnalyticsMarketingCouponQueryQuery, GqlAnalyticsMarketingCouponQueryQueryVariables>(AnalyticsMarketingCouponQueryDocument, baseOptions);
      }
export function useAnalyticsMarketingCouponQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAnalyticsMarketingCouponQueryQuery, GqlAnalyticsMarketingCouponQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAnalyticsMarketingCouponQueryQuery, GqlAnalyticsMarketingCouponQueryQueryVariables>(AnalyticsMarketingCouponQueryDocument, baseOptions);
        }
export type AnalyticsMarketingCouponQueryQueryHookResult = ReturnType<typeof useAnalyticsMarketingCouponQueryQuery>;
export type AnalyticsMarketingCouponQueryLazyQueryHookResult = ReturnType<typeof useAnalyticsMarketingCouponQueryLazyQuery>;
export type AnalyticsMarketingCouponQueryQueryResult = ApolloReactCommon.QueryResult<GqlAnalyticsMarketingCouponQueryQuery, GqlAnalyticsMarketingCouponQueryQueryVariables>;
export const AnalyticsMarketingDataPointsQueryDocument = gql`
    query AnalyticsMarketingDataPointsQuery($input: AnalyticsInput!) {
  getMarketingDataPoints(input: $input) {
    totalCampaignsCents
    totalSpecialsCents
    totalCouponsCents
    marketingRevenue {
      date
      specialsCents
      couponsCents
    }
  }
}
    `;

/**
 * __useAnalyticsMarketingDataPointsQueryQuery__
 *
 * To run a query within a React component, call `useAnalyticsMarketingDataPointsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsMarketingDataPointsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalyticsMarketingDataPointsQueryQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAnalyticsMarketingDataPointsQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAnalyticsMarketingDataPointsQueryQuery, GqlAnalyticsMarketingDataPointsQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAnalyticsMarketingDataPointsQueryQuery, GqlAnalyticsMarketingDataPointsQueryQueryVariables>(AnalyticsMarketingDataPointsQueryDocument, baseOptions);
      }
export function useAnalyticsMarketingDataPointsQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAnalyticsMarketingDataPointsQueryQuery, GqlAnalyticsMarketingDataPointsQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAnalyticsMarketingDataPointsQueryQuery, GqlAnalyticsMarketingDataPointsQueryQueryVariables>(AnalyticsMarketingDataPointsQueryDocument, baseOptions);
        }
export type AnalyticsMarketingDataPointsQueryQueryHookResult = ReturnType<typeof useAnalyticsMarketingDataPointsQueryQuery>;
export type AnalyticsMarketingDataPointsQueryLazyQueryHookResult = ReturnType<typeof useAnalyticsMarketingDataPointsQueryLazyQuery>;
export type AnalyticsMarketingDataPointsQueryQueryResult = ApolloReactCommon.QueryResult<GqlAnalyticsMarketingDataPointsQueryQuery, GqlAnalyticsMarketingDataPointsQueryQueryVariables>;
export const AnalyticsExportCampaignsMutationDocument = gql`
    mutation AnalyticsExportCampaignsMutation($input: AnalyticsInput!, $sort: AnalyticsSort) {
  exportFilteredCampaignsSummaries(input: $input, sort: $sort) {
    success
  }
}
    `;
export type GqlAnalyticsExportCampaignsMutationMutationFn = ApolloReactCommon.MutationFunction<GqlAnalyticsExportCampaignsMutationMutation, GqlAnalyticsExportCampaignsMutationMutationVariables>;

/**
 * __useAnalyticsExportCampaignsMutationMutation__
 *
 * To run a mutation, you first call `useAnalyticsExportCampaignsMutationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsExportCampaignsMutationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analyticsExportCampaignsMutationMutation, { data, loading, error }] = useAnalyticsExportCampaignsMutationMutation({
 *   variables: {
 *      input: // value for 'input'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsExportCampaignsMutationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlAnalyticsExportCampaignsMutationMutation, GqlAnalyticsExportCampaignsMutationMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlAnalyticsExportCampaignsMutationMutation, GqlAnalyticsExportCampaignsMutationMutationVariables>(AnalyticsExportCampaignsMutationDocument, baseOptions);
      }
export type AnalyticsExportCampaignsMutationMutationHookResult = ReturnType<typeof useAnalyticsExportCampaignsMutationMutation>;
export type AnalyticsExportCampaignsMutationMutationResult = ApolloReactCommon.MutationResult<GqlAnalyticsExportCampaignsMutationMutation>;
export type AnalyticsExportCampaignsMutationMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlAnalyticsExportCampaignsMutationMutation, GqlAnalyticsExportCampaignsMutationMutationVariables>;
export const AnalyticsExportCouponsMutationDocument = gql`
    mutation AnalyticsExportCouponsMutation($input: AnalyticsInput!, $sort: AnalyticsSort) {
  exportCouponsSummaries(input: $input, sort: $sort) {
    success
  }
}
    `;
export type GqlAnalyticsExportCouponsMutationMutationFn = ApolloReactCommon.MutationFunction<GqlAnalyticsExportCouponsMutationMutation, GqlAnalyticsExportCouponsMutationMutationVariables>;

/**
 * __useAnalyticsExportCouponsMutationMutation__
 *
 * To run a mutation, you first call `useAnalyticsExportCouponsMutationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsExportCouponsMutationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analyticsExportCouponsMutationMutation, { data, loading, error }] = useAnalyticsExportCouponsMutationMutation({
 *   variables: {
 *      input: // value for 'input'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsExportCouponsMutationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlAnalyticsExportCouponsMutationMutation, GqlAnalyticsExportCouponsMutationMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlAnalyticsExportCouponsMutationMutation, GqlAnalyticsExportCouponsMutationMutationVariables>(AnalyticsExportCouponsMutationDocument, baseOptions);
      }
export type AnalyticsExportCouponsMutationMutationHookResult = ReturnType<typeof useAnalyticsExportCouponsMutationMutation>;
export type AnalyticsExportCouponsMutationMutationResult = ApolloReactCommon.MutationResult<GqlAnalyticsExportCouponsMutationMutation>;
export type AnalyticsExportCouponsMutationMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlAnalyticsExportCouponsMutationMutation, GqlAnalyticsExportCouponsMutationMutationVariables>;
export const AnalyticsExportSpecialsMutationDocument = gql`
    mutation AnalyticsExportSpecialsMutation($input: AnalyticsInput!, $sort: AnalyticsSort) {
  exportSpecialsSummaries(input: $input, sort: $sort) {
    success
  }
}
    `;
export type GqlAnalyticsExportSpecialsMutationMutationFn = ApolloReactCommon.MutationFunction<GqlAnalyticsExportSpecialsMutationMutation, GqlAnalyticsExportSpecialsMutationMutationVariables>;

/**
 * __useAnalyticsExportSpecialsMutationMutation__
 *
 * To run a mutation, you first call `useAnalyticsExportSpecialsMutationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsExportSpecialsMutationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analyticsExportSpecialsMutationMutation, { data, loading, error }] = useAnalyticsExportSpecialsMutationMutation({
 *   variables: {
 *      input: // value for 'input'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsExportSpecialsMutationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlAnalyticsExportSpecialsMutationMutation, GqlAnalyticsExportSpecialsMutationMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlAnalyticsExportSpecialsMutationMutation, GqlAnalyticsExportSpecialsMutationMutationVariables>(AnalyticsExportSpecialsMutationDocument, baseOptions);
      }
export type AnalyticsExportSpecialsMutationMutationHookResult = ReturnType<typeof useAnalyticsExportSpecialsMutationMutation>;
export type AnalyticsExportSpecialsMutationMutationResult = ApolloReactCommon.MutationResult<GqlAnalyticsExportSpecialsMutationMutation>;
export type AnalyticsExportSpecialsMutationMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlAnalyticsExportSpecialsMutationMutation, GqlAnalyticsExportSpecialsMutationMutationVariables>;
export const AnalyticsMarketingSpecialsQueryDocument = gql`
    query AnalyticsMarketingSpecialsQuery($input: AnalyticsInput!, $pagination: AnalyticsPagination, $sort: AnalyticsSort) {
  getMarketingSpecials(input: $input, pagination: $pagination, sort: $sort) {
    specials {
      specialId
      dispensaryId
      name
      type
      emailSent
      clickThroughPercentage
      conversionPercentage
      conversionChangePercentage
      averageOrderValue
      averageOrderValueChangePercentage
      totalSales
    }
    meta {
      totalCount
    }
  }
}
    `;

/**
 * __useAnalyticsMarketingSpecialsQueryQuery__
 *
 * To run a query within a React component, call `useAnalyticsMarketingSpecialsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsMarketingSpecialsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalyticsMarketingSpecialsQueryQuery({
 *   variables: {
 *      input: // value for 'input'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsMarketingSpecialsQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAnalyticsMarketingSpecialsQueryQuery, GqlAnalyticsMarketingSpecialsQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAnalyticsMarketingSpecialsQueryQuery, GqlAnalyticsMarketingSpecialsQueryQueryVariables>(AnalyticsMarketingSpecialsQueryDocument, baseOptions);
      }
export function useAnalyticsMarketingSpecialsQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAnalyticsMarketingSpecialsQueryQuery, GqlAnalyticsMarketingSpecialsQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAnalyticsMarketingSpecialsQueryQuery, GqlAnalyticsMarketingSpecialsQueryQueryVariables>(AnalyticsMarketingSpecialsQueryDocument, baseOptions);
        }
export type AnalyticsMarketingSpecialsQueryQueryHookResult = ReturnType<typeof useAnalyticsMarketingSpecialsQueryQuery>;
export type AnalyticsMarketingSpecialsQueryLazyQueryHookResult = ReturnType<typeof useAnalyticsMarketingSpecialsQueryLazyQuery>;
export type AnalyticsMarketingSpecialsQueryQueryResult = ApolloReactCommon.QueryResult<GqlAnalyticsMarketingSpecialsQueryQuery, GqlAnalyticsMarketingSpecialsQueryQueryVariables>;
export const AnalyticsExportProductsMutationDocument = gql`
    mutation AnalyticsExportProductsMutation($input: ProductsSummaryInput!, $sort: AnalyticsSort) {
  exportFilteredProductSummaries(input: $input, sort: $sort) {
    success
  }
}
    `;
export type GqlAnalyticsExportProductsMutationMutationFn = ApolloReactCommon.MutationFunction<GqlAnalyticsExportProductsMutationMutation, GqlAnalyticsExportProductsMutationMutationVariables>;

/**
 * __useAnalyticsExportProductsMutationMutation__
 *
 * To run a mutation, you first call `useAnalyticsExportProductsMutationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsExportProductsMutationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analyticsExportProductsMutationMutation, { data, loading, error }] = useAnalyticsExportProductsMutationMutation({
 *   variables: {
 *      input: // value for 'input'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsExportProductsMutationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlAnalyticsExportProductsMutationMutation, GqlAnalyticsExportProductsMutationMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlAnalyticsExportProductsMutationMutation, GqlAnalyticsExportProductsMutationMutationVariables>(AnalyticsExportProductsMutationDocument, baseOptions);
      }
export type AnalyticsExportProductsMutationMutationHookResult = ReturnType<typeof useAnalyticsExportProductsMutationMutation>;
export type AnalyticsExportProductsMutationMutationResult = ApolloReactCommon.MutationResult<GqlAnalyticsExportProductsMutationMutation>;
export type AnalyticsExportProductsMutationMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlAnalyticsExportProductsMutationMutation, GqlAnalyticsExportProductsMutationMutationVariables>;
export const AnalyticsProductsQueryDocument = gql`
    query AnalyticsProductsQuery($input: ProductsSummaryInput!, $pagination: AnalyticsPagination, $sort: AnalyticsSort) {
  getFilteredProductSummaries(input: $input, pagination: $pagination, sort: $sort) {
    products {
      productId
      productName
      brandId
      brandName
      category
      strainType
      sales
      percentChange
      dollarChange
      dispensaryId
      numSold
    }
    meta {
      totalCount
    }
  }
}
    `;

/**
 * __useAnalyticsProductsQueryQuery__
 *
 * To run a query within a React component, call `useAnalyticsProductsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalyticsProductsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalyticsProductsQueryQuery({
 *   variables: {
 *      input: // value for 'input'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useAnalyticsProductsQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAnalyticsProductsQueryQuery, GqlAnalyticsProductsQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAnalyticsProductsQueryQuery, GqlAnalyticsProductsQueryQueryVariables>(AnalyticsProductsQueryDocument, baseOptions);
      }
export function useAnalyticsProductsQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAnalyticsProductsQueryQuery, GqlAnalyticsProductsQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAnalyticsProductsQueryQuery, GqlAnalyticsProductsQueryQueryVariables>(AnalyticsProductsQueryDocument, baseOptions);
        }
export type AnalyticsProductsQueryQueryHookResult = ReturnType<typeof useAnalyticsProductsQueryQuery>;
export type AnalyticsProductsQueryLazyQueryHookResult = ReturnType<typeof useAnalyticsProductsQueryLazyQuery>;
export type AnalyticsProductsQueryQueryResult = ApolloReactCommon.QueryResult<GqlAnalyticsProductsQueryQuery, GqlAnalyticsProductsQueryQueryVariables>;
export const SalesOrdersQueryDocument = gql`
    query SalesOrdersQuery($input: SharedSalesInput!) {
  salesOrdersQuery(input: $input) {
    totalOrders
    totalSales
    revenueChange
    percentChange
    ordersByDate {
      date
      totalOrders
      totalSales
    }
  }
}
    `;

/**
 * __useSalesOrdersQueryQuery__
 *
 * To run a query within a React component, call `useSalesOrdersQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useSalesOrdersQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSalesOrdersQueryQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSalesOrdersQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlSalesOrdersQueryQuery, GqlSalesOrdersQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlSalesOrdersQueryQuery, GqlSalesOrdersQueryQueryVariables>(SalesOrdersQueryDocument, baseOptions);
      }
export function useSalesOrdersQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlSalesOrdersQueryQuery, GqlSalesOrdersQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlSalesOrdersQueryQuery, GqlSalesOrdersQueryQueryVariables>(SalesOrdersQueryDocument, baseOptions);
        }
export type SalesOrdersQueryQueryHookResult = ReturnType<typeof useSalesOrdersQueryQuery>;
export type SalesOrdersQueryLazyQueryHookResult = ReturnType<typeof useSalesOrdersQueryLazyQuery>;
export type SalesOrdersQueryQueryResult = ApolloReactCommon.QueryResult<GqlSalesOrdersQueryQuery, GqlSalesOrdersQueryQueryVariables>;
export const GetProductSalesByCategoryDocument = gql`
    query GetProductSalesByCategory($input: SharedSalesInput!) {
  getProductSalesByCategory(input: $input) {
    categoryOptions {
      key
      label
      value
    }
    lineItems {
      price
      productType
      categoryOption
      totalSales
      percentOfTotal
    }
    totalSales
  }
}
    `;

/**
 * __useGetProductSalesByCategoryQuery__
 *
 * To run a query within a React component, call `useGetProductSalesByCategoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProductSalesByCategoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProductSalesByCategoryQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetProductSalesByCategoryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetProductSalesByCategoryQuery, GqlGetProductSalesByCategoryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetProductSalesByCategoryQuery, GqlGetProductSalesByCategoryQueryVariables>(GetProductSalesByCategoryDocument, baseOptions);
      }
export function useGetProductSalesByCategoryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetProductSalesByCategoryQuery, GqlGetProductSalesByCategoryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetProductSalesByCategoryQuery, GqlGetProductSalesByCategoryQueryVariables>(GetProductSalesByCategoryDocument, baseOptions);
        }
export type GetProductSalesByCategoryQueryHookResult = ReturnType<typeof useGetProductSalesByCategoryQuery>;
export type GetProductSalesByCategoryLazyQueryHookResult = ReturnType<typeof useGetProductSalesByCategoryLazyQuery>;
export type GetProductSalesByCategoryQueryResult = ApolloReactCommon.QueryResult<GqlGetProductSalesByCategoryQuery, GqlGetProductSalesByCategoryQueryVariables>;
export const GetTopProductDocument = gql`
    query GetTopProduct($input: SharedSalesInput!) {
  getTopProduct(input: $input) {
    product {
      brand {
        id
        name
        imageUrl
      }
      brandId
      brandLogo
      Image
      images {
        _id
        url
        origin
        active
      }
      Name
      stockImage
      strainType
      type
    }
    total
  }
}
    `;

/**
 * __useGetTopProductQuery__
 *
 * To run a query within a React component, call `useGetTopProductQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTopProductQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTopProductQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetTopProductQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetTopProductQuery, GqlGetTopProductQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetTopProductQuery, GqlGetTopProductQueryVariables>(GetTopProductDocument, baseOptions);
      }
export function useGetTopProductLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetTopProductQuery, GqlGetTopProductQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetTopProductQuery, GqlGetTopProductQueryVariables>(GetTopProductDocument, baseOptions);
        }
export type GetTopProductQueryHookResult = ReturnType<typeof useGetTopProductQuery>;
export type GetTopProductLazyQueryHookResult = ReturnType<typeof useGetTopProductLazyQuery>;
export type GetTopProductQueryResult = ApolloReactCommon.QueryResult<GqlGetTopProductQuery, GqlGetTopProductQueryVariables>;
export const CreateDispensaryBrandDocument = gql`
    mutation CreateDispensaryBrand($name: String!, $dispensaryId: String!) {
  createBrandV2(brand: {name: $name, dispensaryId: $dispensaryId}) {
    id
    name
  }
}
    `;
export type GqlCreateDispensaryBrandMutationFn = ApolloReactCommon.MutationFunction<GqlCreateDispensaryBrandMutation, GqlCreateDispensaryBrandMutationVariables>;

/**
 * __useCreateDispensaryBrandMutation__
 *
 * To run a mutation, you first call `useCreateDispensaryBrandMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDispensaryBrandMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDispensaryBrandMutation, { data, loading, error }] = useCreateDispensaryBrandMutation({
 *   variables: {
 *      name: // value for 'name'
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useCreateDispensaryBrandMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateDispensaryBrandMutation, GqlCreateDispensaryBrandMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateDispensaryBrandMutation, GqlCreateDispensaryBrandMutationVariables>(CreateDispensaryBrandDocument, baseOptions);
      }
export type CreateDispensaryBrandMutationHookResult = ReturnType<typeof useCreateDispensaryBrandMutation>;
export type CreateDispensaryBrandMutationResult = ApolloReactCommon.MutationResult<GqlCreateDispensaryBrandMutation>;
export type CreateDispensaryBrandMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateDispensaryBrandMutation, GqlCreateDispensaryBrandMutationVariables>;
export const BrandsForDropdownByIdsDocument = gql`
    query BrandsForDropdownByIds($ids: [String]!) {
  getBrandsV2(ids: $ids) {
    ...brandFragmentForDropdown
  }
}
    ${BrandFragmentForDropdownFragmentDoc}`;

/**
 * __useBrandsForDropdownByIdsQuery__
 *
 * To run a query within a React component, call `useBrandsForDropdownByIdsQuery` and pass it any options that fit your needs.
 * When your component renders, `useBrandsForDropdownByIdsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBrandsForDropdownByIdsQuery({
 *   variables: {
 *      ids: // value for 'ids'
 *   },
 * });
 */
export function useBrandsForDropdownByIdsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlBrandsForDropdownByIdsQuery, GqlBrandsForDropdownByIdsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlBrandsForDropdownByIdsQuery, GqlBrandsForDropdownByIdsQueryVariables>(BrandsForDropdownByIdsDocument, baseOptions);
      }
export function useBrandsForDropdownByIdsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlBrandsForDropdownByIdsQuery, GqlBrandsForDropdownByIdsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlBrandsForDropdownByIdsQuery, GqlBrandsForDropdownByIdsQueryVariables>(BrandsForDropdownByIdsDocument, baseOptions);
        }
export type BrandsForDropdownByIdsQueryHookResult = ReturnType<typeof useBrandsForDropdownByIdsQuery>;
export type BrandsForDropdownByIdsLazyQueryHookResult = ReturnType<typeof useBrandsForDropdownByIdsLazyQuery>;
export type BrandsForDropdownByIdsQueryResult = ApolloReactCommon.QueryResult<GqlBrandsForDropdownByIdsQuery, GqlBrandsForDropdownByIdsQueryVariables>;
export const GetCarouselProductsDocument = gql`
    query GetCarouselProducts($productsFilter: productsFilterInput!) {
  filteredProducts(filter: $productsFilter, page: 0, perPage: 15, useCache: true) {
    products {
      id
      Name
      Image
      Prices
      brand {
        id
        name
      }
      brandName
      strainType
      type
    }
  }
}
    `;

/**
 * __useGetCarouselProductsQuery__
 *
 * To run a query within a React component, call `useGetCarouselProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCarouselProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCarouselProductsQuery({
 *   variables: {
 *      productsFilter: // value for 'productsFilter'
 *   },
 * });
 */
export function useGetCarouselProductsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetCarouselProductsQuery, GqlGetCarouselProductsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetCarouselProductsQuery, GqlGetCarouselProductsQueryVariables>(GetCarouselProductsDocument, baseOptions);
      }
export function useGetCarouselProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetCarouselProductsQuery, GqlGetCarouselProductsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetCarouselProductsQuery, GqlGetCarouselProductsQueryVariables>(GetCarouselProductsDocument, baseOptions);
        }
export type GetCarouselProductsQueryHookResult = ReturnType<typeof useGetCarouselProductsQuery>;
export type GetCarouselProductsLazyQueryHookResult = ReturnType<typeof useGetCarouselProductsLazyQuery>;
export type GetCarouselProductsQueryResult = ApolloReactCommon.QueryResult<GqlGetCarouselProductsQuery, GqlGetCarouselProductsQueryVariables>;
export const GetMenuCustomizationDocument = gql`
    query GetMenuCustomization($dispensaryId: String!) {
  filteredDispensaries(filter: {cNameOrID: $dispensaryId}) {
    webCustomizationSettings {
      colorSettings {
        navBarColor
        linkColor
      }
      fontSettings {
        family
      }
    }
    menuBannerHtml
    menuBannerColor
    ageVerificationBannerHtml
    ageVerificationBannerColor
    embedSettings {
      disclaimerTextHtml
    }
    categoryPhotos {
      src
      category
    }
    location {
      state
    }
    imageBanners {
      _id
      image
      mobileImage
      alt
      link
      position
    }
  }
}
    `;

/**
 * __useGetMenuCustomizationQuery__
 *
 * To run a query within a React component, call `useGetMenuCustomizationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMenuCustomizationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMenuCustomizationQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useGetMenuCustomizationQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetMenuCustomizationQuery, GqlGetMenuCustomizationQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetMenuCustomizationQuery, GqlGetMenuCustomizationQueryVariables>(GetMenuCustomizationDocument, baseOptions);
      }
export function useGetMenuCustomizationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetMenuCustomizationQuery, GqlGetMenuCustomizationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetMenuCustomizationQuery, GqlGetMenuCustomizationQueryVariables>(GetMenuCustomizationDocument, baseOptions);
        }
export type GetMenuCustomizationQueryHookResult = ReturnType<typeof useGetMenuCustomizationQuery>;
export type GetMenuCustomizationLazyQueryHookResult = ReturnType<typeof useGetMenuCustomizationLazyQuery>;
export type GetMenuCustomizationQueryResult = ApolloReactCommon.QueryResult<GqlGetMenuCustomizationQuery, GqlGetMenuCustomizationQueryVariables>;
export const UpdateMenuCustomizationDocument = gql`
    mutation UpdateMenuCustomization($dispensaryId: String!, $menuBannerHtml: String, $menuBannerColor: String, $ageVerificationBannerHtml: String, $ageVerificationBannerColor: String) {
  dispensaryUpdate(
    input: {id: $dispensaryId, profile: {menuBannerHtml: $menuBannerHtml, menuBannerColor: $menuBannerColor, ageVerificationBannerHtml: $ageVerificationBannerHtml, ageVerificationBannerColor: $ageVerificationBannerColor}}
  ) {
    success
    message
  }
}
    `;
export type GqlUpdateMenuCustomizationMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateMenuCustomizationMutation, GqlUpdateMenuCustomizationMutationVariables>;

/**
 * __useUpdateMenuCustomizationMutation__
 *
 * To run a mutation, you first call `useUpdateMenuCustomizationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMenuCustomizationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMenuCustomizationMutation, { data, loading, error }] = useUpdateMenuCustomizationMutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      menuBannerHtml: // value for 'menuBannerHtml'
 *      menuBannerColor: // value for 'menuBannerColor'
 *      ageVerificationBannerHtml: // value for 'ageVerificationBannerHtml'
 *      ageVerificationBannerColor: // value for 'ageVerificationBannerColor'
 *   },
 * });
 */
export function useUpdateMenuCustomizationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateMenuCustomizationMutation, GqlUpdateMenuCustomizationMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateMenuCustomizationMutation, GqlUpdateMenuCustomizationMutationVariables>(UpdateMenuCustomizationDocument, baseOptions);
      }
export type UpdateMenuCustomizationMutationHookResult = ReturnType<typeof useUpdateMenuCustomizationMutation>;
export type UpdateMenuCustomizationMutationResult = ApolloReactCommon.MutationResult<GqlUpdateMenuCustomizationMutation>;
export type UpdateMenuCustomizationMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateMenuCustomizationMutation, GqlUpdateMenuCustomizationMutationVariables>;
export const UpdateWebCustomizationSettingsDocument = gql`
    mutation UpdateWebCustomizationSettings($dispensaryId: String!, $input: UpdateWebCustomizationSettingsInput!) {
  updateWebCustomizationSettings(dispensaryId: $dispensaryId, input: $input) {
    success
    message
  }
}
    `;
export type GqlUpdateWebCustomizationSettingsMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateWebCustomizationSettingsMutation, GqlUpdateWebCustomizationSettingsMutationVariables>;

/**
 * __useUpdateWebCustomizationSettingsMutation__
 *
 * To run a mutation, you first call `useUpdateWebCustomizationSettingsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWebCustomizationSettingsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWebCustomizationSettingsMutation, { data, loading, error }] = useUpdateWebCustomizationSettingsMutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateWebCustomizationSettingsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateWebCustomizationSettingsMutation, GqlUpdateWebCustomizationSettingsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateWebCustomizationSettingsMutation, GqlUpdateWebCustomizationSettingsMutationVariables>(UpdateWebCustomizationSettingsDocument, baseOptions);
      }
export type UpdateWebCustomizationSettingsMutationHookResult = ReturnType<typeof useUpdateWebCustomizationSettingsMutation>;
export type UpdateWebCustomizationSettingsMutationResult = ApolloReactCommon.MutationResult<GqlUpdateWebCustomizationSettingsMutation>;
export type UpdateWebCustomizationSettingsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateWebCustomizationSettingsMutation, GqlUpdateWebCustomizationSettingsMutationVariables>;
export const UpdateImageBannersDocument = gql`
    mutation UpdateImageBanners($dispensaryId: String!, $input: UpdateImageBannersInput!) {
  updateImageBanners(dispensaryId: $dispensaryId, input: $input) {
    success
    message
  }
}
    `;
export type GqlUpdateImageBannersMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateImageBannersMutation, GqlUpdateImageBannersMutationVariables>;

/**
 * __useUpdateImageBannersMutation__
 *
 * To run a mutation, you first call `useUpdateImageBannersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateImageBannersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateImageBannersMutation, { data, loading, error }] = useUpdateImageBannersMutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateImageBannersMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateImageBannersMutation, GqlUpdateImageBannersMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateImageBannersMutation, GqlUpdateImageBannersMutationVariables>(UpdateImageBannersDocument, baseOptions);
      }
export type UpdateImageBannersMutationHookResult = ReturnType<typeof useUpdateImageBannersMutation>;
export type UpdateImageBannersMutationResult = ApolloReactCommon.MutationResult<GqlUpdateImageBannersMutation>;
export type UpdateImageBannersMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateImageBannersMutation, GqlUpdateImageBannersMutationVariables>;
export const GetMenuSectionsForEmbedDocument = gql`
    query GetMenuSectionsForEmbed($dispensaryId: String!) {
  getMenuSections(dispensaryId: $dispensaryId) {
    id
    label
    sectionType
  }
}
    `;

/**
 * __useGetMenuSectionsForEmbedQuery__
 *
 * To run a query within a React component, call `useGetMenuSectionsForEmbedQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMenuSectionsForEmbedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMenuSectionsForEmbedQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useGetMenuSectionsForEmbedQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetMenuSectionsForEmbedQuery, GqlGetMenuSectionsForEmbedQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetMenuSectionsForEmbedQuery, GqlGetMenuSectionsForEmbedQueryVariables>(GetMenuSectionsForEmbedDocument, baseOptions);
      }
export function useGetMenuSectionsForEmbedLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetMenuSectionsForEmbedQuery, GqlGetMenuSectionsForEmbedQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetMenuSectionsForEmbedQuery, GqlGetMenuSectionsForEmbedQueryVariables>(GetMenuSectionsForEmbedDocument, baseOptions);
        }
export type GetMenuSectionsForEmbedQueryHookResult = ReturnType<typeof useGetMenuSectionsForEmbedQuery>;
export type GetMenuSectionsForEmbedLazyQueryHookResult = ReturnType<typeof useGetMenuSectionsForEmbedLazyQuery>;
export type GetMenuSectionsForEmbedQueryResult = ApolloReactCommon.QueryResult<GqlGetMenuSectionsForEmbedQuery, GqlGetMenuSectionsForEmbedQueryVariables>;
export const CreateMenuSectionDocument = gql`
    mutation CreateMenuSection($menuSection: menuSectionCreateInput!) {
  createMenuSection(menuSection: $menuSection) {
    id
  }
}
    `;
export type GqlCreateMenuSectionMutationFn = ApolloReactCommon.MutationFunction<GqlCreateMenuSectionMutation, GqlCreateMenuSectionMutationVariables>;

/**
 * __useCreateMenuSectionMutation__
 *
 * To run a mutation, you first call `useCreateMenuSectionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateMenuSectionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createMenuSectionMutation, { data, loading, error }] = useCreateMenuSectionMutation({
 *   variables: {
 *      menuSection: // value for 'menuSection'
 *   },
 * });
 */
export function useCreateMenuSectionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateMenuSectionMutation, GqlCreateMenuSectionMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateMenuSectionMutation, GqlCreateMenuSectionMutationVariables>(CreateMenuSectionDocument, baseOptions);
      }
export type CreateMenuSectionMutationHookResult = ReturnType<typeof useCreateMenuSectionMutation>;
export type CreateMenuSectionMutationResult = ApolloReactCommon.MutationResult<GqlCreateMenuSectionMutation>;
export type CreateMenuSectionMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateMenuSectionMutation, GqlCreateMenuSectionMutationVariables>;
export const DestroyMenuSectionDocument = gql`
    mutation DestroyMenuSection($id: String!, $dispensaryId: String) {
  destroyMenuSection(id: $id, dispensaryId: $dispensaryId) {
    message
    success
  }
}
    `;
export type GqlDestroyMenuSectionMutationFn = ApolloReactCommon.MutationFunction<GqlDestroyMenuSectionMutation, GqlDestroyMenuSectionMutationVariables>;

/**
 * __useDestroyMenuSectionMutation__
 *
 * To run a mutation, you first call `useDestroyMenuSectionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDestroyMenuSectionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [destroyMenuSectionMutation, { data, loading, error }] = useDestroyMenuSectionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useDestroyMenuSectionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDestroyMenuSectionMutation, GqlDestroyMenuSectionMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDestroyMenuSectionMutation, GqlDestroyMenuSectionMutationVariables>(DestroyMenuSectionDocument, baseOptions);
      }
export type DestroyMenuSectionMutationHookResult = ReturnType<typeof useDestroyMenuSectionMutation>;
export type DestroyMenuSectionMutationResult = ApolloReactCommon.MutationResult<GqlDestroyMenuSectionMutation>;
export type DestroyMenuSectionMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDestroyMenuSectionMutation, GqlDestroyMenuSectionMutationVariables>;
export const GetMenuSectionProductsAdminDocument = gql`
    query GetMenuSectionProductsAdmin($filter: productsFilterInput!) {
  filteredProducts(filter: $filter) {
    products {
      Name
      brand {
        id
        name
      }
      _id
      id
      featured {
        current
      }
      type
      subcategory
      special
    }
  }
}
    `;

/**
 * __useGetMenuSectionProductsAdminQuery__
 *
 * To run a query within a React component, call `useGetMenuSectionProductsAdminQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMenuSectionProductsAdminQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMenuSectionProductsAdminQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetMenuSectionProductsAdminQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetMenuSectionProductsAdminQuery, GqlGetMenuSectionProductsAdminQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetMenuSectionProductsAdminQuery, GqlGetMenuSectionProductsAdminQueryVariables>(GetMenuSectionProductsAdminDocument, baseOptions);
      }
export function useGetMenuSectionProductsAdminLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetMenuSectionProductsAdminQuery, GqlGetMenuSectionProductsAdminQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetMenuSectionProductsAdminQuery, GqlGetMenuSectionProductsAdminQueryVariables>(GetMenuSectionProductsAdminDocument, baseOptions);
        }
export type GetMenuSectionProductsAdminQueryHookResult = ReturnType<typeof useGetMenuSectionProductsAdminQuery>;
export type GetMenuSectionProductsAdminLazyQueryHookResult = ReturnType<typeof useGetMenuSectionProductsAdminLazyQuery>;
export type GetMenuSectionProductsAdminQueryResult = ApolloReactCommon.QueryResult<GqlGetMenuSectionProductsAdminQuery, GqlGetMenuSectionProductsAdminQueryVariables>;
export const GetMenuSectionsDocument = gql`
    query GetMenuSections($dispensaryId: String!) {
  getMenuSections(dispensaryId: $dispensaryId) {
    brandId
    category
    id
    label
    linkLabel
    position
    subcategory
    sectionType
    sectionName
    products
  }
}
    `;

/**
 * __useGetMenuSectionsQuery__
 *
 * To run a query within a React component, call `useGetMenuSectionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMenuSectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMenuSectionsQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useGetMenuSectionsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetMenuSectionsQuery, GqlGetMenuSectionsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetMenuSectionsQuery, GqlGetMenuSectionsQueryVariables>(GetMenuSectionsDocument, baseOptions);
      }
export function useGetMenuSectionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetMenuSectionsQuery, GqlGetMenuSectionsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetMenuSectionsQuery, GqlGetMenuSectionsQueryVariables>(GetMenuSectionsDocument, baseOptions);
        }
export type GetMenuSectionsQueryHookResult = ReturnType<typeof useGetMenuSectionsQuery>;
export type GetMenuSectionsLazyQueryHookResult = ReturnType<typeof useGetMenuSectionsLazyQuery>;
export type GetMenuSectionsQueryResult = ApolloReactCommon.QueryResult<GqlGetMenuSectionsQuery, GqlGetMenuSectionsQueryVariables>;
export const SortMenuSectionsDocument = gql`
    mutation SortMenuSections($dispensaryId: String!, $ids: [String!]!) {
  sortMenuSections(dispensaryId: $dispensaryId, ids: $ids) {
    message
    success
  }
}
    `;
export type GqlSortMenuSectionsMutationFn = ApolloReactCommon.MutationFunction<GqlSortMenuSectionsMutation, GqlSortMenuSectionsMutationVariables>;

/**
 * __useSortMenuSectionsMutation__
 *
 * To run a mutation, you first call `useSortMenuSectionsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSortMenuSectionsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sortMenuSectionsMutation, { data, loading, error }] = useSortMenuSectionsMutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      ids: // value for 'ids'
 *   },
 * });
 */
export function useSortMenuSectionsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSortMenuSectionsMutation, GqlSortMenuSectionsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSortMenuSectionsMutation, GqlSortMenuSectionsMutationVariables>(SortMenuSectionsDocument, baseOptions);
      }
export type SortMenuSectionsMutationHookResult = ReturnType<typeof useSortMenuSectionsMutation>;
export type SortMenuSectionsMutationResult = ApolloReactCommon.MutationResult<GqlSortMenuSectionsMutation>;
export type SortMenuSectionsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSortMenuSectionsMutation, GqlSortMenuSectionsMutationVariables>;
export const UpdateMenuSectionDocument = gql`
    mutation UpdateMenuSection($id: ID!, $menuSection: menuSectionUpdateInput!) {
  updateMenuSection(id: $id, menuSection: $menuSection) {
    id
  }
}
    `;
export type GqlUpdateMenuSectionMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateMenuSectionMutation, GqlUpdateMenuSectionMutationVariables>;

/**
 * __useUpdateMenuSectionMutation__
 *
 * To run a mutation, you first call `useUpdateMenuSectionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMenuSectionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMenuSectionMutation, { data, loading, error }] = useUpdateMenuSectionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      menuSection: // value for 'menuSection'
 *   },
 * });
 */
export function useUpdateMenuSectionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateMenuSectionMutation, GqlUpdateMenuSectionMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateMenuSectionMutation, GqlUpdateMenuSectionMutationVariables>(UpdateMenuSectionDocument, baseOptions);
      }
export type UpdateMenuSectionMutationHookResult = ReturnType<typeof useUpdateMenuSectionMutation>;
export type UpdateMenuSectionMutationResult = ApolloReactCommon.MutationResult<GqlUpdateMenuSectionMutation>;
export type UpdateMenuSectionMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateMenuSectionMutation, GqlUpdateMenuSectionMutationVariables>;
export const AdminIndexProductsDocument = gql`
    query AdminIndexProducts($productsFilter: productsFilterInput!, $page: Int, $perPage: Int) {
  filteredProducts(filter: $productsFilter, page: $page, perPage: $perPage) {
    products {
      id
      _id
      brand {
        id
        name
      }
      brandName
      CBD
      CBDContent {
        unit
        range
      }
      DispensaryID
      duplicatedProductId
      medicalOnly
      Name
      Options
      POSMetaData {
        canonicalID
        canonicalBrandName
      }
      recOnly
      recPrices
      medicalPrices
      Prices
      score
      Status
      strainType
      subcategory
      updatedAt
      THC
      THCContent {
        unit
        range
      }
      type
      weight
      isBelowThreshold
      isBelowKioskThreshold
      forcedPotencyUnit
      cannabinoidsV2 {
        value
        unit
        cannabinoid {
          name
        }
      }
    }
    queryInfo {
      totalCount
    }
  }
}
    `;

/**
 * __useAdminIndexProductsQuery__
 *
 * To run a query within a React component, call `useAdminIndexProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminIndexProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminIndexProductsQuery({
 *   variables: {
 *      productsFilter: // value for 'productsFilter'
 *      page: // value for 'page'
 *      perPage: // value for 'perPage'
 *   },
 * });
 */
export function useAdminIndexProductsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAdminIndexProductsQuery, GqlAdminIndexProductsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAdminIndexProductsQuery, GqlAdminIndexProductsQueryVariables>(AdminIndexProductsDocument, baseOptions);
      }
export function useAdminIndexProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAdminIndexProductsQuery, GqlAdminIndexProductsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAdminIndexProductsQuery, GqlAdminIndexProductsQueryVariables>(AdminIndexProductsDocument, baseOptions);
        }
export type AdminIndexProductsQueryHookResult = ReturnType<typeof useAdminIndexProductsQuery>;
export type AdminIndexProductsLazyQueryHookResult = ReturnType<typeof useAdminIndexProductsLazyQuery>;
export type AdminIndexProductsQueryResult = ApolloReactCommon.QueryResult<GqlAdminIndexProductsQuery, GqlAdminIndexProductsQueryVariables>;
export const DisconnectProductDocument = gql`
    mutation DisconnectProduct($id: String!) {
  disconnectProduct(id: $id) {
    message
    success
  }
}
    `;
export type GqlDisconnectProductMutationFn = ApolloReactCommon.MutationFunction<GqlDisconnectProductMutation, GqlDisconnectProductMutationVariables>;

/**
 * __useDisconnectProductMutation__
 *
 * To run a mutation, you first call `useDisconnectProductMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDisconnectProductMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [disconnectProductMutation, { data, loading, error }] = useDisconnectProductMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDisconnectProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDisconnectProductMutation, GqlDisconnectProductMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDisconnectProductMutation, GqlDisconnectProductMutationVariables>(DisconnectProductDocument, baseOptions);
      }
export type DisconnectProductMutationHookResult = ReturnType<typeof useDisconnectProductMutation>;
export type DisconnectProductMutationResult = ApolloReactCommon.MutationResult<GqlDisconnectProductMutation>;
export type DisconnectProductMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDisconnectProductMutation, GqlDisconnectProductMutationVariables>;
export const GetOrdersForMessagingDocument = gql`
    query GetOrdersForMessaging($input: getOrdersInput!) {
  getOrders(input: $input) {
    queryInfo {
      totalCount
    }
    orders {
      createdAt
      customerId
      customerEmail
      customerName
      customerPhone
      dispensaryId
      _id
      orderId
      status
    }
  }
}
    `;

/**
 * __useGetOrdersForMessagingQuery__
 *
 * To run a query within a React component, call `useGetOrdersForMessagingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrdersForMessagingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrdersForMessagingQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetOrdersForMessagingQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetOrdersForMessagingQuery, GqlGetOrdersForMessagingQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetOrdersForMessagingQuery, GqlGetOrdersForMessagingQueryVariables>(GetOrdersForMessagingDocument, baseOptions);
      }
export function useGetOrdersForMessagingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetOrdersForMessagingQuery, GqlGetOrdersForMessagingQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetOrdersForMessagingQuery, GqlGetOrdersForMessagingQueryVariables>(GetOrdersForMessagingDocument, baseOptions);
        }
export type GetOrdersForMessagingQueryHookResult = ReturnType<typeof useGetOrdersForMessagingQuery>;
export type GetOrdersForMessagingLazyQueryHookResult = ReturnType<typeof useGetOrdersForMessagingLazyQuery>;
export type GetOrdersForMessagingQueryResult = ApolloReactCommon.QueryResult<GqlGetOrdersForMessagingQuery, GqlGetOrdersForMessagingQueryVariables>;
export const CreateMessagingFeatureRequestDocument = gql`
    mutation CreateMessagingFeatureRequest($dispensaryName: String!, $email: String!, $userName: String) {
  createMessagingFeatureRequest(
    dispensaryName: $dispensaryName
    email: $email
    userName: $userName
  ) {
    success
  }
}
    `;
export type GqlCreateMessagingFeatureRequestMutationFn = ApolloReactCommon.MutationFunction<GqlCreateMessagingFeatureRequestMutation, GqlCreateMessagingFeatureRequestMutationVariables>;

/**
 * __useCreateMessagingFeatureRequestMutation__
 *
 * To run a mutation, you first call `useCreateMessagingFeatureRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateMessagingFeatureRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createMessagingFeatureRequestMutation, { data, loading, error }] = useCreateMessagingFeatureRequestMutation({
 *   variables: {
 *      dispensaryName: // value for 'dispensaryName'
 *      email: // value for 'email'
 *      userName: // value for 'userName'
 *   },
 * });
 */
export function useCreateMessagingFeatureRequestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateMessagingFeatureRequestMutation, GqlCreateMessagingFeatureRequestMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateMessagingFeatureRequestMutation, GqlCreateMessagingFeatureRequestMutationVariables>(CreateMessagingFeatureRequestDocument, baseOptions);
      }
export type CreateMessagingFeatureRequestMutationHookResult = ReturnType<typeof useCreateMessagingFeatureRequestMutation>;
export type CreateMessagingFeatureRequestMutationResult = ApolloReactCommon.MutationResult<GqlCreateMessagingFeatureRequestMutation>;
export type CreateMessagingFeatureRequestMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateMessagingFeatureRequestMutation, GqlCreateMessagingFeatureRequestMutationVariables>;
export const CreateOrderingSuspensionV2Document = gql`
    mutation CreateOrderingSuspensionV2($dispensaryId: ID!) {
  createOrderingSuspensionV2(dispensaryId: $dispensaryId) {
    id
  }
}
    `;
export type GqlCreateOrderingSuspensionV2MutationFn = ApolloReactCommon.MutationFunction<GqlCreateOrderingSuspensionV2Mutation, GqlCreateOrderingSuspensionV2MutationVariables>;

/**
 * __useCreateOrderingSuspensionV2Mutation__
 *
 * To run a mutation, you first call `useCreateOrderingSuspensionV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrderingSuspensionV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrderingSuspensionV2Mutation, { data, loading, error }] = useCreateOrderingSuspensionV2Mutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useCreateOrderingSuspensionV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateOrderingSuspensionV2Mutation, GqlCreateOrderingSuspensionV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateOrderingSuspensionV2Mutation, GqlCreateOrderingSuspensionV2MutationVariables>(CreateOrderingSuspensionV2Document, baseOptions);
      }
export type CreateOrderingSuspensionV2MutationHookResult = ReturnType<typeof useCreateOrderingSuspensionV2Mutation>;
export type CreateOrderingSuspensionV2MutationResult = ApolloReactCommon.MutationResult<GqlCreateOrderingSuspensionV2Mutation>;
export type CreateOrderingSuspensionV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateOrderingSuspensionV2Mutation, GqlCreateOrderingSuspensionV2MutationVariables>;
export const EndOrderingSuspensionV2Document = gql`
    mutation EndOrderingSuspensionV2($dispensaryId: ID!) {
  endOrderingSuspensionV2(dispensaryId: $dispensaryId) {
    id
  }
}
    `;
export type GqlEndOrderingSuspensionV2MutationFn = ApolloReactCommon.MutationFunction<GqlEndOrderingSuspensionV2Mutation, GqlEndOrderingSuspensionV2MutationVariables>;

/**
 * __useEndOrderingSuspensionV2Mutation__
 *
 * To run a mutation, you first call `useEndOrderingSuspensionV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEndOrderingSuspensionV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [endOrderingSuspensionV2Mutation, { data, loading, error }] = useEndOrderingSuspensionV2Mutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useEndOrderingSuspensionV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlEndOrderingSuspensionV2Mutation, GqlEndOrderingSuspensionV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlEndOrderingSuspensionV2Mutation, GqlEndOrderingSuspensionV2MutationVariables>(EndOrderingSuspensionV2Document, baseOptions);
      }
export type EndOrderingSuspensionV2MutationHookResult = ReturnType<typeof useEndOrderingSuspensionV2Mutation>;
export type EndOrderingSuspensionV2MutationResult = ApolloReactCommon.MutationResult<GqlEndOrderingSuspensionV2Mutation>;
export type EndOrderingSuspensionV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlEndOrderingSuspensionV2Mutation, GqlEndOrderingSuspensionV2MutationVariables>;
export const GetOrderToPrintDocument = gql`
    query getOrderToPrint($id: String!) {
  getOrder(id: $id) {
    order {
      coupon {
        percentDiscount
        fixedDiscountInCents
        code
      }
      createdAt
      credit
      creditTotal
      curbsideArrivalInfo {
        arrivalInformation
      }
      deliveryFee
      customer {
        profile {
          firstName
          lastName
          medicalCard {
            expirationDate
            number
          }
          phone
          birthday
        }
      }
      guestCustomer {
        firstName
        lastName
        birthMonth
        birthDay
        birthYear
      }
      medicalOrder
      medicalCard {
        expirationDate
        number
      }
      orderId
      orders {
        basePrice
        option
        additionalOption
        product {
          type
          Options
        }
        quantity
      }
      specialInstructions
      taxAmount
      cannabisTax
      bottleDepositTaxCents
      tipAmount
      paymentFee
      paymentMethod
      totalCost
      isKioskOrder
      isCurbsidePickupOrder
      isDriveThruPickupOrder
      deliveryInfo {
        apartmentNum
        deliveryOption
        address
      }
      appliedRewards {
        value
        operator
        brand
        redemptionAttempts {
          programResponse {
            rewardRedemption {
              id
              createdAt
              name
              description
            }
          }
          status
          redeemBy
        }
      }
    }
  }
}
    `;

/**
 * __useGetOrderToPrintQuery__
 *
 * To run a query within a React component, call `useGetOrderToPrintQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrderToPrintQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrderToPrintQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetOrderToPrintQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetOrderToPrintQuery, GqlGetOrderToPrintQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetOrderToPrintQuery, GqlGetOrderToPrintQueryVariables>(GetOrderToPrintDocument, baseOptions);
      }
export function useGetOrderToPrintLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetOrderToPrintQuery, GqlGetOrderToPrintQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetOrderToPrintQuery, GqlGetOrderToPrintQueryVariables>(GetOrderToPrintDocument, baseOptions);
        }
export type GetOrderToPrintQueryHookResult = ReturnType<typeof useGetOrderToPrintQuery>;
export type GetOrderToPrintLazyQueryHookResult = ReturnType<typeof useGetOrderToPrintLazyQuery>;
export type GetOrderToPrintQueryResult = ApolloReactCommon.QueryResult<GqlGetOrderToPrintQuery, GqlGetOrderToPrintQueryVariables>;
export const GetOrderDocument = gql`
    query GetOrder($id: String!) {
  getOrder(id: $id) {
    archived
    order {
      coupon {
        _id
        active
        addedDate
        amount
        percentDiscount
        fixedDiscountInCents
        code
        dispensary
        expDate
        numAllowedUses
        numUses
        usedBy
      }
      manualDiscount {
        fixedDiscountInCents
        percentDiscount
      }
      createdAt
      credit
      curbsideArrivalInfo {
        arrivalInformation
      }
      deliveryEstimate
      deliveryFee
      driversLicense
      dispensary {
        _id
        name
        cName
        phone
        logoImage
        address
        timezone
        featureFlags {
          hideDeliveryEstimate
        }
      }
      id
      customer {
        _id
        emails {
          address
        }
        profile {
          medicalCard {
            expirationDate
            number
            state
            photo
          }
          driversLicense
          photoId
          firstName
          lastName
          email
          phone
          birthday
        }
      }
      mixAndMatch
      pos {
        name
        externalID
        failureType
        failureReason
        failureAcks {
          web
          terminal
        }
        humanReadableError
      }
      fleetManagementTask {
        adapter
        id
      }
      guestCustomer {
        firstName
        lastName
        email
        phone
        birthMonth
        birthDay
        birthYear
        photoId
      }
      medicalOrder
      medicalCard {
        expirationDate
        number
        state
        photo
      }
      orderId
      orders {
        basePrice
        option
        price
        additionalOption
        product {
          _id
          Name
          Image
          strainType
          type
          subcategory
          Options
          brandId
          brandName
          POSMetaData {
            children {
              canonicalName
              option
              quantity
            }
          }
          AdditionalOptions
          THCContent {
            unit
            value
            range
          }
          CBDContent {
            unit
            value
            range
          }
          Prices
          preTaxRecPrices
          preTaxMedPrices
        }
        quantity
      }
      specialInstructions
      status
      statusTimes
      statusEvents {
        event
        at
        by
        byType
        agentName
      }
      taxAmount
      cannabisTax
      bottleDepositTaxCents
      tipAmount
      paymentFee
      paymentMethod
      subtotal
      totalCost
      isAfterHoursOrder
      isAnonymous
      isGuestOrder
      isPreviewOrder
      isKioskOrder
      isCurbsidePickupOrder
      isDriveThruPickupOrder
      terminal
      autoConfirmed
      autoClosed
      driverName
      driverNumber
      deliveryInfo {
        address
        apartmentNum
        deliveryAddress
        deliveryOption
        lastSearchedAddress
        nonDeliveryAddress
        address
        location {
          lat
          lng
          ln1
          ln2
          city
          state
          zipcode
        }
      }
      editEvents {
        at
        by
        byType
        agentName
      }
      isArchived
      archivedBy
      archivedAtISO
      cancellationReason
      updatedAt
      hypur {
        id
      }
      paysafe {
        card {
          type
          lastDigits
        }
        authorizations {
          id
          amount
        }
        settlements {
          id
          amount
          cancelled
        }
        refunds {
          id
          amount
        }
      }
      moneris {
        id
        status
        transactionNumber
        card {
          brand
          lastDigits
        }
      }
      appliedRewards {
        copy
        value
        operator
        brand
        redemptionAttempts {
          programResponse {
            rewardRedemption {
              id
              createdAt
              name
              description
            }
          }
          status
          redeemBy
        }
      }
      reservation {
        startTimeISO
        endTimeISO
      }
      receipt
    }
  }
}
    `;

/**
 * __useGetOrderQuery__
 *
 * To run a query within a React component, call `useGetOrderQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrderQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetOrderQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetOrderQuery, GqlGetOrderQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetOrderQuery, GqlGetOrderQueryVariables>(GetOrderDocument, baseOptions);
      }
export function useGetOrderLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetOrderQuery, GqlGetOrderQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetOrderQuery, GqlGetOrderQueryVariables>(GetOrderDocument, baseOptions);
        }
export type GetOrderQueryHookResult = ReturnType<typeof useGetOrderQuery>;
export type GetOrderLazyQueryHookResult = ReturnType<typeof useGetOrderLazyQuery>;
export type GetOrderQueryResult = ApolloReactCommon.QueryResult<GqlGetOrderQuery, GqlGetOrderQueryVariables>;
export const FilteredCouponsForDispensaryAdminDocument = gql`
    query FilteredCouponsForDispensaryAdmin($filter: couponsFilterInput, $sort: couponsSortInput, $pagination: couponsPaginationInput) {
  filteredCoupons(filter: $filter, sort: $sort, pagination: $pagination) {
    queryInfo {
      totalCount
    }
    coupons {
      _id
      active
      addedDate
      applicableCategories {
        category
        subcategory
      }
      code
      dispensary
      dispensaryId
      expDate
      fixedDiscountInCents
      numAllowedUses
      numUses
      percentDiscount
      oneUsePerCustomer
      reimbursed
      restrictions {
        minimumPurchase
        minimumPurchaseInCents
        noSpecials
      }
      usedBy
    }
  }
}
    `;

/**
 * __useFilteredCouponsForDispensaryAdminQuery__
 *
 * To run a query within a React component, call `useFilteredCouponsForDispensaryAdminQuery` and pass it any options that fit your needs.
 * When your component renders, `useFilteredCouponsForDispensaryAdminQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFilteredCouponsForDispensaryAdminQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useFilteredCouponsForDispensaryAdminQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlFilteredCouponsForDispensaryAdminQuery, GqlFilteredCouponsForDispensaryAdminQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlFilteredCouponsForDispensaryAdminQuery, GqlFilteredCouponsForDispensaryAdminQueryVariables>(FilteredCouponsForDispensaryAdminDocument, baseOptions);
      }
export function useFilteredCouponsForDispensaryAdminLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlFilteredCouponsForDispensaryAdminQuery, GqlFilteredCouponsForDispensaryAdminQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlFilteredCouponsForDispensaryAdminQuery, GqlFilteredCouponsForDispensaryAdminQueryVariables>(FilteredCouponsForDispensaryAdminDocument, baseOptions);
        }
export type FilteredCouponsForDispensaryAdminQueryHookResult = ReturnType<typeof useFilteredCouponsForDispensaryAdminQuery>;
export type FilteredCouponsForDispensaryAdminLazyQueryHookResult = ReturnType<typeof useFilteredCouponsForDispensaryAdminLazyQuery>;
export type FilteredCouponsForDispensaryAdminQueryResult = ApolloReactCommon.QueryResult<GqlFilteredCouponsForDispensaryAdminQuery, GqlFilteredCouponsForDispensaryAdminQueryVariables>;
export const AdminEnterpriseProductsDocument = gql`
    query AdminEnterpriseProducts($enterpriseId: ID!) {
  enterpriseProducts(enterpriseId: $enterpriseId) {
    products {
      brandId
      brandName
      dispensaryProducts {
        brandId
        brandName
        dispensaryId
        id
        status
      }
      enterpriseProductId
      medicalOnly
      medicalPrices
      name
      options
      prices
      recOnly
      recPrices
      subcategory
      type
    }
  }
}
    `;

/**
 * __useAdminEnterpriseProductsQuery__
 *
 * To run a query within a React component, call `useAdminEnterpriseProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminEnterpriseProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminEnterpriseProductsQuery({
 *   variables: {
 *      enterpriseId: // value for 'enterpriseId'
 *   },
 * });
 */
export function useAdminEnterpriseProductsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAdminEnterpriseProductsQuery, GqlAdminEnterpriseProductsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAdminEnterpriseProductsQuery, GqlAdminEnterpriseProductsQueryVariables>(AdminEnterpriseProductsDocument, baseOptions);
      }
export function useAdminEnterpriseProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAdminEnterpriseProductsQuery, GqlAdminEnterpriseProductsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAdminEnterpriseProductsQuery, GqlAdminEnterpriseProductsQueryVariables>(AdminEnterpriseProductsDocument, baseOptions);
        }
export type AdminEnterpriseProductsQueryHookResult = ReturnType<typeof useAdminEnterpriseProductsQuery>;
export type AdminEnterpriseProductsLazyQueryHookResult = ReturnType<typeof useAdminEnterpriseProductsLazyQuery>;
export type AdminEnterpriseProductsQueryResult = ApolloReactCommon.QueryResult<GqlAdminEnterpriseProductsQuery, GqlAdminEnterpriseProductsQueryVariables>;
export const GetEnterpriseSpecialDocument = gql`
    query GetEnterpriseSpecial($enterpriseSpecialId: ID!) {
  getEnterpriseSpecial(enterpriseSpecialId: $enterpriseSpecialId) {
    _id
    active
    menuDisplayName
    menuDisplayDescription
    menuDisplayImage
    bogoConditionLogicOperator
    bogoConditions {
      _id
      brandId
      brandName
      categoryName
      selectedCategoriesAndSubcategories
      productGroup
      productId
      quantity
      weight
      weightOperator
    }
    bogoRewardLogicOperator
    bogoRewards {
      _id
      brandId
      brandName
      categoryName
      selectedCategoriesAndSubcategories
      dollarDiscount
      productGroup
      productId
      percentDiscount
      quantity
      targetPrice
      weight
    }
    cipher
    clicks
    complete
    createdAt
    createdBy
    description
    descriptionHtml
    discount
    discountedPrices
    discountToCart {
      _id
      enabled
      discountType
      value
    }
    discountPrecedence
    discountStacking
    dispensaryId
    dispensaries
    displayRank
    dollarDiscount
    duplicatedFrom
    earliestStartStamp
    emailSpecial
    endDay
    endStamp
    endTime
    enterpriseId
    enterpriseSpecialId
    excludedProducts {
      _id
      Name
      key
      conditions {
        _id
        Name
        key
      }
      rewards {
        _id
        Name
        key
      }
    }
    heading
    inactiveDispensaries
    isRecurring
    itemsForAPrice {
      _id
      enabled
      value
    }
    latestEndStamp
    localTime
    menuType
    name
    percentDiscount
    productDiscounts
    productGroup
    productGroupRewards
    products
    recurring {
      days
      endDate
      endTime
      setEndDate
      startTime
    }
    redemptionLimit
    scope
    source
    sourceId
    specialRestrictions
    stackingBehavior
    stackingMode
    startDay
    startStamp
    startTime
    specialType
    subject
    targetPrice
    timezone
    totalQuantity {
      enabled
      maxQuantity
      quantity
      quantityOperator
    }
    totalSpend {
      enabled
      maximumSpend
      minimumSpend
      spendOperator
    }
    totalWeight {
      enabled
      weight
      weightOperator
    }
    updatedAt
    updatedBy
    version
  }
}
    `;

/**
 * __useGetEnterpriseSpecialQuery__
 *
 * To run a query within a React component, call `useGetEnterpriseSpecialQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnterpriseSpecialQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnterpriseSpecialQuery({
 *   variables: {
 *      enterpriseSpecialId: // value for 'enterpriseSpecialId'
 *   },
 * });
 */
export function useGetEnterpriseSpecialQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetEnterpriseSpecialQuery, GqlGetEnterpriseSpecialQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetEnterpriseSpecialQuery, GqlGetEnterpriseSpecialQueryVariables>(GetEnterpriseSpecialDocument, baseOptions);
      }
export function useGetEnterpriseSpecialLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetEnterpriseSpecialQuery, GqlGetEnterpriseSpecialQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetEnterpriseSpecialQuery, GqlGetEnterpriseSpecialQueryVariables>(GetEnterpriseSpecialDocument, baseOptions);
        }
export type GetEnterpriseSpecialQueryHookResult = ReturnType<typeof useGetEnterpriseSpecialQuery>;
export type GetEnterpriseSpecialLazyQueryHookResult = ReturnType<typeof useGetEnterpriseSpecialLazyQuery>;
export type GetEnterpriseSpecialQueryResult = ApolloReactCommon.QueryResult<GqlGetEnterpriseSpecialQuery, GqlGetEnterpriseSpecialQueryVariables>;
export const AdminSpecialsProductsDocument = gql`
    query AdminSpecialsProducts($productsFilter: productsFilterInput!, $page: Int, $perPage: Int) {
  filteredProducts(filter: $productsFilter, page: $page, perPage: $perPage) {
    products {
      _id
      brand {
        _id
        id
        description
        name
      }
      brandDescription
      brandId
      brandName
      DispensaryID
      id
      Image
      medicalOnly
      medicalPrices
      Name
      Options
      Prices
      recOnly
      recPrices
      Status
      subcategory
      type
      updatedAt
    }
  }
}
    `;

/**
 * __useAdminSpecialsProductsQuery__
 *
 * To run a query within a React component, call `useAdminSpecialsProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminSpecialsProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminSpecialsProductsQuery({
 *   variables: {
 *      productsFilter: // value for 'productsFilter'
 *      page: // value for 'page'
 *      perPage: // value for 'perPage'
 *   },
 * });
 */
export function useAdminSpecialsProductsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAdminSpecialsProductsQuery, GqlAdminSpecialsProductsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAdminSpecialsProductsQuery, GqlAdminSpecialsProductsQueryVariables>(AdminSpecialsProductsDocument, baseOptions);
      }
export function useAdminSpecialsProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAdminSpecialsProductsQuery, GqlAdminSpecialsProductsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAdminSpecialsProductsQuery, GqlAdminSpecialsProductsQueryVariables>(AdminSpecialsProductsDocument, baseOptions);
        }
export type AdminSpecialsProductsQueryHookResult = ReturnType<typeof useAdminSpecialsProductsQuery>;
export type AdminSpecialsProductsLazyQueryHookResult = ReturnType<typeof useAdminSpecialsProductsLazyQuery>;
export type AdminSpecialsProductsQueryResult = ApolloReactCommon.QueryResult<GqlAdminSpecialsProductsQuery, GqlAdminSpecialsProductsQueryVariables>;
export const GetEnterpriseSpecialsHistoryDocument = gql`
    query GetEnterpriseSpecialsHistory($enterpriseId: ID!, $enterpriseSpecialId: ID!) {
  getEnterpriseSpecialsHistory(
    enterpriseId: $enterpriseId
    enterpriseSpecialId: $enterpriseSpecialId
  ) {
    id
    enterpriseSpecialId
    versions {
      ...enterpriseSpecialData
    }
  }
}
    ${EnterpriseSpecialDataFragmentDoc}`;

/**
 * __useGetEnterpriseSpecialsHistoryQuery__
 *
 * To run a query within a React component, call `useGetEnterpriseSpecialsHistoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnterpriseSpecialsHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnterpriseSpecialsHistoryQuery({
 *   variables: {
 *      enterpriseId: // value for 'enterpriseId'
 *      enterpriseSpecialId: // value for 'enterpriseSpecialId'
 *   },
 * });
 */
export function useGetEnterpriseSpecialsHistoryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetEnterpriseSpecialsHistoryQuery, GqlGetEnterpriseSpecialsHistoryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetEnterpriseSpecialsHistoryQuery, GqlGetEnterpriseSpecialsHistoryQueryVariables>(GetEnterpriseSpecialsHistoryDocument, baseOptions);
      }
export function useGetEnterpriseSpecialsHistoryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetEnterpriseSpecialsHistoryQuery, GqlGetEnterpriseSpecialsHistoryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetEnterpriseSpecialsHistoryQuery, GqlGetEnterpriseSpecialsHistoryQueryVariables>(GetEnterpriseSpecialsHistoryDocument, baseOptions);
        }
export type GetEnterpriseSpecialsHistoryQueryHookResult = ReturnType<typeof useGetEnterpriseSpecialsHistoryQuery>;
export type GetEnterpriseSpecialsHistoryLazyQueryHookResult = ReturnType<typeof useGetEnterpriseSpecialsHistoryLazyQuery>;
export type GetEnterpriseSpecialsHistoryQueryResult = ApolloReactCommon.QueryResult<GqlGetEnterpriseSpecialsHistoryQuery, GqlGetEnterpriseSpecialsHistoryQueryVariables>;
export const GetSpecialsHistoryDocument = gql`
    query GetSpecialsHistory($specialId: ID!) {
  getSpecialsHistory(specialId: $specialId) {
    id
    versions {
      ...specialData
    }
  }
}
    ${SpecialDataFragmentDoc}`;

/**
 * __useGetSpecialsHistoryQuery__
 *
 * To run a query within a React component, call `useGetSpecialsHistoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSpecialsHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSpecialsHistoryQuery({
 *   variables: {
 *      specialId: // value for 'specialId'
 *   },
 * });
 */
export function useGetSpecialsHistoryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetSpecialsHistoryQuery, GqlGetSpecialsHistoryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetSpecialsHistoryQuery, GqlGetSpecialsHistoryQueryVariables>(GetSpecialsHistoryDocument, baseOptions);
      }
export function useGetSpecialsHistoryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetSpecialsHistoryQuery, GqlGetSpecialsHistoryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetSpecialsHistoryQuery, GqlGetSpecialsHistoryQueryVariables>(GetSpecialsHistoryDocument, baseOptions);
        }
export type GetSpecialsHistoryQueryHookResult = ReturnType<typeof useGetSpecialsHistoryQuery>;
export type GetSpecialsHistoryLazyQueryHookResult = ReturnType<typeof useGetSpecialsHistoryLazyQuery>;
export type GetSpecialsHistoryQueryResult = ApolloReactCommon.QueryResult<GqlGetSpecialsHistoryQuery, GqlGetSpecialsHistoryQueryVariables>;
export const CreatePlusApiKeyV2Document = gql`
    mutation CreatePlusApiKeyV2($dispensaryId: String!, $keyType: PlusApiKeyType!) {
  createPlusApiKeyV2(dispensaryId: $dispensaryId, keyType: $keyType) {
    id
  }
}
    `;
export type GqlCreatePlusApiKeyV2MutationFn = ApolloReactCommon.MutationFunction<GqlCreatePlusApiKeyV2Mutation, GqlCreatePlusApiKeyV2MutationVariables>;

/**
 * __useCreatePlusApiKeyV2Mutation__
 *
 * To run a mutation, you first call `useCreatePlusApiKeyV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePlusApiKeyV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPlusApiKeyV2Mutation, { data, loading, error }] = useCreatePlusApiKeyV2Mutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      keyType: // value for 'keyType'
 *   },
 * });
 */
export function useCreatePlusApiKeyV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreatePlusApiKeyV2Mutation, GqlCreatePlusApiKeyV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreatePlusApiKeyV2Mutation, GqlCreatePlusApiKeyV2MutationVariables>(CreatePlusApiKeyV2Document, baseOptions);
      }
export type CreatePlusApiKeyV2MutationHookResult = ReturnType<typeof useCreatePlusApiKeyV2Mutation>;
export type CreatePlusApiKeyV2MutationResult = ApolloReactCommon.MutationResult<GqlCreatePlusApiKeyV2Mutation>;
export type CreatePlusApiKeyV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreatePlusApiKeyV2Mutation, GqlCreatePlusApiKeyV2MutationVariables>;
export const CreatePlusEnterpriseApiKeyDocument = gql`
    mutation CreatePlusEnterpriseApiKey($enterpriseId: String!, $keyType: PlusApiKeyType!) {
  createPlusEnterpriseApiKey(enterpriseId: $enterpriseId, keyType: $keyType) {
    id
  }
}
    `;
export type GqlCreatePlusEnterpriseApiKeyMutationFn = ApolloReactCommon.MutationFunction<GqlCreatePlusEnterpriseApiKeyMutation, GqlCreatePlusEnterpriseApiKeyMutationVariables>;

/**
 * __useCreatePlusEnterpriseApiKeyMutation__
 *
 * To run a mutation, you first call `useCreatePlusEnterpriseApiKeyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePlusEnterpriseApiKeyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPlusEnterpriseApiKeyMutation, { data, loading, error }] = useCreatePlusEnterpriseApiKeyMutation({
 *   variables: {
 *      enterpriseId: // value for 'enterpriseId'
 *      keyType: // value for 'keyType'
 *   },
 * });
 */
export function useCreatePlusEnterpriseApiKeyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreatePlusEnterpriseApiKeyMutation, GqlCreatePlusEnterpriseApiKeyMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreatePlusEnterpriseApiKeyMutation, GqlCreatePlusEnterpriseApiKeyMutationVariables>(CreatePlusEnterpriseApiKeyDocument, baseOptions);
      }
export type CreatePlusEnterpriseApiKeyMutationHookResult = ReturnType<typeof useCreatePlusEnterpriseApiKeyMutation>;
export type CreatePlusEnterpriseApiKeyMutationResult = ApolloReactCommon.MutationResult<GqlCreatePlusEnterpriseApiKeyMutation>;
export type CreatePlusEnterpriseApiKeyMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreatePlusEnterpriseApiKeyMutation, GqlCreatePlusEnterpriseApiKeyMutationVariables>;
export const ExpirePlusApiKeyDocument = gql`
    mutation ExpirePlusApiKey($id: String!) {
  expirePlusApiKey(id: $id) {
    id
  }
}
    `;
export type GqlExpirePlusApiKeyMutationFn = ApolloReactCommon.MutationFunction<GqlExpirePlusApiKeyMutation, GqlExpirePlusApiKeyMutationVariables>;

/**
 * __useExpirePlusApiKeyMutation__
 *
 * To run a mutation, you first call `useExpirePlusApiKeyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useExpirePlusApiKeyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [expirePlusApiKeyMutation, { data, loading, error }] = useExpirePlusApiKeyMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useExpirePlusApiKeyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlExpirePlusApiKeyMutation, GqlExpirePlusApiKeyMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlExpirePlusApiKeyMutation, GqlExpirePlusApiKeyMutationVariables>(ExpirePlusApiKeyDocument, baseOptions);
      }
export type ExpirePlusApiKeyMutationHookResult = ReturnType<typeof useExpirePlusApiKeyMutation>;
export type ExpirePlusApiKeyMutationResult = ApolloReactCommon.MutationResult<GqlExpirePlusApiKeyMutation>;
export type ExpirePlusApiKeyMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlExpirePlusApiKeyMutation, GqlExpirePlusApiKeyMutationVariables>;
export const ExpirePlusEnterpriseApiKeyDocument = gql`
    mutation ExpirePlusEnterpriseApiKey($id: String!) {
  expirePlusEnterpriseApiKey(id: $id) {
    id
  }
}
    `;
export type GqlExpirePlusEnterpriseApiKeyMutationFn = ApolloReactCommon.MutationFunction<GqlExpirePlusEnterpriseApiKeyMutation, GqlExpirePlusEnterpriseApiKeyMutationVariables>;

/**
 * __useExpirePlusEnterpriseApiKeyMutation__
 *
 * To run a mutation, you first call `useExpirePlusEnterpriseApiKeyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useExpirePlusEnterpriseApiKeyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [expirePlusEnterpriseApiKeyMutation, { data, loading, error }] = useExpirePlusEnterpriseApiKeyMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useExpirePlusEnterpriseApiKeyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlExpirePlusEnterpriseApiKeyMutation, GqlExpirePlusEnterpriseApiKeyMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlExpirePlusEnterpriseApiKeyMutation, GqlExpirePlusEnterpriseApiKeyMutationVariables>(ExpirePlusEnterpriseApiKeyDocument, baseOptions);
      }
export type ExpirePlusEnterpriseApiKeyMutationHookResult = ReturnType<typeof useExpirePlusEnterpriseApiKeyMutation>;
export type ExpirePlusEnterpriseApiKeyMutationResult = ApolloReactCommon.MutationResult<GqlExpirePlusEnterpriseApiKeyMutation>;
export type ExpirePlusEnterpriseApiKeyMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlExpirePlusEnterpriseApiKeyMutation, GqlExpirePlusEnterpriseApiKeyMutationVariables>;
export const GetEnterpriseIdForApiKeysDocument = gql`
    query GetEnterpriseIdForApiKeys($dispensaryFilter: dispensariesFilterInput!) {
  filteredDispensaries(filter: $dispensaryFilter) {
    retailer {
      enterpriseId
    }
  }
}
    `;

/**
 * __useGetEnterpriseIdForApiKeysQuery__
 *
 * To run a query within a React component, call `useGetEnterpriseIdForApiKeysQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnterpriseIdForApiKeysQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnterpriseIdForApiKeysQuery({
 *   variables: {
 *      dispensaryFilter: // value for 'dispensaryFilter'
 *   },
 * });
 */
export function useGetEnterpriseIdForApiKeysQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetEnterpriseIdForApiKeysQuery, GqlGetEnterpriseIdForApiKeysQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetEnterpriseIdForApiKeysQuery, GqlGetEnterpriseIdForApiKeysQueryVariables>(GetEnterpriseIdForApiKeysDocument, baseOptions);
      }
export function useGetEnterpriseIdForApiKeysLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetEnterpriseIdForApiKeysQuery, GqlGetEnterpriseIdForApiKeysQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetEnterpriseIdForApiKeysQuery, GqlGetEnterpriseIdForApiKeysQueryVariables>(GetEnterpriseIdForApiKeysDocument, baseOptions);
        }
export type GetEnterpriseIdForApiKeysQueryHookResult = ReturnType<typeof useGetEnterpriseIdForApiKeysQuery>;
export type GetEnterpriseIdForApiKeysLazyQueryHookResult = ReturnType<typeof useGetEnterpriseIdForApiKeysLazyQuery>;
export type GetEnterpriseIdForApiKeysQueryResult = ApolloReactCommon.QueryResult<GqlGetEnterpriseIdForApiKeysQuery, GqlGetEnterpriseIdForApiKeysQueryVariables>;
export const GetPlusApiKeysDocument = gql`
    query GetPlusApiKeys($dispensaryId: String!) {
  getPlusApiKeys(dispensaryId: $dispensaryId) {
    createdAt
    fresh
    id
    key
    keyType
    lastRequestAt
  }
}
    `;

/**
 * __useGetPlusApiKeysQuery__
 *
 * To run a query within a React component, call `useGetPlusApiKeysQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPlusApiKeysQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPlusApiKeysQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useGetPlusApiKeysQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetPlusApiKeysQuery, GqlGetPlusApiKeysQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetPlusApiKeysQuery, GqlGetPlusApiKeysQueryVariables>(GetPlusApiKeysDocument, baseOptions);
      }
export function useGetPlusApiKeysLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetPlusApiKeysQuery, GqlGetPlusApiKeysQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetPlusApiKeysQuery, GqlGetPlusApiKeysQueryVariables>(GetPlusApiKeysDocument, baseOptions);
        }
export type GetPlusApiKeysQueryHookResult = ReturnType<typeof useGetPlusApiKeysQuery>;
export type GetPlusApiKeysLazyQueryHookResult = ReturnType<typeof useGetPlusApiKeysLazyQuery>;
export type GetPlusApiKeysQueryResult = ApolloReactCommon.QueryResult<GqlGetPlusApiKeysQuery, GqlGetPlusApiKeysQueryVariables>;
export const GetPlusEnterpriseApiKeysDocument = gql`
    query GetPlusEnterpriseApiKeys($enterpriseId: String!) {
  getPlusEnterpriseApiKeys(enterpriseId: $enterpriseId) {
    createdAt
    fresh
    id
    key
    keyType
    lastRequestAt
  }
}
    `;

/**
 * __useGetPlusEnterpriseApiKeysQuery__
 *
 * To run a query within a React component, call `useGetPlusEnterpriseApiKeysQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPlusEnterpriseApiKeysQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPlusEnterpriseApiKeysQuery({
 *   variables: {
 *      enterpriseId: // value for 'enterpriseId'
 *   },
 * });
 */
export function useGetPlusEnterpriseApiKeysQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetPlusEnterpriseApiKeysQuery, GqlGetPlusEnterpriseApiKeysQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetPlusEnterpriseApiKeysQuery, GqlGetPlusEnterpriseApiKeysQueryVariables>(GetPlusEnterpriseApiKeysDocument, baseOptions);
      }
export function useGetPlusEnterpriseApiKeysLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetPlusEnterpriseApiKeysQuery, GqlGetPlusEnterpriseApiKeysQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetPlusEnterpriseApiKeysQuery, GqlGetPlusEnterpriseApiKeysQueryVariables>(GetPlusEnterpriseApiKeysDocument, baseOptions);
        }
export type GetPlusEnterpriseApiKeysQueryHookResult = ReturnType<typeof useGetPlusEnterpriseApiKeysQuery>;
export type GetPlusEnterpriseApiKeysLazyQueryHookResult = ReturnType<typeof useGetPlusEnterpriseApiKeysLazyQuery>;
export type GetPlusEnterpriseApiKeysQueryResult = ApolloReactCommon.QueryResult<GqlGetPlusEnterpriseApiKeysQuery, GqlGetPlusEnterpriseApiKeysQueryVariables>;
export const GetInvoicePdfDocument = gql`
    query GetInvoicePDF($id: String!) {
  getInvoicePdf(id: $id) {
    downloadUrl
  }
}
    `;

/**
 * __useGetInvoicePdfQuery__
 *
 * To run a query within a React component, call `useGetInvoicePdfQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInvoicePdfQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInvoicePdfQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetInvoicePdfQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetInvoicePdfQuery, GqlGetInvoicePdfQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetInvoicePdfQuery, GqlGetInvoicePdfQueryVariables>(GetInvoicePdfDocument, baseOptions);
      }
export function useGetInvoicePdfLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetInvoicePdfQuery, GqlGetInvoicePdfQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetInvoicePdfQuery, GqlGetInvoicePdfQueryVariables>(GetInvoicePdfDocument, baseOptions);
        }
export type GetInvoicePdfQueryHookResult = ReturnType<typeof useGetInvoicePdfQuery>;
export type GetInvoicePdfLazyQueryHookResult = ReturnType<typeof useGetInvoicePdfLazyQuery>;
export type GetInvoicePdfQueryResult = ApolloReactCommon.QueryResult<GqlGetInvoicePdfQuery, GqlGetInvoicePdfQueryVariables>;
export const EditCustomerV2Document = gql`
    mutation EditCustomerV2($billingContactEmails: [String!], $billingNotificationEnabled: Boolean, $chargebeeCustomerId: String!) {
  editCustomerV2(
    billingContactEmails: $billingContactEmails
    billingNotificationEnabled: $billingNotificationEnabled
    chargebeeCustomerId: $chargebeeCustomerId
  ) {
    message
    success
  }
}
    `;
export type GqlEditCustomerV2MutationFn = ApolloReactCommon.MutationFunction<GqlEditCustomerV2Mutation, GqlEditCustomerV2MutationVariables>;

/**
 * __useEditCustomerV2Mutation__
 *
 * To run a mutation, you first call `useEditCustomerV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditCustomerV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editCustomerV2Mutation, { data, loading, error }] = useEditCustomerV2Mutation({
 *   variables: {
 *      billingContactEmails: // value for 'billingContactEmails'
 *      billingNotificationEnabled: // value for 'billingNotificationEnabled'
 *      chargebeeCustomerId: // value for 'chargebeeCustomerId'
 *   },
 * });
 */
export function useEditCustomerV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlEditCustomerV2Mutation, GqlEditCustomerV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlEditCustomerV2Mutation, GqlEditCustomerV2MutationVariables>(EditCustomerV2Document, baseOptions);
      }
export type EditCustomerV2MutationHookResult = ReturnType<typeof useEditCustomerV2Mutation>;
export type EditCustomerV2MutationResult = ApolloReactCommon.MutationResult<GqlEditCustomerV2Mutation>;
export type EditCustomerV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlEditCustomerV2Mutation, GqlEditCustomerV2MutationVariables>;
export const GetEnterpriseBillingVersionDocument = gql`
    query GetEnterpriseBillingVersion($dispensaryId: String!) {
  filteredDispensaries(filter: {cNameOrID: $dispensaryId}) {
    retailer {
      id
      enterprise {
        id
        billingVersion
      }
    }
  }
}
    `;

/**
 * __useGetEnterpriseBillingVersionQuery__
 *
 * To run a query within a React component, call `useGetEnterpriseBillingVersionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnterpriseBillingVersionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnterpriseBillingVersionQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useGetEnterpriseBillingVersionQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetEnterpriseBillingVersionQuery, GqlGetEnterpriseBillingVersionQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetEnterpriseBillingVersionQuery, GqlGetEnterpriseBillingVersionQueryVariables>(GetEnterpriseBillingVersionDocument, baseOptions);
      }
export function useGetEnterpriseBillingVersionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetEnterpriseBillingVersionQuery, GqlGetEnterpriseBillingVersionQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetEnterpriseBillingVersionQuery, GqlGetEnterpriseBillingVersionQueryVariables>(GetEnterpriseBillingVersionDocument, baseOptions);
        }
export type GetEnterpriseBillingVersionQueryHookResult = ReturnType<typeof useGetEnterpriseBillingVersionQuery>;
export type GetEnterpriseBillingVersionLazyQueryHookResult = ReturnType<typeof useGetEnterpriseBillingVersionLazyQuery>;
export type GetEnterpriseBillingVersionQueryResult = ApolloReactCommon.QueryResult<GqlGetEnterpriseBillingVersionQuery, GqlGetEnterpriseBillingVersionQueryVariables>;
export const AddBankPaymentMethodV2Document = gql`
    mutation AddBankPaymentMethodV2($chargebeeCustomerId: String!, $publicToken: String!, $accountId: String!) {
  addBankPaymentMethodV2(
    chargebeeCustomerId: $chargebeeCustomerId
    publicToken: $publicToken
    accountId: $accountId
  ) {
    success
    message
  }
}
    `;
export type GqlAddBankPaymentMethodV2MutationFn = ApolloReactCommon.MutationFunction<GqlAddBankPaymentMethodV2Mutation, GqlAddBankPaymentMethodV2MutationVariables>;

/**
 * __useAddBankPaymentMethodV2Mutation__
 *
 * To run a mutation, you first call `useAddBankPaymentMethodV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddBankPaymentMethodV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addBankPaymentMethodV2Mutation, { data, loading, error }] = useAddBankPaymentMethodV2Mutation({
 *   variables: {
 *      chargebeeCustomerId: // value for 'chargebeeCustomerId'
 *      publicToken: // value for 'publicToken'
 *      accountId: // value for 'accountId'
 *   },
 * });
 */
export function useAddBankPaymentMethodV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlAddBankPaymentMethodV2Mutation, GqlAddBankPaymentMethodV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlAddBankPaymentMethodV2Mutation, GqlAddBankPaymentMethodV2MutationVariables>(AddBankPaymentMethodV2Document, baseOptions);
      }
export type AddBankPaymentMethodV2MutationHookResult = ReturnType<typeof useAddBankPaymentMethodV2Mutation>;
export type AddBankPaymentMethodV2MutationResult = ApolloReactCommon.MutationResult<GqlAddBankPaymentMethodV2Mutation>;
export type AddBankPaymentMethodV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlAddBankPaymentMethodV2Mutation, GqlAddBankPaymentMethodV2MutationVariables>;
export const AddPaymentMethodV2Document = gql`
    mutation AddPaymentMethodV2($chargebeeCustomerId: String!, $token: String!) {
  addPaymentMethodV2(chargebeeCustomerId: $chargebeeCustomerId, token: $token) {
    message
    success
  }
}
    `;
export type GqlAddPaymentMethodV2MutationFn = ApolloReactCommon.MutationFunction<GqlAddPaymentMethodV2Mutation, GqlAddPaymentMethodV2MutationVariables>;

/**
 * __useAddPaymentMethodV2Mutation__
 *
 * To run a mutation, you first call `useAddPaymentMethodV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddPaymentMethodV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addPaymentMethodV2Mutation, { data, loading, error }] = useAddPaymentMethodV2Mutation({
 *   variables: {
 *      chargebeeCustomerId: // value for 'chargebeeCustomerId'
 *      token: // value for 'token'
 *   },
 * });
 */
export function useAddPaymentMethodV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlAddPaymentMethodV2Mutation, GqlAddPaymentMethodV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlAddPaymentMethodV2Mutation, GqlAddPaymentMethodV2MutationVariables>(AddPaymentMethodV2Document, baseOptions);
      }
export type AddPaymentMethodV2MutationHookResult = ReturnType<typeof useAddPaymentMethodV2Mutation>;
export type AddPaymentMethodV2MutationResult = ApolloReactCommon.MutationResult<GqlAddPaymentMethodV2Mutation>;
export type AddPaymentMethodV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlAddPaymentMethodV2Mutation, GqlAddPaymentMethodV2MutationVariables>;
export const AddRetailersToBillingGroupDocument = gql`
    mutation AddRetailersToBillingGroup($retailerIds: [ID]!) {
  associateRetailers(retailerIds: $retailerIds) {
    success
    message
  }
}
    `;
export type GqlAddRetailersToBillingGroupMutationFn = ApolloReactCommon.MutationFunction<GqlAddRetailersToBillingGroupMutation, GqlAddRetailersToBillingGroupMutationVariables>;

/**
 * __useAddRetailersToBillingGroupMutation__
 *
 * To run a mutation, you first call `useAddRetailersToBillingGroupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddRetailersToBillingGroupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addRetailersToBillingGroupMutation, { data, loading, error }] = useAddRetailersToBillingGroupMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *   },
 * });
 */
export function useAddRetailersToBillingGroupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlAddRetailersToBillingGroupMutation, GqlAddRetailersToBillingGroupMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlAddRetailersToBillingGroupMutation, GqlAddRetailersToBillingGroupMutationVariables>(AddRetailersToBillingGroupDocument, baseOptions);
      }
export type AddRetailersToBillingGroupMutationHookResult = ReturnType<typeof useAddRetailersToBillingGroupMutation>;
export type AddRetailersToBillingGroupMutationResult = ApolloReactCommon.MutationResult<GqlAddRetailersToBillingGroupMutation>;
export type AddRetailersToBillingGroupMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlAddRetailersToBillingGroupMutation, GqlAddRetailersToBillingGroupMutationVariables>;
export const DeleteSubscriptionDocument = gql`
    mutation DeleteSubscription($retailerIds: [ID]!) {
  deleteSubscription(retailerIds: $retailerIds) {
    success
    message
  }
}
    `;
export type GqlDeleteSubscriptionMutationFn = ApolloReactCommon.MutationFunction<GqlDeleteSubscriptionMutation, GqlDeleteSubscriptionMutationVariables>;

/**
 * __useDeleteSubscriptionMutation__
 *
 * To run a mutation, you first call `useDeleteSubscriptionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSubscriptionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSubscriptionMutation, { data, loading, error }] = useDeleteSubscriptionMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *   },
 * });
 */
export function useDeleteSubscriptionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteSubscriptionMutation, GqlDeleteSubscriptionMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteSubscriptionMutation, GqlDeleteSubscriptionMutationVariables>(DeleteSubscriptionDocument, baseOptions);
      }
export type DeleteSubscriptionMutationHookResult = ReturnType<typeof useDeleteSubscriptionMutation>;
export type DeleteSubscriptionMutationResult = ApolloReactCommon.MutationResult<GqlDeleteSubscriptionMutation>;
export type DeleteSubscriptionMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteSubscriptionMutation, GqlDeleteSubscriptionMutationVariables>;
export const PauseSubscriptionDocument = gql`
    mutation PauseSubscription($retailerIds: [ID]!) {
  pauseSubscription(retailerIds: $retailerIds) {
    success
    message
  }
}
    `;
export type GqlPauseSubscriptionMutationFn = ApolloReactCommon.MutationFunction<GqlPauseSubscriptionMutation, GqlPauseSubscriptionMutationVariables>;

/**
 * __usePauseSubscriptionMutation__
 *
 * To run a mutation, you first call `usePauseSubscriptionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePauseSubscriptionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [pauseSubscriptionMutation, { data, loading, error }] = usePauseSubscriptionMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *   },
 * });
 */
export function usePauseSubscriptionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlPauseSubscriptionMutation, GqlPauseSubscriptionMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlPauseSubscriptionMutation, GqlPauseSubscriptionMutationVariables>(PauseSubscriptionDocument, baseOptions);
      }
export type PauseSubscriptionMutationHookResult = ReturnType<typeof usePauseSubscriptionMutation>;
export type PauseSubscriptionMutationResult = ApolloReactCommon.MutationResult<GqlPauseSubscriptionMutation>;
export type PauseSubscriptionMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlPauseSubscriptionMutation, GqlPauseSubscriptionMutationVariables>;
export const RemoveRetailersFromBillingGroupDocument = gql`
    mutation RemoveRetailersFromBillingGroup($retailerIds: [ID]!) {
  dissociateRetailers(retailerIds: $retailerIds) {
    success
    message
  }
}
    `;
export type GqlRemoveRetailersFromBillingGroupMutationFn = ApolloReactCommon.MutationFunction<GqlRemoveRetailersFromBillingGroupMutation, GqlRemoveRetailersFromBillingGroupMutationVariables>;

/**
 * __useRemoveRetailersFromBillingGroupMutation__
 *
 * To run a mutation, you first call `useRemoveRetailersFromBillingGroupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveRetailersFromBillingGroupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeRetailersFromBillingGroupMutation, { data, loading, error }] = useRemoveRetailersFromBillingGroupMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *   },
 * });
 */
export function useRemoveRetailersFromBillingGroupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlRemoveRetailersFromBillingGroupMutation, GqlRemoveRetailersFromBillingGroupMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlRemoveRetailersFromBillingGroupMutation, GqlRemoveRetailersFromBillingGroupMutationVariables>(RemoveRetailersFromBillingGroupDocument, baseOptions);
      }
export type RemoveRetailersFromBillingGroupMutationHookResult = ReturnType<typeof useRemoveRetailersFromBillingGroupMutation>;
export type RemoveRetailersFromBillingGroupMutationResult = ApolloReactCommon.MutationResult<GqlRemoveRetailersFromBillingGroupMutation>;
export type RemoveRetailersFromBillingGroupMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlRemoveRetailersFromBillingGroupMutation, GqlRemoveRetailersFromBillingGroupMutationVariables>;
export const ResumeSubscriptionDocument = gql`
    mutation ResumeSubscription($retailerIds: [ID]!) {
  resumeSubscription(retailerIds: $retailerIds) {
    success
    message
  }
}
    `;
export type GqlResumeSubscriptionMutationFn = ApolloReactCommon.MutationFunction<GqlResumeSubscriptionMutation, GqlResumeSubscriptionMutationVariables>;

/**
 * __useResumeSubscriptionMutation__
 *
 * To run a mutation, you first call `useResumeSubscriptionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResumeSubscriptionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resumeSubscriptionMutation, { data, loading, error }] = useResumeSubscriptionMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *   },
 * });
 */
export function useResumeSubscriptionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlResumeSubscriptionMutation, GqlResumeSubscriptionMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlResumeSubscriptionMutation, GqlResumeSubscriptionMutationVariables>(ResumeSubscriptionDocument, baseOptions);
      }
export type ResumeSubscriptionMutationHookResult = ReturnType<typeof useResumeSubscriptionMutation>;
export type ResumeSubscriptionMutationResult = ApolloReactCommon.MutationResult<GqlResumeSubscriptionMutation>;
export type ResumeSubscriptionMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlResumeSubscriptionMutation, GqlResumeSubscriptionMutationVariables>;
export const SetupRetailerBankPaymentMethodDocument = gql`
    mutation SetupRetailerBankPaymentMethod($retailerIds: [ID]!, $accountId: String!, $token: String!) {
  setupRetailerBankPaymentMethod(
    retailerIds: $retailerIds
    accountId: $accountId
    token: $token
  ) {
    success
    message
  }
}
    `;
export type GqlSetupRetailerBankPaymentMethodMutationFn = ApolloReactCommon.MutationFunction<GqlSetupRetailerBankPaymentMethodMutation, GqlSetupRetailerBankPaymentMethodMutationVariables>;

/**
 * __useSetupRetailerBankPaymentMethodMutation__
 *
 * To run a mutation, you first call `useSetupRetailerBankPaymentMethodMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetupRetailerBankPaymentMethodMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setupRetailerBankPaymentMethodMutation, { data, loading, error }] = useSetupRetailerBankPaymentMethodMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *      accountId: // value for 'accountId'
 *      token: // value for 'token'
 *   },
 * });
 */
export function useSetupRetailerBankPaymentMethodMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSetupRetailerBankPaymentMethodMutation, GqlSetupRetailerBankPaymentMethodMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSetupRetailerBankPaymentMethodMutation, GqlSetupRetailerBankPaymentMethodMutationVariables>(SetupRetailerBankPaymentMethodDocument, baseOptions);
      }
export type SetupRetailerBankPaymentMethodMutationHookResult = ReturnType<typeof useSetupRetailerBankPaymentMethodMutation>;
export type SetupRetailerBankPaymentMethodMutationResult = ApolloReactCommon.MutationResult<GqlSetupRetailerBankPaymentMethodMutation>;
export type SetupRetailerBankPaymentMethodMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSetupRetailerBankPaymentMethodMutation, GqlSetupRetailerBankPaymentMethodMutationVariables>;
export const SetupRetailerCreditPaymentMethodDocument = gql`
    mutation SetupRetailerCreditPaymentMethod($retailerIds: [ID]!, $token: String!) {
  setupRetailerCreditPaymentMethod(retailerIds: $retailerIds, token: $token) {
    success
    message
  }
}
    `;
export type GqlSetupRetailerCreditPaymentMethodMutationFn = ApolloReactCommon.MutationFunction<GqlSetupRetailerCreditPaymentMethodMutation, GqlSetupRetailerCreditPaymentMethodMutationVariables>;

/**
 * __useSetupRetailerCreditPaymentMethodMutation__
 *
 * To run a mutation, you first call `useSetupRetailerCreditPaymentMethodMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetupRetailerCreditPaymentMethodMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setupRetailerCreditPaymentMethodMutation, { data, loading, error }] = useSetupRetailerCreditPaymentMethodMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *      token: // value for 'token'
 *   },
 * });
 */
export function useSetupRetailerCreditPaymentMethodMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSetupRetailerCreditPaymentMethodMutation, GqlSetupRetailerCreditPaymentMethodMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSetupRetailerCreditPaymentMethodMutation, GqlSetupRetailerCreditPaymentMethodMutationVariables>(SetupRetailerCreditPaymentMethodDocument, baseOptions);
      }
export type SetupRetailerCreditPaymentMethodMutationHookResult = ReturnType<typeof useSetupRetailerCreditPaymentMethodMutation>;
export type SetupRetailerCreditPaymentMethodMutationResult = ApolloReactCommon.MutationResult<GqlSetupRetailerCreditPaymentMethodMutation>;
export type SetupRetailerCreditPaymentMethodMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSetupRetailerCreditPaymentMethodMutation, GqlSetupRetailerCreditPaymentMethodMutationVariables>;
export const UpdateBillingNotificationsDocument = gql`
    mutation UpdateBillingNotifications($retailerIds: [ID]!, $billingContactEmails: [String]!, $billingNotificationEnabled: Boolean!) {
  updateBillingNotifications(
    retailerIds: $retailerIds
    billingContactEmails: $billingContactEmails
    billingNotificationEnabled: $billingNotificationEnabled
  ) {
    success
    message
  }
}
    `;
export type GqlUpdateBillingNotificationsMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateBillingNotificationsMutation, GqlUpdateBillingNotificationsMutationVariables>;

/**
 * __useUpdateBillingNotificationsMutation__
 *
 * To run a mutation, you first call `useUpdateBillingNotificationsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBillingNotificationsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBillingNotificationsMutation, { data, loading, error }] = useUpdateBillingNotificationsMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *      billingContactEmails: // value for 'billingContactEmails'
 *      billingNotificationEnabled: // value for 'billingNotificationEnabled'
 *   },
 * });
 */
export function useUpdateBillingNotificationsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateBillingNotificationsMutation, GqlUpdateBillingNotificationsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateBillingNotificationsMutation, GqlUpdateBillingNotificationsMutationVariables>(UpdateBillingNotificationsDocument, baseOptions);
      }
export type UpdateBillingNotificationsMutationHookResult = ReturnType<typeof useUpdateBillingNotificationsMutation>;
export type UpdateBillingNotificationsMutationResult = ApolloReactCommon.MutationResult<GqlUpdateBillingNotificationsMutation>;
export type UpdateBillingNotificationsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateBillingNotificationsMutation, GqlUpdateBillingNotificationsMutationVariables>;
export const UpdateChargebeeSubscriptionDocument = gql`
    mutation UpdateChargebeeSubscription($billingPeriod: BillingPeriod, $chargebeeSubscriptionId: String!, $endFreeTrial: Boolean, $freeTrialEndDate: Int, $manualPayments: Boolean, $pauseSubscription: Boolean, $priceInCents: Int) {
  updateChargebeeSubscription(
    billingPeriod: $billingPeriod
    chargebeeSubscriptionId: $chargebeeSubscriptionId
    endFreeTrial: $endFreeTrial
    freeTrialEndDate: $freeTrialEndDate
    manualPayments: $manualPayments
    pauseSubscription: $pauseSubscription
    priceInCents: $priceInCents
  ) {
    message
    success
  }
}
    `;
export type GqlUpdateChargebeeSubscriptionMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateChargebeeSubscriptionMutation, GqlUpdateChargebeeSubscriptionMutationVariables>;

/**
 * __useUpdateChargebeeSubscriptionMutation__
 *
 * To run a mutation, you first call `useUpdateChargebeeSubscriptionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateChargebeeSubscriptionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateChargebeeSubscriptionMutation, { data, loading, error }] = useUpdateChargebeeSubscriptionMutation({
 *   variables: {
 *      billingPeriod: // value for 'billingPeriod'
 *      chargebeeSubscriptionId: // value for 'chargebeeSubscriptionId'
 *      endFreeTrial: // value for 'endFreeTrial'
 *      freeTrialEndDate: // value for 'freeTrialEndDate'
 *      manualPayments: // value for 'manualPayments'
 *      pauseSubscription: // value for 'pauseSubscription'
 *      priceInCents: // value for 'priceInCents'
 *   },
 * });
 */
export function useUpdateChargebeeSubscriptionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateChargebeeSubscriptionMutation, GqlUpdateChargebeeSubscriptionMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateChargebeeSubscriptionMutation, GqlUpdateChargebeeSubscriptionMutationVariables>(UpdateChargebeeSubscriptionDocument, baseOptions);
      }
export type UpdateChargebeeSubscriptionMutationHookResult = ReturnType<typeof useUpdateChargebeeSubscriptionMutation>;
export type UpdateChargebeeSubscriptionMutationResult = ApolloReactCommon.MutationResult<GqlUpdateChargebeeSubscriptionMutation>;
export type UpdateChargebeeSubscriptionMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateChargebeeSubscriptionMutation, GqlUpdateChargebeeSubscriptionMutationVariables>;
export const UpdateSubscriptionBillingPeriodDocument = gql`
    mutation UpdateSubscriptionBillingPeriod($retailerIds: [ID]!, $billingPeriod: BillingPeriod!) {
  updateSubscriptionBillingPeriod(
    retailerIds: $retailerIds
    billingPeriod: $billingPeriod
  ) {
    success
    message
  }
}
    `;
export type GqlUpdateSubscriptionBillingPeriodMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateSubscriptionBillingPeriodMutation, GqlUpdateSubscriptionBillingPeriodMutationVariables>;

/**
 * __useUpdateSubscriptionBillingPeriodMutation__
 *
 * To run a mutation, you first call `useUpdateSubscriptionBillingPeriodMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSubscriptionBillingPeriodMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSubscriptionBillingPeriodMutation, { data, loading, error }] = useUpdateSubscriptionBillingPeriodMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *      billingPeriod: // value for 'billingPeriod'
 *   },
 * });
 */
export function useUpdateSubscriptionBillingPeriodMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateSubscriptionBillingPeriodMutation, GqlUpdateSubscriptionBillingPeriodMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateSubscriptionBillingPeriodMutation, GqlUpdateSubscriptionBillingPeriodMutationVariables>(UpdateSubscriptionBillingPeriodDocument, baseOptions);
      }
export type UpdateSubscriptionBillingPeriodMutationHookResult = ReturnType<typeof useUpdateSubscriptionBillingPeriodMutation>;
export type UpdateSubscriptionBillingPeriodMutationResult = ApolloReactCommon.MutationResult<GqlUpdateSubscriptionBillingPeriodMutation>;
export type UpdateSubscriptionBillingPeriodMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateSubscriptionBillingPeriodMutation, GqlUpdateSubscriptionBillingPeriodMutationVariables>;
export const UpdateSubscriptionManualPaymentsDocument = gql`
    mutation UpdateSubscriptionManualPayments($retailerIds: [ID]!, $manualPayments: Boolean!) {
  updateSubscriptionManualPayments(
    retailerIds: $retailerIds
    manualPayments: $manualPayments
  ) {
    success
    message
  }
}
    `;
export type GqlUpdateSubscriptionManualPaymentsMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateSubscriptionManualPaymentsMutation, GqlUpdateSubscriptionManualPaymentsMutationVariables>;

/**
 * __useUpdateSubscriptionManualPaymentsMutation__
 *
 * To run a mutation, you first call `useUpdateSubscriptionManualPaymentsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSubscriptionManualPaymentsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSubscriptionManualPaymentsMutation, { data, loading, error }] = useUpdateSubscriptionManualPaymentsMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *      manualPayments: // value for 'manualPayments'
 *   },
 * });
 */
export function useUpdateSubscriptionManualPaymentsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateSubscriptionManualPaymentsMutation, GqlUpdateSubscriptionManualPaymentsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateSubscriptionManualPaymentsMutation, GqlUpdateSubscriptionManualPaymentsMutationVariables>(UpdateSubscriptionManualPaymentsDocument, baseOptions);
      }
export type UpdateSubscriptionManualPaymentsMutationHookResult = ReturnType<typeof useUpdateSubscriptionManualPaymentsMutation>;
export type UpdateSubscriptionManualPaymentsMutationResult = ApolloReactCommon.MutationResult<GqlUpdateSubscriptionManualPaymentsMutation>;
export type UpdateSubscriptionManualPaymentsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateSubscriptionManualPaymentsMutation, GqlUpdateSubscriptionManualPaymentsMutationVariables>;
export const UpdateSubscriptionPriceDocument = gql`
    mutation UpdateSubscriptionPrice($retailerIds: [ID]!, $priceInCents: String!) {
  updateSubscriptionPrice(retailerIds: $retailerIds, priceInCents: $priceInCents) {
    success
    message
  }
}
    `;
export type GqlUpdateSubscriptionPriceMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateSubscriptionPriceMutation, GqlUpdateSubscriptionPriceMutationVariables>;

/**
 * __useUpdateSubscriptionPriceMutation__
 *
 * To run a mutation, you first call `useUpdateSubscriptionPriceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSubscriptionPriceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSubscriptionPriceMutation, { data, loading, error }] = useUpdateSubscriptionPriceMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *      priceInCents: // value for 'priceInCents'
 *   },
 * });
 */
export function useUpdateSubscriptionPriceMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateSubscriptionPriceMutation, GqlUpdateSubscriptionPriceMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateSubscriptionPriceMutation, GqlUpdateSubscriptionPriceMutationVariables>(UpdateSubscriptionPriceDocument, baseOptions);
      }
export type UpdateSubscriptionPriceMutationHookResult = ReturnType<typeof useUpdateSubscriptionPriceMutation>;
export type UpdateSubscriptionPriceMutationResult = ApolloReactCommon.MutationResult<GqlUpdateSubscriptionPriceMutation>;
export type UpdateSubscriptionPriceMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateSubscriptionPriceMutation, GqlUpdateSubscriptionPriceMutationVariables>;
export const UpdateSubscriptionTrialDocument = gql`
    mutation UpdateSubscriptionTrial($retailerIds: [ID]!, $endDate: String) {
  updateSubscriptionTrial(retailerIds: $retailerIds, endDate: $endDate) {
    success
    message
  }
}
    `;
export type GqlUpdateSubscriptionTrialMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateSubscriptionTrialMutation, GqlUpdateSubscriptionTrialMutationVariables>;

/**
 * __useUpdateSubscriptionTrialMutation__
 *
 * To run a mutation, you first call `useUpdateSubscriptionTrialMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSubscriptionTrialMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSubscriptionTrialMutation, { data, loading, error }] = useUpdateSubscriptionTrialMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *      endDate: // value for 'endDate'
 *   },
 * });
 */
export function useUpdateSubscriptionTrialMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateSubscriptionTrialMutation, GqlUpdateSubscriptionTrialMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateSubscriptionTrialMutation, GqlUpdateSubscriptionTrialMutationVariables>(UpdateSubscriptionTrialDocument, baseOptions);
      }
export type UpdateSubscriptionTrialMutationHookResult = ReturnType<typeof useUpdateSubscriptionTrialMutation>;
export type UpdateSubscriptionTrialMutationResult = ApolloReactCommon.MutationResult<GqlUpdateSubscriptionTrialMutation>;
export type UpdateSubscriptionTrialMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateSubscriptionTrialMutation, GqlUpdateSubscriptionTrialMutationVariables>;
export const GetChargebeeHostedPageDocument = gql`
    query GetChargebeeHostedPage($chargebeeCustomerId: String!, $pageType: String!) {
  getChargebeeHostedPage(
    chargebeeCustomerId: $chargebeeCustomerId
    pageType: $pageType
  ) {
    id
    type
    url
    state
    embed
    createdAt
    expiresAt
    updatedAt
    object
  }
}
    `;

/**
 * __useGetChargebeeHostedPageQuery__
 *
 * To run a query within a React component, call `useGetChargebeeHostedPageQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChargebeeHostedPageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChargebeeHostedPageQuery({
 *   variables: {
 *      chargebeeCustomerId: // value for 'chargebeeCustomerId'
 *      pageType: // value for 'pageType'
 *   },
 * });
 */
export function useGetChargebeeHostedPageQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetChargebeeHostedPageQuery, GqlGetChargebeeHostedPageQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetChargebeeHostedPageQuery, GqlGetChargebeeHostedPageQueryVariables>(GetChargebeeHostedPageDocument, baseOptions);
      }
export function useGetChargebeeHostedPageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetChargebeeHostedPageQuery, GqlGetChargebeeHostedPageQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetChargebeeHostedPageQuery, GqlGetChargebeeHostedPageQueryVariables>(GetChargebeeHostedPageDocument, baseOptions);
        }
export type GetChargebeeHostedPageQueryHookResult = ReturnType<typeof useGetChargebeeHostedPageQuery>;
export type GetChargebeeHostedPageLazyQueryHookResult = ReturnType<typeof useGetChargebeeHostedPageLazyQuery>;
export type GetChargebeeHostedPageQueryResult = ApolloReactCommon.QueryResult<GqlGetChargebeeHostedPageQuery, GqlGetChargebeeHostedPageQueryVariables>;
export const SetupBillingV2Document = gql`
    mutation SetupBillingV2($customerName: String!, $dispensaryIds: [String!]!) {
  setupBillingV2(customerName: $customerName, dispensaryIds: $dispensaryIds) {
    message
    success
  }
}
    `;
export type GqlSetupBillingV2MutationFn = ApolloReactCommon.MutationFunction<GqlSetupBillingV2Mutation, GqlSetupBillingV2MutationVariables>;

/**
 * __useSetupBillingV2Mutation__
 *
 * To run a mutation, you first call `useSetupBillingV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetupBillingV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setupBillingV2Mutation, { data, loading, error }] = useSetupBillingV2Mutation({
 *   variables: {
 *      customerName: // value for 'customerName'
 *      dispensaryIds: // value for 'dispensaryIds'
 *   },
 * });
 */
export function useSetupBillingV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSetupBillingV2Mutation, GqlSetupBillingV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSetupBillingV2Mutation, GqlSetupBillingV2MutationVariables>(SetupBillingV2Document, baseOptions);
      }
export type SetupBillingV2MutationHookResult = ReturnType<typeof useSetupBillingV2Mutation>;
export type SetupBillingV2MutationResult = ApolloReactCommon.MutationResult<GqlSetupBillingV2Mutation>;
export type SetupBillingV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSetupBillingV2Mutation, GqlSetupBillingV2MutationVariables>;
export const SetupRetailerBillingDocument = gql`
    mutation SetupRetailerBilling($retailerIds: [ID]!) {
  setupRetailerBilling(retailerIds: $retailerIds) {
    success
  }
}
    `;
export type GqlSetupRetailerBillingMutationFn = ApolloReactCommon.MutationFunction<GqlSetupRetailerBillingMutation, GqlSetupRetailerBillingMutationVariables>;

/**
 * __useSetupRetailerBillingMutation__
 *
 * To run a mutation, you first call `useSetupRetailerBillingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetupRetailerBillingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setupRetailerBillingMutation, { data, loading, error }] = useSetupRetailerBillingMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *   },
 * });
 */
export function useSetupRetailerBillingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSetupRetailerBillingMutation, GqlSetupRetailerBillingMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSetupRetailerBillingMutation, GqlSetupRetailerBillingMutationVariables>(SetupRetailerBillingDocument, baseOptions);
      }
export type SetupRetailerBillingMutationHookResult = ReturnType<typeof useSetupRetailerBillingMutation>;
export type SetupRetailerBillingMutationResult = ApolloReactCommon.MutationResult<GqlSetupRetailerBillingMutation>;
export type SetupRetailerBillingMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSetupRetailerBillingMutation, GqlSetupRetailerBillingMutationVariables>;
export const DeleteDeviceV2Document = gql`
    mutation DeleteDeviceV2($id: ID!) {
  deleteDeviceV2(id: $id) {
    _id
  }
}
    `;
export type GqlDeleteDeviceV2MutationFn = ApolloReactCommon.MutationFunction<GqlDeleteDeviceV2Mutation, GqlDeleteDeviceV2MutationVariables>;

/**
 * __useDeleteDeviceV2Mutation__
 *
 * To run a mutation, you first call `useDeleteDeviceV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteDeviceV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteDeviceV2Mutation, { data, loading, error }] = useDeleteDeviceV2Mutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteDeviceV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteDeviceV2Mutation, GqlDeleteDeviceV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteDeviceV2Mutation, GqlDeleteDeviceV2MutationVariables>(DeleteDeviceV2Document, baseOptions);
      }
export type DeleteDeviceV2MutationHookResult = ReturnType<typeof useDeleteDeviceV2Mutation>;
export type DeleteDeviceV2MutationResult = ApolloReactCommon.MutationResult<GqlDeleteDeviceV2Mutation>;
export type DeleteDeviceV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteDeviceV2Mutation, GqlDeleteDeviceV2MutationVariables>;
export const ConsumeDeviceAccessCodeDocument = gql`
    mutation ConsumeDeviceAccessCode($accessCode: String!, $dispensaryId: String!) {
  consumeDeviceAccessCode(accessCode: $accessCode, dispensaryId: $dispensaryId) {
    accessCode
    channel
    channelKey
  }
}
    `;
export type GqlConsumeDeviceAccessCodeMutationFn = ApolloReactCommon.MutationFunction<GqlConsumeDeviceAccessCodeMutation, GqlConsumeDeviceAccessCodeMutationVariables>;

/**
 * __useConsumeDeviceAccessCodeMutation__
 *
 * To run a mutation, you first call `useConsumeDeviceAccessCodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useConsumeDeviceAccessCodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [consumeDeviceAccessCodeMutation, { data, loading, error }] = useConsumeDeviceAccessCodeMutation({
 *   variables: {
 *      accessCode: // value for 'accessCode'
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useConsumeDeviceAccessCodeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlConsumeDeviceAccessCodeMutation, GqlConsumeDeviceAccessCodeMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlConsumeDeviceAccessCodeMutation, GqlConsumeDeviceAccessCodeMutationVariables>(ConsumeDeviceAccessCodeDocument, baseOptions);
      }
export type ConsumeDeviceAccessCodeMutationHookResult = ReturnType<typeof useConsumeDeviceAccessCodeMutation>;
export type ConsumeDeviceAccessCodeMutationResult = ApolloReactCommon.MutationResult<GqlConsumeDeviceAccessCodeMutation>;
export type ConsumeDeviceAccessCodeMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlConsumeDeviceAccessCodeMutation, GqlConsumeDeviceAccessCodeMutationVariables>;
export const UpdateAutoPrintDevicesV2Document = gql`
    mutation UpdateAutoPrintDevicesV2($dispensaryId: String!, $deviceIds: [String!]!) {
  updateAutoPrintDevicesV2(dispensaryId: $dispensaryId, deviceIds: $deviceIds) {
    message
    success
  }
}
    `;
export type GqlUpdateAutoPrintDevicesV2MutationFn = ApolloReactCommon.MutationFunction<GqlUpdateAutoPrintDevicesV2Mutation, GqlUpdateAutoPrintDevicesV2MutationVariables>;

/**
 * __useUpdateAutoPrintDevicesV2Mutation__
 *
 * To run a mutation, you first call `useUpdateAutoPrintDevicesV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAutoPrintDevicesV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAutoPrintDevicesV2Mutation, { data, loading, error }] = useUpdateAutoPrintDevicesV2Mutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      deviceIds: // value for 'deviceIds'
 *   },
 * });
 */
export function useUpdateAutoPrintDevicesV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateAutoPrintDevicesV2Mutation, GqlUpdateAutoPrintDevicesV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateAutoPrintDevicesV2Mutation, GqlUpdateAutoPrintDevicesV2MutationVariables>(UpdateAutoPrintDevicesV2Document, baseOptions);
      }
export type UpdateAutoPrintDevicesV2MutationHookResult = ReturnType<typeof useUpdateAutoPrintDevicesV2Mutation>;
export type UpdateAutoPrintDevicesV2MutationResult = ApolloReactCommon.MutationResult<GqlUpdateAutoPrintDevicesV2Mutation>;
export type UpdateAutoPrintDevicesV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateAutoPrintDevicesV2Mutation, GqlUpdateAutoPrintDevicesV2MutationVariables>;
export const DeleteSpecialHoursDocument = gql`
    mutation deleteSpecialHours($dispensaryId: String!, $specialHoursIds: [ID]!) {
  deleteSpecialHours(
    dispensaryId: $dispensaryId
    specialHoursIds: $specialHoursIds
  ) {
    success
  }
}
    `;
export type GqlDeleteSpecialHoursMutationFn = ApolloReactCommon.MutationFunction<GqlDeleteSpecialHoursMutation, GqlDeleteSpecialHoursMutationVariables>;

/**
 * __useDeleteSpecialHoursMutation__
 *
 * To run a mutation, you first call `useDeleteSpecialHoursMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSpecialHoursMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSpecialHoursMutation, { data, loading, error }] = useDeleteSpecialHoursMutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      specialHoursIds: // value for 'specialHoursIds'
 *   },
 * });
 */
export function useDeleteSpecialHoursMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteSpecialHoursMutation, GqlDeleteSpecialHoursMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteSpecialHoursMutation, GqlDeleteSpecialHoursMutationVariables>(DeleteSpecialHoursDocument, baseOptions);
      }
export type DeleteSpecialHoursMutationHookResult = ReturnType<typeof useDeleteSpecialHoursMutation>;
export type DeleteSpecialHoursMutationResult = ApolloReactCommon.MutationResult<GqlDeleteSpecialHoursMutation>;
export type DeleteSpecialHoursMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteSpecialHoursMutation, GqlDeleteSpecialHoursMutationVariables>;
export const UpdateHoursSettingsDocument = gql`
    mutation updateHoursSettings($input: HoursSettingsUpdateInput!) {
  updateHoursSettings(input: $input) {
    success
  }
}
    `;
export type GqlUpdateHoursSettingsMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateHoursSettingsMutation, GqlUpdateHoursSettingsMutationVariables>;

/**
 * __useUpdateHoursSettingsMutation__
 *
 * To run a mutation, you first call `useUpdateHoursSettingsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateHoursSettingsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateHoursSettingsMutation, { data, loading, error }] = useUpdateHoursSettingsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateHoursSettingsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateHoursSettingsMutation, GqlUpdateHoursSettingsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateHoursSettingsMutation, GqlUpdateHoursSettingsMutationVariables>(UpdateHoursSettingsDocument, baseOptions);
      }
export type UpdateHoursSettingsMutationHookResult = ReturnType<typeof useUpdateHoursSettingsMutation>;
export type UpdateHoursSettingsMutationResult = ApolloReactCommon.MutationResult<GqlUpdateHoursSettingsMutation>;
export type UpdateHoursSettingsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateHoursSettingsMutation, GqlUpdateHoursSettingsMutationVariables>;
export const GetComplianceConfigsForDropdownDocument = gql`
    query GetComplianceConfigsForDropdown {
  getComplianceConfigs {
    id
  }
}
    `;

/**
 * __useGetComplianceConfigsForDropdownQuery__
 *
 * To run a query within a React component, call `useGetComplianceConfigsForDropdownQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetComplianceConfigsForDropdownQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetComplianceConfigsForDropdownQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetComplianceConfigsForDropdownQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlGetComplianceConfigsForDropdownQuery, GqlGetComplianceConfigsForDropdownQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetComplianceConfigsForDropdownQuery, GqlGetComplianceConfigsForDropdownQueryVariables>(GetComplianceConfigsForDropdownDocument, baseOptions);
      }
export function useGetComplianceConfigsForDropdownLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetComplianceConfigsForDropdownQuery, GqlGetComplianceConfigsForDropdownQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetComplianceConfigsForDropdownQuery, GqlGetComplianceConfigsForDropdownQueryVariables>(GetComplianceConfigsForDropdownDocument, baseOptions);
        }
export type GetComplianceConfigsForDropdownQueryHookResult = ReturnType<typeof useGetComplianceConfigsForDropdownQuery>;
export type GetComplianceConfigsForDropdownLazyQueryHookResult = ReturnType<typeof useGetComplianceConfigsForDropdownLazyQuery>;
export type GetComplianceConfigsForDropdownQueryResult = ApolloReactCommon.QueryResult<GqlGetComplianceConfigsForDropdownQuery, GqlGetComplianceConfigsForDropdownQueryVariables>;
export const CreateIntegrationDocument = gql`
    mutation CreateIntegration($input: IntegrationsUpdateInput!) {
  createIntegration(integration: $input) {
    adapter
    _id
  }
}
    `;
export type GqlCreateIntegrationMutationFn = ApolloReactCommon.MutationFunction<GqlCreateIntegrationMutation, GqlCreateIntegrationMutationVariables>;

/**
 * __useCreateIntegrationMutation__
 *
 * To run a mutation, you first call `useCreateIntegrationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateIntegrationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createIntegrationMutation, { data, loading, error }] = useCreateIntegrationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateIntegrationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateIntegrationMutation, GqlCreateIntegrationMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateIntegrationMutation, GqlCreateIntegrationMutationVariables>(CreateIntegrationDocument, baseOptions);
      }
export type CreateIntegrationMutationHookResult = ReturnType<typeof useCreateIntegrationMutation>;
export type CreateIntegrationMutationResult = ApolloReactCommon.MutationResult<GqlCreateIntegrationMutation>;
export type CreateIntegrationMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateIntegrationMutation, GqlCreateIntegrationMutationVariables>;
export const HubspotCrmPropertiesDocument = gql`
    query HubspotCrmProperties($integrationId: String!) {
  hubspotCrmProperties(integrationId: $integrationId) {
    localProperties {
      contact {
        id
        value
      }
      deal {
        id
        value
      }
      product {
        id
        value
      }
    }
    foreignProperties {
      contact {
        id
        value
      }
      deal {
        id
        value
      }
      product {
        id
        value
      }
    }
  }
}
    `;

/**
 * __useHubspotCrmPropertiesQuery__
 *
 * To run a query within a React component, call `useHubspotCrmPropertiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useHubspotCrmPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHubspotCrmPropertiesQuery({
 *   variables: {
 *      integrationId: // value for 'integrationId'
 *   },
 * });
 */
export function useHubspotCrmPropertiesQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlHubspotCrmPropertiesQuery, GqlHubspotCrmPropertiesQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlHubspotCrmPropertiesQuery, GqlHubspotCrmPropertiesQueryVariables>(HubspotCrmPropertiesDocument, baseOptions);
      }
export function useHubspotCrmPropertiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlHubspotCrmPropertiesQuery, GqlHubspotCrmPropertiesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlHubspotCrmPropertiesQuery, GqlHubspotCrmPropertiesQueryVariables>(HubspotCrmPropertiesDocument, baseOptions);
        }
export type HubspotCrmPropertiesQueryHookResult = ReturnType<typeof useHubspotCrmPropertiesQuery>;
export type HubspotCrmPropertiesLazyQueryHookResult = ReturnType<typeof useHubspotCrmPropertiesLazyQuery>;
export type HubspotCrmPropertiesQueryResult = ApolloReactCommon.QueryResult<GqlHubspotCrmPropertiesQuery, GqlHubspotCrmPropertiesQueryVariables>;
export const IntegrationsDeleteDocument = gql`
    mutation IntegrationsDelete($integrationId: String!) {
  integrationsDelete(integrationId: $integrationId) {
    message
    success
  }
}
    `;
export type GqlIntegrationsDeleteMutationFn = ApolloReactCommon.MutationFunction<GqlIntegrationsDeleteMutation, GqlIntegrationsDeleteMutationVariables>;

/**
 * __useIntegrationsDeleteMutation__
 *
 * To run a mutation, you first call `useIntegrationsDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useIntegrationsDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [integrationsDeleteMutation, { data, loading, error }] = useIntegrationsDeleteMutation({
 *   variables: {
 *      integrationId: // value for 'integrationId'
 *   },
 * });
 */
export function useIntegrationsDeleteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlIntegrationsDeleteMutation, GqlIntegrationsDeleteMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlIntegrationsDeleteMutation, GqlIntegrationsDeleteMutationVariables>(IntegrationsDeleteDocument, baseOptions);
      }
export type IntegrationsDeleteMutationHookResult = ReturnType<typeof useIntegrationsDeleteMutation>;
export type IntegrationsDeleteMutationResult = ApolloReactCommon.MutationResult<GqlIntegrationsDeleteMutation>;
export type IntegrationsDeleteMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlIntegrationsDeleteMutation, GqlIntegrationsDeleteMutationVariables>;
export const UpdateIntegrationDocument = gql`
    mutation UpdateIntegration($integrationId: String!, $integration: IntegrationsUpdateInput!) {
  updateIntegration(integrationId: $integrationId, integration: $integration) {
    adapter
    _id
  }
}
    `;
export type GqlUpdateIntegrationMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateIntegrationMutation, GqlUpdateIntegrationMutationVariables>;

/**
 * __useUpdateIntegrationMutation__
 *
 * To run a mutation, you first call `useUpdateIntegrationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateIntegrationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateIntegrationMutation, { data, loading, error }] = useUpdateIntegrationMutation({
 *   variables: {
 *      integrationId: // value for 'integrationId'
 *      integration: // value for 'integration'
 *   },
 * });
 */
export function useUpdateIntegrationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateIntegrationMutation, GqlUpdateIntegrationMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateIntegrationMutation, GqlUpdateIntegrationMutationVariables>(UpdateIntegrationDocument, baseOptions);
      }
export type UpdateIntegrationMutationHookResult = ReturnType<typeof useUpdateIntegrationMutation>;
export type UpdateIntegrationMutationResult = ApolloReactCommon.MutationResult<GqlUpdateIntegrationMutation>;
export type UpdateIntegrationMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateIntegrationMutation, GqlUpdateIntegrationMutationVariables>;
export const IntegrationsWipeMenuInArmaDocument = gql`
    mutation IntegrationsWipeMenuInArma($dispensaryId: String!, $integrationId: String!) {
  integrationsWipeMenuInArma(
    dispensaryId: $dispensaryId
    integrationId: $integrationId
  ) {
    success
    message
  }
}
    `;
export type GqlIntegrationsWipeMenuInArmaMutationFn = ApolloReactCommon.MutationFunction<GqlIntegrationsWipeMenuInArmaMutation, GqlIntegrationsWipeMenuInArmaMutationVariables>;

/**
 * __useIntegrationsWipeMenuInArmaMutation__
 *
 * To run a mutation, you first call `useIntegrationsWipeMenuInArmaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useIntegrationsWipeMenuInArmaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [integrationsWipeMenuInArmaMutation, { data, loading, error }] = useIntegrationsWipeMenuInArmaMutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      integrationId: // value for 'integrationId'
 *   },
 * });
 */
export function useIntegrationsWipeMenuInArmaMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlIntegrationsWipeMenuInArmaMutation, GqlIntegrationsWipeMenuInArmaMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlIntegrationsWipeMenuInArmaMutation, GqlIntegrationsWipeMenuInArmaMutationVariables>(IntegrationsWipeMenuInArmaDocument, baseOptions);
      }
export type IntegrationsWipeMenuInArmaMutationHookResult = ReturnType<typeof useIntegrationsWipeMenuInArmaMutation>;
export type IntegrationsWipeMenuInArmaMutationResult = ApolloReactCommon.MutationResult<GqlIntegrationsWipeMenuInArmaMutation>;
export type IntegrationsWipeMenuInArmaMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlIntegrationsWipeMenuInArmaMutation, GqlIntegrationsWipeMenuInArmaMutationVariables>;
export const IntegrationsWipeMenuDocument = gql`
    mutation IntegrationsWipeMenu($integrationId: String!) {
  integrationsWipeMenu(integrationId: $integrationId) {
    success
    message
  }
}
    `;
export type GqlIntegrationsWipeMenuMutationFn = ApolloReactCommon.MutationFunction<GqlIntegrationsWipeMenuMutation, GqlIntegrationsWipeMenuMutationVariables>;

/**
 * __useIntegrationsWipeMenuMutation__
 *
 * To run a mutation, you first call `useIntegrationsWipeMenuMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useIntegrationsWipeMenuMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [integrationsWipeMenuMutation, { data, loading, error }] = useIntegrationsWipeMenuMutation({
 *   variables: {
 *      integrationId: // value for 'integrationId'
 *   },
 * });
 */
export function useIntegrationsWipeMenuMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlIntegrationsWipeMenuMutation, GqlIntegrationsWipeMenuMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlIntegrationsWipeMenuMutation, GqlIntegrationsWipeMenuMutationVariables>(IntegrationsWipeMenuDocument, baseOptions);
      }
export type IntegrationsWipeMenuMutationHookResult = ReturnType<typeof useIntegrationsWipeMenuMutation>;
export type IntegrationsWipeMenuMutationResult = ApolloReactCommon.MutationResult<GqlIntegrationsWipeMenuMutation>;
export type IntegrationsWipeMenuMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlIntegrationsWipeMenuMutation, GqlIntegrationsWipeMenuMutationVariables>;
export const ReservationSlotsByOrderTypeDocument = gql`
    query ReservationSlotsByOrderType($dispensaryId: ID!) {
  getReservationSlotsByOrderType(dispensaryId: $dispensaryId) {
    inStorePickup {
      maxReservationSlotsByDay {
        ...maxReservationSlotsByDayFragment
      }
      maxReservationSlotsByDate {
        ...maxReservationSlotFragment
      }
    }
    curbsidePickup {
      maxReservationSlotsByDay {
        ...maxReservationSlotsByDayFragment
      }
      maxReservationSlotsByDate {
        ...maxReservationSlotFragment
      }
    }
    driveThruPickup {
      maxReservationSlotsByDay {
        ...maxReservationSlotsByDayFragment
      }
      maxReservationSlotsByDate {
        ...maxReservationSlotFragment
      }
    }
    delivery {
      maxReservationSlotsByDay {
        ...maxReservationSlotsByDayFragment
      }
      maxReservationSlotsByDate {
        ...maxReservationSlotFragment
      }
    }
  }
}
    ${MaxReservationSlotsByDayFragmentFragmentDoc}
${MaxReservationSlotFragmentFragmentDoc}`;

/**
 * __useReservationSlotsByOrderTypeQuery__
 *
 * To run a query within a React component, call `useReservationSlotsByOrderTypeQuery` and pass it any options that fit your needs.
 * When your component renders, `useReservationSlotsByOrderTypeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useReservationSlotsByOrderTypeQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useReservationSlotsByOrderTypeQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlReservationSlotsByOrderTypeQuery, GqlReservationSlotsByOrderTypeQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlReservationSlotsByOrderTypeQuery, GqlReservationSlotsByOrderTypeQueryVariables>(ReservationSlotsByOrderTypeDocument, baseOptions);
      }
export function useReservationSlotsByOrderTypeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlReservationSlotsByOrderTypeQuery, GqlReservationSlotsByOrderTypeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlReservationSlotsByOrderTypeQuery, GqlReservationSlotsByOrderTypeQueryVariables>(ReservationSlotsByOrderTypeDocument, baseOptions);
        }
export type ReservationSlotsByOrderTypeQueryHookResult = ReturnType<typeof useReservationSlotsByOrderTypeQuery>;
export type ReservationSlotsByOrderTypeLazyQueryHookResult = ReturnType<typeof useReservationSlotsByOrderTypeLazyQuery>;
export type ReservationSlotsByOrderTypeQueryResult = ApolloReactCommon.QueryResult<GqlReservationSlotsByOrderTypeQuery, GqlReservationSlotsByOrderTypeQueryVariables>;
export const GetRetailerEnrollmentStatusDocument = gql`
    query GetRetailerEnrollmentStatus($entityId: String!, $entityType: EntityTypes!) {
  getRetailerEnrollmentStatus(entityId: $entityId, entityType: $entityType) {
    enrollment {
      status
    }
  }
}
    `;

/**
 * __useGetRetailerEnrollmentStatusQuery__
 *
 * To run a query within a React component, call `useGetRetailerEnrollmentStatusQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRetailerEnrollmentStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRetailerEnrollmentStatusQuery({
 *   variables: {
 *      entityId: // value for 'entityId'
 *      entityType: // value for 'entityType'
 *   },
 * });
 */
export function useGetRetailerEnrollmentStatusQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetRetailerEnrollmentStatusQuery, GqlGetRetailerEnrollmentStatusQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetRetailerEnrollmentStatusQuery, GqlGetRetailerEnrollmentStatusQueryVariables>(GetRetailerEnrollmentStatusDocument, baseOptions);
      }
export function useGetRetailerEnrollmentStatusLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetRetailerEnrollmentStatusQuery, GqlGetRetailerEnrollmentStatusQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetRetailerEnrollmentStatusQuery, GqlGetRetailerEnrollmentStatusQueryVariables>(GetRetailerEnrollmentStatusDocument, baseOptions);
        }
export type GetRetailerEnrollmentStatusQueryHookResult = ReturnType<typeof useGetRetailerEnrollmentStatusQuery>;
export type GetRetailerEnrollmentStatusLazyQueryHookResult = ReturnType<typeof useGetRetailerEnrollmentStatusLazyQuery>;
export type GetRetailerEnrollmentStatusQueryResult = ApolloReactCommon.QueryResult<GqlGetRetailerEnrollmentStatusQuery, GqlGetRetailerEnrollmentStatusQueryVariables>;
export const UpdateOrderingSettingsDocument = gql`
    mutation updateOrderingSettings($input: OrderingSettingsUpdateInput!) {
  updateOrderingSettings(input: $input) {
    success
  }
}
    `;
export type GqlUpdateOrderingSettingsMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateOrderingSettingsMutation, GqlUpdateOrderingSettingsMutationVariables>;

/**
 * __useUpdateOrderingSettingsMutation__
 *
 * To run a mutation, you first call `useUpdateOrderingSettingsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateOrderingSettingsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateOrderingSettingsMutation, { data, loading, error }] = useUpdateOrderingSettingsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateOrderingSettingsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateOrderingSettingsMutation, GqlUpdateOrderingSettingsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateOrderingSettingsMutation, GqlUpdateOrderingSettingsMutationVariables>(UpdateOrderingSettingsDocument, baseOptions);
      }
export type UpdateOrderingSettingsMutationHookResult = ReturnType<typeof useUpdateOrderingSettingsMutation>;
export type UpdateOrderingSettingsMutationResult = ApolloReactCommon.MutationResult<GqlUpdateOrderingSettingsMutation>;
export type UpdateOrderingSettingsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateOrderingSettingsMutation, GqlUpdateOrderingSettingsMutationVariables>;
export const UpdateReservationSlotsDocument = gql`
    mutation updateReservationSlots($input: ReservationSlotsUpdateInput!) {
  updateReservationSlots(input: $input) {
    success
  }
}
    `;
export type GqlUpdateReservationSlotsMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateReservationSlotsMutation, GqlUpdateReservationSlotsMutationVariables>;

/**
 * __useUpdateReservationSlotsMutation__
 *
 * To run a mutation, you first call `useUpdateReservationSlotsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateReservationSlotsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateReservationSlotsMutation, { data, loading, error }] = useUpdateReservationSlotsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateReservationSlotsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateReservationSlotsMutation, GqlUpdateReservationSlotsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateReservationSlotsMutation, GqlUpdateReservationSlotsMutationVariables>(UpdateReservationSlotsDocument, baseOptions);
      }
export type UpdateReservationSlotsMutationHookResult = ReturnType<typeof useUpdateReservationSlotsMutation>;
export type UpdateReservationSlotsMutationResult = ApolloReactCommon.MutationResult<GqlUpdateReservationSlotsMutation>;
export type UpdateReservationSlotsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateReservationSlotsMutation, GqlUpdateReservationSlotsMutationVariables>;
export const YearInReviewStatsQueryDocument = gql`
    query YearInReviewStatsQuery($dispensaryId: String!) {
  yearInReviewQuery(dispensaryId: $dispensaryId) {
    totalSales {
      salesTotal
    }
  }
}
    `;

/**
 * __useYearInReviewStatsQueryQuery__
 *
 * To run a query within a React component, call `useYearInReviewStatsQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useYearInReviewStatsQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useYearInReviewStatsQueryQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useYearInReviewStatsQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlYearInReviewStatsQueryQuery, GqlYearInReviewStatsQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlYearInReviewStatsQueryQuery, GqlYearInReviewStatsQueryQueryVariables>(YearInReviewStatsQueryDocument, baseOptions);
      }
export function useYearInReviewStatsQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlYearInReviewStatsQueryQuery, GqlYearInReviewStatsQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlYearInReviewStatsQueryQuery, GqlYearInReviewStatsQueryQueryVariables>(YearInReviewStatsQueryDocument, baseOptions);
        }
export type YearInReviewStatsQueryQueryHookResult = ReturnType<typeof useYearInReviewStatsQueryQuery>;
export type YearInReviewStatsQueryLazyQueryHookResult = ReturnType<typeof useYearInReviewStatsQueryLazyQuery>;
export type YearInReviewStatsQueryQueryResult = ApolloReactCommon.QueryResult<GqlYearInReviewStatsQueryQuery, GqlYearInReviewStatsQueryQueryVariables>;
export const YearInReviewPngUrlQueryDocument = gql`
    query YearInReviewPngUrlQuery($dispensaryId: String!) {
  yearInReviewQuery(dispensaryId: $dispensaryId) {
    pngUrl
  }
}
    `;

/**
 * __useYearInReviewPngUrlQueryQuery__
 *
 * To run a query within a React component, call `useYearInReviewPngUrlQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useYearInReviewPngUrlQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useYearInReviewPngUrlQueryQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useYearInReviewPngUrlQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlYearInReviewPngUrlQueryQuery, GqlYearInReviewPngUrlQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlYearInReviewPngUrlQueryQuery, GqlYearInReviewPngUrlQueryQueryVariables>(YearInReviewPngUrlQueryDocument, baseOptions);
      }
export function useYearInReviewPngUrlQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlYearInReviewPngUrlQueryQuery, GqlYearInReviewPngUrlQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlYearInReviewPngUrlQueryQuery, GqlYearInReviewPngUrlQueryQueryVariables>(YearInReviewPngUrlQueryDocument, baseOptions);
        }
export type YearInReviewPngUrlQueryQueryHookResult = ReturnType<typeof useYearInReviewPngUrlQueryQuery>;
export type YearInReviewPngUrlQueryLazyQueryHookResult = ReturnType<typeof useYearInReviewPngUrlQueryLazyQuery>;
export type YearInReviewPngUrlQueryQueryResult = ApolloReactCommon.QueryResult<GqlYearInReviewPngUrlQueryQuery, GqlYearInReviewPngUrlQueryQueryVariables>;
export const YearInReviewQueryDocument = gql`
    query YearInReviewQuery($dispensaryId: String!) {
  yearInReviewQuery(dispensaryId: $dispensaryId) {
    categories {
      category
      sales
      salesPercent
    }
    orderTypes {
      name
      value
      orders
      percentage
    }
    conversionRate
    totalPounds
    totalSales {
      onlineOrdersTotal
      salesTotal
    }
    topSeller {
      productName
      brandName
      totalSale
      productImage
    }
    largestOrder {
      dateOfLargestOrder
      percentageHigher
      orderAmount
    }
    busiestDay {
      day
      totalOrders
      totalSales
      totalDeliveries
      averageFill
      percentageIncrease
    }
  }
}
    `;

/**
 * __useYearInReviewQueryQuery__
 *
 * To run a query within a React component, call `useYearInReviewQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useYearInReviewQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useYearInReviewQueryQuery({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *   },
 * });
 */
export function useYearInReviewQueryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlYearInReviewQueryQuery, GqlYearInReviewQueryQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlYearInReviewQueryQuery, GqlYearInReviewQueryQueryVariables>(YearInReviewQueryDocument, baseOptions);
      }
export function useYearInReviewQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlYearInReviewQueryQuery, GqlYearInReviewQueryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlYearInReviewQueryQuery, GqlYearInReviewQueryQueryVariables>(YearInReviewQueryDocument, baseOptions);
        }
export type YearInReviewQueryQueryHookResult = ReturnType<typeof useYearInReviewQueryQuery>;
export type YearInReviewQueryLazyQueryHookResult = ReturnType<typeof useYearInReviewQueryLazyQuery>;
export type YearInReviewQueryQueryResult = ApolloReactCommon.QueryResult<GqlYearInReviewQueryQuery, GqlYearInReviewQueryQueryVariables>;
export const GetEnterpriseSpecialsDocument = gql`
    query GetEnterpriseSpecials($enterpriseId: ID!) {
  enterpriseSpecials(enterpriseId: $enterpriseId) {
    active
    complete
    createdAt
    dispensaryId
    endDay
    endStamp
    enterpriseId
    enterpriseSpecialId
    id
    inactiveDispensaries
    isRecurring
    localTime
    name
    recurring {
      days
      endDate
      endTime
      setEndDate
      startTime
    }
    scope
    specialType
    startDay
    startStamp
    timezone
    updatedAt
    version
  }
}
    `;

/**
 * __useGetEnterpriseSpecialsQuery__
 *
 * To run a query within a React component, call `useGetEnterpriseSpecialsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnterpriseSpecialsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnterpriseSpecialsQuery({
 *   variables: {
 *      enterpriseId: // value for 'enterpriseId'
 *   },
 * });
 */
export function useGetEnterpriseSpecialsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetEnterpriseSpecialsQuery, GqlGetEnterpriseSpecialsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetEnterpriseSpecialsQuery, GqlGetEnterpriseSpecialsQueryVariables>(GetEnterpriseSpecialsDocument, baseOptions);
      }
export function useGetEnterpriseSpecialsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetEnterpriseSpecialsQuery, GqlGetEnterpriseSpecialsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetEnterpriseSpecialsQuery, GqlGetEnterpriseSpecialsQueryVariables>(GetEnterpriseSpecialsDocument, baseOptions);
        }
export type GetEnterpriseSpecialsQueryHookResult = ReturnType<typeof useGetEnterpriseSpecialsQuery>;
export type GetEnterpriseSpecialsLazyQueryHookResult = ReturnType<typeof useGetEnterpriseSpecialsLazyQuery>;
export type GetEnterpriseSpecialsQueryResult = ApolloReactCommon.QueryResult<GqlGetEnterpriseSpecialsQuery, GqlGetEnterpriseSpecialsQueryVariables>;
export const GetEnterpriseDocument = gql`
    query GetEnterprise($enterpriseId: ID!) {
  getEnterprise(id: $enterpriseId) {
    id
    billingVersion
    retailers {
      id
      dispensaryId
    }
    uniqueName
  }
}
    `;

/**
 * __useGetEnterpriseQuery__
 *
 * To run a query within a React component, call `useGetEnterpriseQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnterpriseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnterpriseQuery({
 *   variables: {
 *      enterpriseId: // value for 'enterpriseId'
 *   },
 * });
 */
export function useGetEnterpriseQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetEnterpriseQuery, GqlGetEnterpriseQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetEnterpriseQuery, GqlGetEnterpriseQueryVariables>(GetEnterpriseDocument, baseOptions);
      }
export function useGetEnterpriseLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetEnterpriseQuery, GqlGetEnterpriseQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetEnterpriseQuery, GqlGetEnterpriseQueryVariables>(GetEnterpriseDocument, baseOptions);
        }
export type GetEnterpriseQueryHookResult = ReturnType<typeof useGetEnterpriseQuery>;
export type GetEnterpriseLazyQueryHookResult = ReturnType<typeof useGetEnterpriseLazyQuery>;
export type GetEnterpriseQueryResult = ApolloReactCommon.QueryResult<GqlGetEnterpriseQuery, GqlGetEnterpriseQueryVariables>;
export const GetEnterpriseByNameDocument = gql`
    query GetEnterpriseByName($uniqueName: ID!) {
  getEnterpriseByName(uniqueName: $uniqueName) {
    id
    billingVersion
    retailers {
      id
      dispensaryId
      profile {
        location {
          city
          state
        }
      }
    }
    uniqueName
  }
}
    `;

/**
 * __useGetEnterpriseByNameQuery__
 *
 * To run a query within a React component, call `useGetEnterpriseByNameQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnterpriseByNameQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnterpriseByNameQuery({
 *   variables: {
 *      uniqueName: // value for 'uniqueName'
 *   },
 * });
 */
export function useGetEnterpriseByNameQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetEnterpriseByNameQuery, GqlGetEnterpriseByNameQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetEnterpriseByNameQuery, GqlGetEnterpriseByNameQueryVariables>(GetEnterpriseByNameDocument, baseOptions);
      }
export function useGetEnterpriseByNameLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetEnterpriseByNameQuery, GqlGetEnterpriseByNameQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetEnterpriseByNameQuery, GqlGetEnterpriseByNameQueryVariables>(GetEnterpriseByNameDocument, baseOptions);
        }
export type GetEnterpriseByNameQueryHookResult = ReturnType<typeof useGetEnterpriseByNameQuery>;
export type GetEnterpriseByNameLazyQueryHookResult = ReturnType<typeof useGetEnterpriseByNameLazyQuery>;
export type GetEnterpriseByNameQueryResult = ApolloReactCommon.QueryResult<GqlGetEnterpriseByNameQuery, GqlGetEnterpriseByNameQueryVariables>;
export const GetRetailerByDispensaryIdDocument = gql`
    query GetRetailerByDispensaryId($dispensaryIds: [ID!]!) {
  getRetailerByDispensaryId(dispensaryIds: $dispensaryIds) {
    id
  }
}
    `;

/**
 * __useGetRetailerByDispensaryIdQuery__
 *
 * To run a query within a React component, call `useGetRetailerByDispensaryIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRetailerByDispensaryIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRetailerByDispensaryIdQuery({
 *   variables: {
 *      dispensaryIds: // value for 'dispensaryIds'
 *   },
 * });
 */
export function useGetRetailerByDispensaryIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetRetailerByDispensaryIdQuery, GqlGetRetailerByDispensaryIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetRetailerByDispensaryIdQuery, GqlGetRetailerByDispensaryIdQueryVariables>(GetRetailerByDispensaryIdDocument, baseOptions);
      }
export function useGetRetailerByDispensaryIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetRetailerByDispensaryIdQuery, GqlGetRetailerByDispensaryIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetRetailerByDispensaryIdQuery, GqlGetRetailerByDispensaryIdQueryVariables>(GetRetailerByDispensaryIdDocument, baseOptions);
        }
export type GetRetailerByDispensaryIdQueryHookResult = ReturnType<typeof useGetRetailerByDispensaryIdQuery>;
export type GetRetailerByDispensaryIdLazyQueryHookResult = ReturnType<typeof useGetRetailerByDispensaryIdLazyQuery>;
export type GetRetailerByDispensaryIdQueryResult = ApolloReactCommon.QueryResult<GqlGetRetailerByDispensaryIdQuery, GqlGetRetailerByDispensaryIdQueryVariables>;
export const GetRetailersByEnterpriseIdDocument = gql`
    query GetRetailersByEnterpriseId($enterpriseIds: [ID!]!) {
  getRetailersByEnterpriseId(enterpriseIds: $enterpriseIds) {
    dispensaryId
    name
    profile {
      location {
        city
        state
      }
      medicalDispensary
      recDispensary
    }
  }
}
    `;

/**
 * __useGetRetailersByEnterpriseIdQuery__
 *
 * To run a query within a React component, call `useGetRetailersByEnterpriseIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRetailersByEnterpriseIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRetailersByEnterpriseIdQuery({
 *   variables: {
 *      enterpriseIds: // value for 'enterpriseIds'
 *   },
 * });
 */
export function useGetRetailersByEnterpriseIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetRetailersByEnterpriseIdQuery, GqlGetRetailersByEnterpriseIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetRetailersByEnterpriseIdQuery, GqlGetRetailersByEnterpriseIdQueryVariables>(GetRetailersByEnterpriseIdDocument, baseOptions);
      }
export function useGetRetailersByEnterpriseIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetRetailersByEnterpriseIdQuery, GqlGetRetailersByEnterpriseIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetRetailersByEnterpriseIdQuery, GqlGetRetailersByEnterpriseIdQueryVariables>(GetRetailersByEnterpriseIdDocument, baseOptions);
        }
export type GetRetailersByEnterpriseIdQueryHookResult = ReturnType<typeof useGetRetailersByEnterpriseIdQuery>;
export type GetRetailersByEnterpriseIdLazyQueryHookResult = ReturnType<typeof useGetRetailersByEnterpriseIdLazyQuery>;
export type GetRetailersByEnterpriseIdQueryResult = ApolloReactCommon.QueryResult<GqlGetRetailersByEnterpriseIdQuery, GqlGetRetailersByEnterpriseIdQueryVariables>;
export const CreateUpdateBillingGroupDocument = gql`
    query CreateUpdateBillingGroup($id: ID!) {
  getEnterprise(id: $id) {
    id
    retailers {
      id
      name
      profile {
        location {
          city
          state
        }
      }
      status
      retailerGroups {
        id
        name
      }
    }
    retailerGroups {
      notificationEmails
      groupType
      id
      name
      retailers {
        id
      }
    }
  }
}
    `;

/**
 * __useCreateUpdateBillingGroupQuery__
 *
 * To run a query within a React component, call `useCreateUpdateBillingGroupQuery` and pass it any options that fit your needs.
 * When your component renders, `useCreateUpdateBillingGroupQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCreateUpdateBillingGroupQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useCreateUpdateBillingGroupQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlCreateUpdateBillingGroupQuery, GqlCreateUpdateBillingGroupQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlCreateUpdateBillingGroupQuery, GqlCreateUpdateBillingGroupQueryVariables>(CreateUpdateBillingGroupDocument, baseOptions);
      }
export function useCreateUpdateBillingGroupLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlCreateUpdateBillingGroupQuery, GqlCreateUpdateBillingGroupQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlCreateUpdateBillingGroupQuery, GqlCreateUpdateBillingGroupQueryVariables>(CreateUpdateBillingGroupDocument, baseOptions);
        }
export type CreateUpdateBillingGroupQueryHookResult = ReturnType<typeof useCreateUpdateBillingGroupQuery>;
export type CreateUpdateBillingGroupLazyQueryHookResult = ReturnType<typeof useCreateUpdateBillingGroupLazyQuery>;
export type CreateUpdateBillingGroupQueryResult = ApolloReactCommon.QueryResult<GqlCreateUpdateBillingGroupQuery, GqlCreateUpdateBillingGroupQueryVariables>;
export const CreateBillingGroupDocument = gql`
    mutation CreateBillingGroup($billingGroup: CreateBillingGroupInput!) {
  createBillingGroup(billingGroup: $billingGroup) {
    success
    message
  }
}
    `;
export type GqlCreateBillingGroupMutationFn = ApolloReactCommon.MutationFunction<GqlCreateBillingGroupMutation, GqlCreateBillingGroupMutationVariables>;

/**
 * __useCreateBillingGroupMutation__
 *
 * To run a mutation, you first call `useCreateBillingGroupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBillingGroupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBillingGroupMutation, { data, loading, error }] = useCreateBillingGroupMutation({
 *   variables: {
 *      billingGroup: // value for 'billingGroup'
 *   },
 * });
 */
export function useCreateBillingGroupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateBillingGroupMutation, GqlCreateBillingGroupMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateBillingGroupMutation, GqlCreateBillingGroupMutationVariables>(CreateBillingGroupDocument, baseOptions);
      }
export type CreateBillingGroupMutationHookResult = ReturnType<typeof useCreateBillingGroupMutation>;
export type CreateBillingGroupMutationResult = ApolloReactCommon.MutationResult<GqlCreateBillingGroupMutation>;
export type CreateBillingGroupMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateBillingGroupMutation, GqlCreateBillingGroupMutationVariables>;
export const RetailerBillingGroupOverviewDocument = gql`
    query RetailerBillingGroupOverview($id: ID!) {
  getRetailerGroup(id: $id) {
    name
    retailers {
      id
      name
    }
  }
}
    `;

/**
 * __useRetailerBillingGroupOverviewQuery__
 *
 * To run a query within a React component, call `useRetailerBillingGroupOverviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useRetailerBillingGroupOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRetailerBillingGroupOverviewQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRetailerBillingGroupOverviewQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlRetailerBillingGroupOverviewQuery, GqlRetailerBillingGroupOverviewQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlRetailerBillingGroupOverviewQuery, GqlRetailerBillingGroupOverviewQueryVariables>(RetailerBillingGroupOverviewDocument, baseOptions);
      }
export function useRetailerBillingGroupOverviewLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlRetailerBillingGroupOverviewQuery, GqlRetailerBillingGroupOverviewQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlRetailerBillingGroupOverviewQuery, GqlRetailerBillingGroupOverviewQueryVariables>(RetailerBillingGroupOverviewDocument, baseOptions);
        }
export type RetailerBillingGroupOverviewQueryHookResult = ReturnType<typeof useRetailerBillingGroupOverviewQuery>;
export type RetailerBillingGroupOverviewLazyQueryHookResult = ReturnType<typeof useRetailerBillingGroupOverviewLazyQuery>;
export type RetailerBillingGroupOverviewQueryResult = ApolloReactCommon.QueryResult<GqlRetailerBillingGroupOverviewQuery, GqlRetailerBillingGroupOverviewQueryVariables>;
export const BillingOverviewDocument = gql`
    query BillingOverview($id: ID!) {
  getEnterprise(id: $id) {
    createdAt
    id
    name
    phone
    primaryContactId
    uniqueName
    updatedAt
    website
    retailers {
      accountTier
      createdAt
      dispensaryId
      id
      medLicense
      name
      phone
      profile {
        location {
          city
          state
        }
      }
      recLicense
      status
      updatedAt
      retailerGroups {
        id
        name
      }
    }
    retailerGroups {
      notificationEmails
      groupType
      id
      name
      retailers {
        id
      }
    }
  }
}
    `;

/**
 * __useBillingOverviewQuery__
 *
 * To run a query within a React component, call `useBillingOverviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useBillingOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBillingOverviewQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useBillingOverviewQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlBillingOverviewQuery, GqlBillingOverviewQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlBillingOverviewQuery, GqlBillingOverviewQueryVariables>(BillingOverviewDocument, baseOptions);
      }
export function useBillingOverviewLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlBillingOverviewQuery, GqlBillingOverviewQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlBillingOverviewQuery, GqlBillingOverviewQueryVariables>(BillingOverviewDocument, baseOptions);
        }
export type BillingOverviewQueryHookResult = ReturnType<typeof useBillingOverviewQuery>;
export type BillingOverviewLazyQueryHookResult = ReturnType<typeof useBillingOverviewLazyQuery>;
export type BillingOverviewQueryResult = ApolloReactCommon.QueryResult<GqlBillingOverviewQuery, GqlBillingOverviewQueryVariables>;
export const RetailerBillingOverviewDocument = gql`
    query RetailerBillingOverview($retailers: [RetailerInput]!) {
  getSubscriptionsV2(retailers: $retailers) {
    chargebeePlan {
      period
      periodUnit
    }
    chargebeeSubscription {
      ...InvoicesTableInvoices
      currentTermEnd
      currentTermStart
      nextBillingAt
      planAmount
      planId
      status
      trialEnd
    }
    dispensaryBilling {
      ...BillToTextPaymentSources
    }
    manualPayments
  }
}
    ${InvoicesTableInvoicesFragmentDoc}
${BillToTextPaymentSourcesFragmentDoc}`;

/**
 * __useRetailerBillingOverviewQuery__
 *
 * To run a query within a React component, call `useRetailerBillingOverviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useRetailerBillingOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRetailerBillingOverviewQuery({
 *   variables: {
 *      retailers: // value for 'retailers'
 *   },
 * });
 */
export function useRetailerBillingOverviewQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlRetailerBillingOverviewQuery, GqlRetailerBillingOverviewQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlRetailerBillingOverviewQuery, GqlRetailerBillingOverviewQueryVariables>(RetailerBillingOverviewDocument, baseOptions);
      }
export function useRetailerBillingOverviewLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlRetailerBillingOverviewQuery, GqlRetailerBillingOverviewQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlRetailerBillingOverviewQuery, GqlRetailerBillingOverviewQueryVariables>(RetailerBillingOverviewDocument, baseOptions);
        }
export type RetailerBillingOverviewQueryHookResult = ReturnType<typeof useRetailerBillingOverviewQuery>;
export type RetailerBillingOverviewLazyQueryHookResult = ReturnType<typeof useRetailerBillingOverviewLazyQuery>;
export type RetailerBillingOverviewQueryResult = ApolloReactCommon.QueryResult<GqlRetailerBillingOverviewQuery, GqlRetailerBillingOverviewQueryVariables>;
export const ActivateEnterpriseRetailerBillingDocument = gql`
    mutation ActivateEnterpriseRetailerBilling($retailerIds: [ID!]!) {
  setupRetailerBilling(retailerIds: $retailerIds) {
    success
  }
}
    `;
export type GqlActivateEnterpriseRetailerBillingMutationFn = ApolloReactCommon.MutationFunction<GqlActivateEnterpriseRetailerBillingMutation, GqlActivateEnterpriseRetailerBillingMutationVariables>;

/**
 * __useActivateEnterpriseRetailerBillingMutation__
 *
 * To run a mutation, you first call `useActivateEnterpriseRetailerBillingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useActivateEnterpriseRetailerBillingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [activateEnterpriseRetailerBillingMutation, { data, loading, error }] = useActivateEnterpriseRetailerBillingMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *   },
 * });
 */
export function useActivateEnterpriseRetailerBillingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlActivateEnterpriseRetailerBillingMutation, GqlActivateEnterpriseRetailerBillingMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlActivateEnterpriseRetailerBillingMutation, GqlActivateEnterpriseRetailerBillingMutationVariables>(ActivateEnterpriseRetailerBillingDocument, baseOptions);
      }
export type ActivateEnterpriseRetailerBillingMutationHookResult = ReturnType<typeof useActivateEnterpriseRetailerBillingMutation>;
export type ActivateEnterpriseRetailerBillingMutationResult = ApolloReactCommon.MutationResult<GqlActivateEnterpriseRetailerBillingMutation>;
export type ActivateEnterpriseRetailerBillingMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlActivateEnterpriseRetailerBillingMutation, GqlActivateEnterpriseRetailerBillingMutationVariables>;
export const GetRetailerBillingSettingsDocument = gql`
    query GetRetailerBillingSettings($retailers: [RetailerInput!]!) {
  getSubscriptionsV2(retailers: $retailers) {
    dispensaryBilling {
      chargebeeCustomer {
        id
        contacts {
          email
        }
      }
      paymentSources {
        card {
          brand
          last4
        }
        type
      }
    }
    chargebeePlan {
      period
      periodUnit
    }
    chargebeeSubscription {
      status
    }
    manualPayments
  }
}
    `;

/**
 * __useGetRetailerBillingSettingsQuery__
 *
 * To run a query within a React component, call `useGetRetailerBillingSettingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRetailerBillingSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRetailerBillingSettingsQuery({
 *   variables: {
 *      retailers: // value for 'retailers'
 *   },
 * });
 */
export function useGetRetailerBillingSettingsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetRetailerBillingSettingsQuery, GqlGetRetailerBillingSettingsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetRetailerBillingSettingsQuery, GqlGetRetailerBillingSettingsQueryVariables>(GetRetailerBillingSettingsDocument, baseOptions);
      }
export function useGetRetailerBillingSettingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetRetailerBillingSettingsQuery, GqlGetRetailerBillingSettingsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetRetailerBillingSettingsQuery, GqlGetRetailerBillingSettingsQueryVariables>(GetRetailerBillingSettingsDocument, baseOptions);
        }
export type GetRetailerBillingSettingsQueryHookResult = ReturnType<typeof useGetRetailerBillingSettingsQuery>;
export type GetRetailerBillingSettingsLazyQueryHookResult = ReturnType<typeof useGetRetailerBillingSettingsLazyQuery>;
export type GetRetailerBillingSettingsQueryResult = ApolloReactCommon.QueryResult<GqlGetRetailerBillingSettingsQuery, GqlGetRetailerBillingSettingsQueryVariables>;
export const GetBillingRetailerDocument = gql`
    query GetBillingRetailer($retailerId: ID!) {
  getRetailer(id: $retailerId) {
    id
    name
    dispensaryId
    status
    retailerGroups {
      groupType
    }
  }
}
    `;

/**
 * __useGetBillingRetailerQuery__
 *
 * To run a query within a React component, call `useGetBillingRetailerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBillingRetailerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBillingRetailerQuery({
 *   variables: {
 *      retailerId: // value for 'retailerId'
 *   },
 * });
 */
export function useGetBillingRetailerQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetBillingRetailerQuery, GqlGetBillingRetailerQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetBillingRetailerQuery, GqlGetBillingRetailerQueryVariables>(GetBillingRetailerDocument, baseOptions);
      }
export function useGetBillingRetailerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetBillingRetailerQuery, GqlGetBillingRetailerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetBillingRetailerQuery, GqlGetBillingRetailerQueryVariables>(GetBillingRetailerDocument, baseOptions);
        }
export type GetBillingRetailerQueryHookResult = ReturnType<typeof useGetBillingRetailerQuery>;
export type GetBillingRetailerLazyQueryHookResult = ReturnType<typeof useGetBillingRetailerLazyQuery>;
export type GetBillingRetailerQueryResult = ApolloReactCommon.QueryResult<GqlGetBillingRetailerQuery, GqlGetBillingRetailerQueryVariables>;
export const SetRetailerBankPaymentDocument = gql`
    mutation SetRetailerBankPayment($retailerIds: [ID!]!, $accountId: String!, $token: String!) {
  setupRetailerBankPaymentMethod(
    retailerIds: $retailerIds
    accountId: $accountId
    token: $token
  ) {
    success
    message
  }
}
    `;
export type GqlSetRetailerBankPaymentMutationFn = ApolloReactCommon.MutationFunction<GqlSetRetailerBankPaymentMutation, GqlSetRetailerBankPaymentMutationVariables>;

/**
 * __useSetRetailerBankPaymentMutation__
 *
 * To run a mutation, you first call `useSetRetailerBankPaymentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetRetailerBankPaymentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setRetailerBankPaymentMutation, { data, loading, error }] = useSetRetailerBankPaymentMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *      accountId: // value for 'accountId'
 *      token: // value for 'token'
 *   },
 * });
 */
export function useSetRetailerBankPaymentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSetRetailerBankPaymentMutation, GqlSetRetailerBankPaymentMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSetRetailerBankPaymentMutation, GqlSetRetailerBankPaymentMutationVariables>(SetRetailerBankPaymentDocument, baseOptions);
      }
export type SetRetailerBankPaymentMutationHookResult = ReturnType<typeof useSetRetailerBankPaymentMutation>;
export type SetRetailerBankPaymentMutationResult = ApolloReactCommon.MutationResult<GqlSetRetailerBankPaymentMutation>;
export type SetRetailerBankPaymentMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSetRetailerBankPaymentMutation, GqlSetRetailerBankPaymentMutationVariables>;
export const SetRetailerBillingNotificationsDocument = gql`
    mutation SetRetailerBillingNotifications($retailerIds: [ID!]!, $notificationEmails: [String]!, $billingNotificationEnabled: Boolean!) {
  updateBillingNotifications(
    retailerIds: $retailerIds
    billingContactEmails: $notificationEmails
    billingNotificationEnabled: $billingNotificationEnabled
  ) {
    success
    message
  }
}
    `;
export type GqlSetRetailerBillingNotificationsMutationFn = ApolloReactCommon.MutationFunction<GqlSetRetailerBillingNotificationsMutation, GqlSetRetailerBillingNotificationsMutationVariables>;

/**
 * __useSetRetailerBillingNotificationsMutation__
 *
 * To run a mutation, you first call `useSetRetailerBillingNotificationsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetRetailerBillingNotificationsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setRetailerBillingNotificationsMutation, { data, loading, error }] = useSetRetailerBillingNotificationsMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *      notificationEmails: // value for 'notificationEmails'
 *      billingNotificationEnabled: // value for 'billingNotificationEnabled'
 *   },
 * });
 */
export function useSetRetailerBillingNotificationsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSetRetailerBillingNotificationsMutation, GqlSetRetailerBillingNotificationsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSetRetailerBillingNotificationsMutation, GqlSetRetailerBillingNotificationsMutationVariables>(SetRetailerBillingNotificationsDocument, baseOptions);
      }
export type SetRetailerBillingNotificationsMutationHookResult = ReturnType<typeof useSetRetailerBillingNotificationsMutation>;
export type SetRetailerBillingNotificationsMutationResult = ApolloReactCommon.MutationResult<GqlSetRetailerBillingNotificationsMutation>;
export type SetRetailerBillingNotificationsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSetRetailerBillingNotificationsMutation, GqlSetRetailerBillingNotificationsMutationVariables>;
export const SetRetailerBillingPeriodDocument = gql`
    mutation SetRetailerBillingPeriod($retailerIds: [ID!]!, $billingPeriod: BillingPeriod!) {
  updateSubscriptionBillingPeriod(
    retailerIds: $retailerIds
    billingPeriod: $billingPeriod
  ) {
    success
    message
  }
}
    `;
export type GqlSetRetailerBillingPeriodMutationFn = ApolloReactCommon.MutationFunction<GqlSetRetailerBillingPeriodMutation, GqlSetRetailerBillingPeriodMutationVariables>;

/**
 * __useSetRetailerBillingPeriodMutation__
 *
 * To run a mutation, you first call `useSetRetailerBillingPeriodMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetRetailerBillingPeriodMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setRetailerBillingPeriodMutation, { data, loading, error }] = useSetRetailerBillingPeriodMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *      billingPeriod: // value for 'billingPeriod'
 *   },
 * });
 */
export function useSetRetailerBillingPeriodMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSetRetailerBillingPeriodMutation, GqlSetRetailerBillingPeriodMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSetRetailerBillingPeriodMutation, GqlSetRetailerBillingPeriodMutationVariables>(SetRetailerBillingPeriodDocument, baseOptions);
      }
export type SetRetailerBillingPeriodMutationHookResult = ReturnType<typeof useSetRetailerBillingPeriodMutation>;
export type SetRetailerBillingPeriodMutationResult = ApolloReactCommon.MutationResult<GqlSetRetailerBillingPeriodMutation>;
export type SetRetailerBillingPeriodMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSetRetailerBillingPeriodMutation, GqlSetRetailerBillingPeriodMutationVariables>;
export const SetRetailerCreditCardPaymentDocument = gql`
    mutation SetRetailerCreditCardPayment($retailerIds: [ID!]!, $token: String!) {
  setupRetailerCreditPaymentMethod(retailerIds: $retailerIds, token: $token) {
    success
    message
  }
}
    `;
export type GqlSetRetailerCreditCardPaymentMutationFn = ApolloReactCommon.MutationFunction<GqlSetRetailerCreditCardPaymentMutation, GqlSetRetailerCreditCardPaymentMutationVariables>;

/**
 * __useSetRetailerCreditCardPaymentMutation__
 *
 * To run a mutation, you first call `useSetRetailerCreditCardPaymentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetRetailerCreditCardPaymentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setRetailerCreditCardPaymentMutation, { data, loading, error }] = useSetRetailerCreditCardPaymentMutation({
 *   variables: {
 *      retailerIds: // value for 'retailerIds'
 *      token: // value for 'token'
 *   },
 * });
 */
export function useSetRetailerCreditCardPaymentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSetRetailerCreditCardPaymentMutation, GqlSetRetailerCreditCardPaymentMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSetRetailerCreditCardPaymentMutation, GqlSetRetailerCreditCardPaymentMutationVariables>(SetRetailerCreditCardPaymentDocument, baseOptions);
      }
export type SetRetailerCreditCardPaymentMutationHookResult = ReturnType<typeof useSetRetailerCreditCardPaymentMutation>;
export type SetRetailerCreditCardPaymentMutationResult = ApolloReactCommon.MutationResult<GqlSetRetailerCreditCardPaymentMutation>;
export type SetRetailerCreditCardPaymentMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSetRetailerCreditCardPaymentMutation, GqlSetRetailerCreditCardPaymentMutationVariables>;
export const AdminPrintedMenuProductsDocument = gql`
    query AdminPrintedMenuProducts($productsFilter: productsFilterInput!, $page: Int, $perPage: Int) {
  filteredProducts(filter: $productsFilter, page: $page, perPage: $perPage) {
    products {
      id
      _id
      DispensaryID
      Name
      Prices
      Options
      medicalOnly
      recOnly
      recPrices
      medicalPrices
      Image
      images {
        _id
        origin
        url
        active
      }
      stockImage
      special
      specialData {
        bogoSpecials {
          bogoConditionLogicOperator
          bogoConditions {
            _id
            brandId
            brandName
            categoryName
            productGroup
            productId
            quantity
            weight
            weightOperator
          }
          bogoRewardLogicOperator
          bogoRewards {
            _id
            brandId
            brandName
            categoryName
            dollarDiscount
            productGroup
            productId
            percentDiscount
            quantity
            targetPrice
            weight
          }
          endStamp
          excludedProducts {
            conditions {
              _id
              key
              Name
            }
            rewards {
              _id
              key
              Name
            }
          }
          isRecurring
          itemsForAPrice {
            _id
            enabled
            value
          }
          discountBundle {
            _id
            applyTo
            discountType
            enabled
            limit
            value
          }
          menuType
          recurringEndDate
          redemptionLimit
          specialId
          specialName
          totalQuantity {
            enabled
            maxQuantity
            quantity
            quantityOperator
          }
          totalWeight {
            enabled
            weight
            weightOperator
          }
          totalSpend {
            enabled
            maximumSpend
            minimumSpend
            spendOperator
          }
        }
        saleSpecials {
          discount
          menuType
          percentDiscount
          source
          sourceId
          specialId
          specialRestrictions
          stackingMode
          targetPrice
        }
        discount
        percentDiscount
      }
      recSpecialPrices
      medicalSpecialPrices
      featured {
        current
      }
      brandId
      brand {
        id
        name
        imageUrl
      }
      brandName
      brandLogo
      Status
      type
      strainType
      updatedAt
      createdAt
      CBD
      CBDContent {
        unit
        range
      }
      THC
      THCContent {
        unit
        range
      }
      weight
    }
    queryInfo {
      totalCount
    }
  }
}
    `;

/**
 * __useAdminPrintedMenuProductsQuery__
 *
 * To run a query within a React component, call `useAdminPrintedMenuProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminPrintedMenuProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminPrintedMenuProductsQuery({
 *   variables: {
 *      productsFilter: // value for 'productsFilter'
 *      page: // value for 'page'
 *      perPage: // value for 'perPage'
 *   },
 * });
 */
export function useAdminPrintedMenuProductsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlAdminPrintedMenuProductsQuery, GqlAdminPrintedMenuProductsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlAdminPrintedMenuProductsQuery, GqlAdminPrintedMenuProductsQueryVariables>(AdminPrintedMenuProductsDocument, baseOptions);
      }
export function useAdminPrintedMenuProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlAdminPrintedMenuProductsQuery, GqlAdminPrintedMenuProductsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlAdminPrintedMenuProductsQuery, GqlAdminPrintedMenuProductsQueryVariables>(AdminPrintedMenuProductsDocument, baseOptions);
        }
export type AdminPrintedMenuProductsQueryHookResult = ReturnType<typeof useAdminPrintedMenuProductsQuery>;
export type AdminPrintedMenuProductsLazyQueryHookResult = ReturnType<typeof useAdminPrintedMenuProductsLazyQuery>;
export type AdminPrintedMenuProductsQueryResult = ApolloReactCommon.QueryResult<GqlAdminPrintedMenuProductsQuery, GqlAdminPrintedMenuProductsQueryVariables>;
export const GetExportDocument = gql`
    query GetExport($id: String!) {
  getExport(id: $id) {
    url
  }
}
    `;

/**
 * __useGetExportQuery__
 *
 * To run a query within a React component, call `useGetExportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetExportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetExportQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetExportQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetExportQuery, GqlGetExportQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetExportQuery, GqlGetExportQueryVariables>(GetExportDocument, baseOptions);
      }
export function useGetExportLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetExportQuery, GqlGetExportQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetExportQuery, GqlGetExportQueryVariables>(GetExportDocument, baseOptions);
        }
export type GetExportQueryHookResult = ReturnType<typeof useGetExportQuery>;
export type GetExportLazyQueryHookResult = ReturnType<typeof useGetExportLazyQuery>;
export type GetExportQueryResult = ApolloReactCommon.QueryResult<GqlGetExportQuery, GqlGetExportQueryVariables>;
export const MeAdminDocument = gql`
    query MeAdmin {
  meAdmin {
    _id
    createdAt
    chainDispensaryIds
    enterpriseId
    emails {
      address
    }
    dispensary {
      chain
      customDomainSettings {
        domain
      }
      embeddedMenuUrl
      id
      name
      location {
        city
        state
        country
        zipcode
      }
      phone
      status
      tier
      timezone
    }
    profile {
      audioNotificationsOnNewArrivalsDisabled
      audioNotificationsOnNewOrdersDisabled
      browserNotification
      chainID
      desktopNotification
      dispensaryId
      emailNotifications
      firstName
      fullName
      lastName
      isWeeklyReportEnabled
      permissions {
        allLocations
        billing
        analytics
        customers
        dispensaryIds
        driver
        enterpriseAdmin
        enterpriseSpecials
        menu
        menuReview
        messaging
        superMenuReview
        orders
        promote
        settings
        users
        tasks
        techSupportFeatures
      }
      phone
      roleAtDispensary
      streamTokens {
        dispensaryId
        token
      }
      textNotifications
      type
      firstViewedTOS
      acceptedTOS
    }
    zendeskWidgetToken
    zendeskSingleSignOnToken
  }
}
    `;

/**
 * __useMeAdminQuery__
 *
 * To run a query within a React component, call `useMeAdminQuery` and pass it any options that fit your needs.
 * When your component renders, `useMeAdminQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMeAdminQuery({
 *   variables: {
 *   },
 * });
 */
export function useMeAdminQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlMeAdminQuery, GqlMeAdminQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlMeAdminQuery, GqlMeAdminQueryVariables>(MeAdminDocument, baseOptions);
      }
export function useMeAdminLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlMeAdminQuery, GqlMeAdminQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlMeAdminQuery, GqlMeAdminQueryVariables>(MeAdminDocument, baseOptions);
        }
export type MeAdminQueryHookResult = ReturnType<typeof useMeAdminQuery>;
export type MeAdminLazyQueryHookResult = ReturnType<typeof useMeAdminLazyQuery>;
export type MeAdminQueryResult = ApolloReactCommon.QueryResult<GqlMeAdminQuery, GqlMeAdminQueryVariables>;
export const GetOrdersDocument = gql`
    query GetOrders($input: getOrdersInput!) {
  getOrders(input: $input) {
    orders {
      createdAt
      customerId
      customerEmail
      customerName
      customerPhone
      firstName
      lastName
      delivery
      durationEstimates {
        delivery {
          lowInMinutes
          highInMinutes
        }
        pickup {
          lowInMinutes
          highInMinutes
        }
      }
      deliveryInfo {
        address
        apartmentNum
        deliveryAddress
        deliveryOption
        lastSearchedAddress
        nonDeliveryAddress
      }
      dispensaryId
      dispensaryName
      dispoTimezone
      deliveryOption
      duration
      effectiveStatus
      orderId
      orderType
      status
      reopened
      totalCost
      isAnonymous
      isKioskOrder
      isAfterHoursOrder
      _id
      fleetManagementTask {
        id
        adapter
      }
      pos {
        externalID
        failureAcks {
          terminal
          web
        }
        failureReason
        failureType
        humanReadableError
        name
      }
      reservation {
        startTimeISO
        endTimeISO
      }
    }
  }
}
    `;

/**
 * __useGetOrdersQuery__
 *
 * To run a query within a React component, call `useGetOrdersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrdersQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetOrdersQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetOrdersQuery, GqlGetOrdersQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetOrdersQuery, GqlGetOrdersQueryVariables>(GetOrdersDocument, baseOptions);
      }
export function useGetOrdersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetOrdersQuery, GqlGetOrdersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetOrdersQuery, GqlGetOrdersQueryVariables>(GetOrdersDocument, baseOptions);
        }
export type GetOrdersQueryHookResult = ReturnType<typeof useGetOrdersQuery>;
export type GetOrdersLazyQueryHookResult = ReturnType<typeof useGetOrdersLazyQuery>;
export type GetOrdersQueryResult = ApolloReactCommon.QueryResult<GqlGetOrdersQuery, GqlGetOrdersQueryVariables>;
export const RevertBrandMergeDocument = gql`
    mutation RevertBrandMerge($id: String!) {
  revertBrandMerge(id: $id) {
    id
  }
}
    `;
export type GqlRevertBrandMergeMutationFn = ApolloReactCommon.MutationFunction<GqlRevertBrandMergeMutation, GqlRevertBrandMergeMutationVariables>;

/**
 * __useRevertBrandMergeMutation__
 *
 * To run a mutation, you first call `useRevertBrandMergeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRevertBrandMergeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [revertBrandMergeMutation, { data, loading, error }] = useRevertBrandMergeMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRevertBrandMergeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlRevertBrandMergeMutation, GqlRevertBrandMergeMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlRevertBrandMergeMutation, GqlRevertBrandMergeMutationVariables>(RevertBrandMergeDocument, baseOptions);
      }
export type RevertBrandMergeMutationHookResult = ReturnType<typeof useRevertBrandMergeMutation>;
export type RevertBrandMergeMutationResult = ApolloReactCommon.MutationResult<GqlRevertBrandMergeMutation>;
export type RevertBrandMergeMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlRevertBrandMergeMutation, GqlRevertBrandMergeMutationVariables>;
export const BrandMergeHistoryIndexDocument = gql`
    query BrandMergeHistoryIndex($filters: brandMergeHistoriesFilters, $page: brandMergeHistoriesPagination, $sort: brandMergeHistoriesSort) {
  getBrandMergeHistories(filters: $filters, page: $page, sort: $sort) {
    brandMergeHistories {
      id
      sourceBrand {
        id
        name
        dispensary {
          id
          name
        }
      }
      destinationBrand {
        id
        name
        dispensary {
          id
          name
        }
      }
      createdAt
      revertedAt
      user {
        email
      }
    }
    queryInfo {
      totalCount
    }
  }
}
    `;

/**
 * __useBrandMergeHistoryIndexQuery__
 *
 * To run a query within a React component, call `useBrandMergeHistoryIndexQuery` and pass it any options that fit your needs.
 * When your component renders, `useBrandMergeHistoryIndexQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBrandMergeHistoryIndexQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *      page: // value for 'page'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useBrandMergeHistoryIndexQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlBrandMergeHistoryIndexQuery, GqlBrandMergeHistoryIndexQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlBrandMergeHistoryIndexQuery, GqlBrandMergeHistoryIndexQueryVariables>(BrandMergeHistoryIndexDocument, baseOptions);
      }
export function useBrandMergeHistoryIndexLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlBrandMergeHistoryIndexQuery, GqlBrandMergeHistoryIndexQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlBrandMergeHistoryIndexQuery, GqlBrandMergeHistoryIndexQueryVariables>(BrandMergeHistoryIndexDocument, baseOptions);
        }
export type BrandMergeHistoryIndexQueryHookResult = ReturnType<typeof useBrandMergeHistoryIndexQuery>;
export type BrandMergeHistoryIndexLazyQueryHookResult = ReturnType<typeof useBrandMergeHistoryIndexLazyQuery>;
export type BrandMergeHistoryIndexQueryResult = ApolloReactCommon.QueryResult<GqlBrandMergeHistoryIndexQuery, GqlBrandMergeHistoryIndexQueryVariables>;
export const MergeBrandDocument = gql`
    mutation MergeBrand($id: String!, $destinationBrandId: String!) {
  mergeBrand(id: $id, destinationBrandId: $destinationBrandId) {
    id
  }
}
    `;
export type GqlMergeBrandMutationFn = ApolloReactCommon.MutationFunction<GqlMergeBrandMutation, GqlMergeBrandMutationVariables>;

/**
 * __useMergeBrandMutation__
 *
 * To run a mutation, you first call `useMergeBrandMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMergeBrandMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [mergeBrandMutation, { data, loading, error }] = useMergeBrandMutation({
 *   variables: {
 *      id: // value for 'id'
 *      destinationBrandId: // value for 'destinationBrandId'
 *   },
 * });
 */
export function useMergeBrandMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlMergeBrandMutation, GqlMergeBrandMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlMergeBrandMutation, GqlMergeBrandMutationVariables>(MergeBrandDocument, baseOptions);
      }
export type MergeBrandMutationHookResult = ReturnType<typeof useMergeBrandMutation>;
export type MergeBrandMutationResult = ApolloReactCommon.MutationResult<GqlMergeBrandMutation>;
export type MergeBrandMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlMergeBrandMutation, GqlMergeBrandMutationVariables>;
export const UpdateBrandCollisionDocument = gql`
    mutation UpdateBrandCollision($id: String!, $input: brandCollisionInput!) {
  updateBrandCollision(id: $id, brandCollision: $input) {
    id
  }
}
    `;
export type GqlUpdateBrandCollisionMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateBrandCollisionMutation, GqlUpdateBrandCollisionMutationVariables>;

/**
 * __useUpdateBrandCollisionMutation__
 *
 * To run a mutation, you first call `useUpdateBrandCollisionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBrandCollisionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBrandCollisionMutation, { data, loading, error }] = useUpdateBrandCollisionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateBrandCollisionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateBrandCollisionMutation, GqlUpdateBrandCollisionMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateBrandCollisionMutation, GqlUpdateBrandCollisionMutationVariables>(UpdateBrandCollisionDocument, baseOptions);
      }
export type UpdateBrandCollisionMutationHookResult = ReturnType<typeof useUpdateBrandCollisionMutation>;
export type UpdateBrandCollisionMutationResult = ApolloReactCommon.MutationResult<GqlUpdateBrandCollisionMutation>;
export type UpdateBrandCollisionMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateBrandCollisionMutation, GqlUpdateBrandCollisionMutationVariables>;
export const BrandMergeToolIndexDocument = gql`
    query BrandMergeToolIndex($filters: searchBrandsFilters, $pagination: paginationInput, $search: String, $sort: searchBrandsSort) {
  searchBrandsV2(
    filters: $filters
    pagination: $pagination
    search: $search
    sort: $sort
  ) {
    brands {
      id
      brandCollisions {
        createdAt
        id
        isAllowed
        firstBrand {
          dispensary {
            id
            name
          }
          id
          name
          productsCount
        }
        secondBrand {
          dispensary {
            id
            name
          }
          id
          name
          productsCount
        }
      }
    }
    queryInfo {
      totalCount
    }
  }
}
    `;

/**
 * __useBrandMergeToolIndexQuery__
 *
 * To run a query within a React component, call `useBrandMergeToolIndexQuery` and pass it any options that fit your needs.
 * When your component renders, `useBrandMergeToolIndexQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBrandMergeToolIndexQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *      pagination: // value for 'pagination'
 *      search: // value for 'search'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useBrandMergeToolIndexQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlBrandMergeToolIndexQuery, GqlBrandMergeToolIndexQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlBrandMergeToolIndexQuery, GqlBrandMergeToolIndexQueryVariables>(BrandMergeToolIndexDocument, baseOptions);
      }
export function useBrandMergeToolIndexLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlBrandMergeToolIndexQuery, GqlBrandMergeToolIndexQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlBrandMergeToolIndexQuery, GqlBrandMergeToolIndexQueryVariables>(BrandMergeToolIndexDocument, baseOptions);
        }
export type BrandMergeToolIndexQueryHookResult = ReturnType<typeof useBrandMergeToolIndexQuery>;
export type BrandMergeToolIndexLazyQueryHookResult = ReturnType<typeof useBrandMergeToolIndexLazyQuery>;
export type BrandMergeToolIndexQueryResult = ApolloReactCommon.QueryResult<GqlBrandMergeToolIndexQuery, GqlBrandMergeToolIndexQueryVariables>;
export const VerifyBucketProductsDocument = gql`
    mutation VerifyBucketProducts($ids: [String!]!) {
  verifyBucketProducts(ids: $ids) {
    message
    success
  }
}
    `;
export type GqlVerifyBucketProductsMutationFn = ApolloReactCommon.MutationFunction<GqlVerifyBucketProductsMutation, GqlVerifyBucketProductsMutationVariables>;

/**
 * __useVerifyBucketProductsMutation__
 *
 * To run a mutation, you first call `useVerifyBucketProductsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVerifyBucketProductsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [verifyBucketProductsMutation, { data, loading, error }] = useVerifyBucketProductsMutation({
 *   variables: {
 *      ids: // value for 'ids'
 *   },
 * });
 */
export function useVerifyBucketProductsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlVerifyBucketProductsMutation, GqlVerifyBucketProductsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlVerifyBucketProductsMutation, GqlVerifyBucketProductsMutationVariables>(VerifyBucketProductsDocument, baseOptions);
      }
export type VerifyBucketProductsMutationHookResult = ReturnType<typeof useVerifyBucketProductsMutation>;
export type VerifyBucketProductsMutationResult = ApolloReactCommon.MutationResult<GqlVerifyBucketProductsMutation>;
export type VerifyBucketProductsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlVerifyBucketProductsMutation, GqlVerifyBucketProductsMutationVariables>;
export const GetBulkBucketProductReviewDocument = gql`
    query GetBulkBucketProductReview($pagination: paginationInput!, $filter: SearchBucketProductFilter, $sort: SearchBucketProductSort) {
  searchBucketProducts(pagination: $pagination, filter: $filter, sort: $sort) {
    bucketProducts {
      id
      reviewedAt
      reviewedByUser {
        _id
        fullName
        firstName
        lastName
      }
      product {
        CBDContent {
          unit
          range
        }
        Status
        DispensaryID
        id
        libraryProduct {
          brand {
            name
          }
          category
          cbdContent {
            unit
            range
          }
          name
          thcContent {
            unit
            range
          }
        }
        POSMetaData {
          canonicalName
          canonicalBrandName
          canonicalCategory
        }
        THCContent {
          unit
          range
        }
      }
      verified
      oldProductData {
        CBDContent {
          unit
          range
        }
        THCContent {
          unit
          range
        }
        Name
        brand {
          name
        }
        brandId
        brandName
        POSMetaData {
          canonicalName
          canonicalBrandName
          canonicalCategory
        }
        type
        subcategory
      }
    }
    meta {
      totalCount
      reviewers {
        _id
        fullName
        firstName
        lastName
      }
    }
  }
}
    `;

/**
 * __useGetBulkBucketProductReviewQuery__
 *
 * To run a query within a React component, call `useGetBulkBucketProductReviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBulkBucketProductReviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBulkBucketProductReviewQuery({
 *   variables: {
 *      pagination: // value for 'pagination'
 *      filter: // value for 'filter'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetBulkBucketProductReviewQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetBulkBucketProductReviewQuery, GqlGetBulkBucketProductReviewQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetBulkBucketProductReviewQuery, GqlGetBulkBucketProductReviewQueryVariables>(GetBulkBucketProductReviewDocument, baseOptions);
      }
export function useGetBulkBucketProductReviewLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetBulkBucketProductReviewQuery, GqlGetBulkBucketProductReviewQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetBulkBucketProductReviewQuery, GqlGetBulkBucketProductReviewQueryVariables>(GetBulkBucketProductReviewDocument, baseOptions);
        }
export type GetBulkBucketProductReviewQueryHookResult = ReturnType<typeof useGetBulkBucketProductReviewQuery>;
export type GetBulkBucketProductReviewLazyQueryHookResult = ReturnType<typeof useGetBulkBucketProductReviewLazyQuery>;
export type GetBulkBucketProductReviewQueryResult = ApolloReactCommon.QueryResult<GqlGetBulkBucketProductReviewQuery, GqlGetBulkBucketProductReviewQueryVariables>;
export const CheckInBucketV2Document = gql`
    mutation CheckInBucketV2($uuid: String!) {
  checkInBucketV2(uuid: $uuid) {
    id
  }
}
    `;
export type GqlCheckInBucketV2MutationFn = ApolloReactCommon.MutationFunction<GqlCheckInBucketV2Mutation, GqlCheckInBucketV2MutationVariables>;

/**
 * __useCheckInBucketV2Mutation__
 *
 * To run a mutation, you first call `useCheckInBucketV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCheckInBucketV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [checkInBucketV2Mutation, { data, loading, error }] = useCheckInBucketV2Mutation({
 *   variables: {
 *      uuid: // value for 'uuid'
 *   },
 * });
 */
export function useCheckInBucketV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCheckInBucketV2Mutation, GqlCheckInBucketV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCheckInBucketV2Mutation, GqlCheckInBucketV2MutationVariables>(CheckInBucketV2Document, baseOptions);
      }
export type CheckInBucketV2MutationHookResult = ReturnType<typeof useCheckInBucketV2Mutation>;
export type CheckInBucketV2MutationResult = ApolloReactCommon.MutationResult<GqlCheckInBucketV2Mutation>;
export type CheckInBucketV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCheckInBucketV2Mutation, GqlCheckInBucketV2MutationVariables>;
export const CheckOutBucketV2Document = gql`
    mutation CheckOutBucketV2($bucketId: String!, $uuid: String!) {
  checkOutBucketV2(bucketId: $bucketId, uuid: $uuid) {
    completedReviewsCount
    checkedOutAt
    checkedOutBy {
      _id
      firstName
      lastName
    }
    id
    name
    products {
      ...adminContentBaseProductFragment
      brand {
        _id
        id
        name
      }
      matchedLibraryItems {
        _id
        name
        score
      }
      dispensary {
        id
        location {
          state
        }
        medicalDispensary
        medicalOnly
        name
        recDispensary
        storeSettings {
          isolatedMenus
        }
        timezone
      }
      libraryProduct {
        id
        name
      }
      speculativeEdits {
        ...adminContentBaseProductFragment
      }
    }
    productsCount
    teamName
  }
}
    ${AdminContentBaseProductFragmentFragmentDoc}`;
export type GqlCheckOutBucketV2MutationFn = ApolloReactCommon.MutationFunction<GqlCheckOutBucketV2Mutation, GqlCheckOutBucketV2MutationVariables>;

/**
 * __useCheckOutBucketV2Mutation__
 *
 * To run a mutation, you first call `useCheckOutBucketV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCheckOutBucketV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [checkOutBucketV2Mutation, { data, loading, error }] = useCheckOutBucketV2Mutation({
 *   variables: {
 *      bucketId: // value for 'bucketId'
 *      uuid: // value for 'uuid'
 *   },
 * });
 */
export function useCheckOutBucketV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCheckOutBucketV2Mutation, GqlCheckOutBucketV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCheckOutBucketV2Mutation, GqlCheckOutBucketV2MutationVariables>(CheckOutBucketV2Document, baseOptions);
      }
export type CheckOutBucketV2MutationHookResult = ReturnType<typeof useCheckOutBucketV2Mutation>;
export type CheckOutBucketV2MutationResult = ApolloReactCommon.MutationResult<GqlCheckOutBucketV2Mutation>;
export type CheckOutBucketV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCheckOutBucketV2Mutation, GqlCheckOutBucketV2MutationVariables>;
export const CheckOutBucketV3Document = gql`
    mutation CheckOutBucketV3($bucketId: String!, $uuid: String!) {
  checkOutBucketV3(bucketId: $bucketId, uuid: $uuid) {
    completedReviewsCount
    checkedOutAt
    checkedOutBy {
      _id
      firstName
      lastName
    }
    id
    name
    productIds
    productsCount
    teamName
  }
}
    `;
export type GqlCheckOutBucketV3MutationFn = ApolloReactCommon.MutationFunction<GqlCheckOutBucketV3Mutation, GqlCheckOutBucketV3MutationVariables>;

/**
 * __useCheckOutBucketV3Mutation__
 *
 * To run a mutation, you first call `useCheckOutBucketV3Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCheckOutBucketV3Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [checkOutBucketV3Mutation, { data, loading, error }] = useCheckOutBucketV3Mutation({
 *   variables: {
 *      bucketId: // value for 'bucketId'
 *      uuid: // value for 'uuid'
 *   },
 * });
 */
export function useCheckOutBucketV3Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCheckOutBucketV3Mutation, GqlCheckOutBucketV3MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCheckOutBucketV3Mutation, GqlCheckOutBucketV3MutationVariables>(CheckOutBucketV3Document, baseOptions);
      }
export type CheckOutBucketV3MutationHookResult = ReturnType<typeof useCheckOutBucketV3Mutation>;
export type CheckOutBucketV3MutationResult = ApolloReactCommon.MutationResult<GqlCheckOutBucketV3Mutation>;
export type CheckOutBucketV3MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCheckOutBucketV3Mutation, GqlCheckOutBucketV3MutationVariables>;
export const CloseBucketDocument = gql`
    mutation CloseBucket($id: String!) {
  closeBucket(id: $id) {
    id
  }
}
    `;
export type GqlCloseBucketMutationFn = ApolloReactCommon.MutationFunction<GqlCloseBucketMutation, GqlCloseBucketMutationVariables>;

/**
 * __useCloseBucketMutation__
 *
 * To run a mutation, you first call `useCloseBucketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCloseBucketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [closeBucketMutation, { data, loading, error }] = useCloseBucketMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useCloseBucketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCloseBucketMutation, GqlCloseBucketMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCloseBucketMutation, GqlCloseBucketMutationVariables>(CloseBucketDocument, baseOptions);
      }
export type CloseBucketMutationHookResult = ReturnType<typeof useCloseBucketMutation>;
export type CloseBucketMutationResult = ApolloReactCommon.MutationResult<GqlCloseBucketMutation>;
export type CloseBucketMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCloseBucketMutation, GqlCloseBucketMutationVariables>;
export const ConnectProductPreviewDocument = gql`
    mutation ConnectProductPreview($id: String!, $libraryProductId: String!) {
  connectProductPreview(id: $id, libraryProductId: $libraryProductId) {
    previewProduct {
      product {
        _id
        id
        additionalOptions
        brandId
        brandLogo
        brandName
        cbdContent {
          range
          unit
        }
        cName
        description
        descriptionHtml
        dispensaryId
        dispensaryName
        duplicatedProductId
        effects
        image
        integrationKey
        isBelowKioskThreshold
        isBelowThreshold
        matchedLibraryItems {
          _id
        }
        matchedLibraryItemsConfidence
        medicalOnly
        medicalPrices
        name
        options
        overrides
        posMetaData {
          canonicalName
          canonicalCategory
          children {
            option
          }
        }
        prices
        recOnly
        recPrices
        strainType
        status
        subcategory
        thcContent {
          range
          unit
        }
        type
        weight
      }
      productImages {
        _id
        url
        origin
        active
        label
        description
      }
      productBatch {
        id
      }
      terpenes {
        id
        terpeneId
        name
        unit
        active
      }
      appliedLibraryAttributes {
        additionalOptions
        brandId
        brandLogo
        brandName
        cbdContent {
          range
          unit
        }
        cName
        description
        descriptionHtml
        dispensaryId
        dispensaryName
        duplicatedProductId
        effects
        image
        integrationKey
        isBelowKioskThreshold
        isBelowThreshold
        matchedLibraryItems {
          _id
        }
        matchedLibraryItemsConfidence
        medicalOnly
        medicalPrices
        modifiedAttributes
        name
        options
        posMetaData {
          children {
            canonicalName
            option
          }
        }
        prices
        recOnly
        recPrices
        strainType
        status
        subcategory
        thcContent {
          range
          unit
        }
        type
        weight
      }
    }
  }
}
    `;
export type GqlConnectProductPreviewMutationFn = ApolloReactCommon.MutationFunction<GqlConnectProductPreviewMutation, GqlConnectProductPreviewMutationVariables>;

/**
 * __useConnectProductPreviewMutation__
 *
 * To run a mutation, you first call `useConnectProductPreviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useConnectProductPreviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [connectProductPreviewMutation, { data, loading, error }] = useConnectProductPreviewMutation({
 *   variables: {
 *      id: // value for 'id'
 *      libraryProductId: // value for 'libraryProductId'
 *   },
 * });
 */
export function useConnectProductPreviewMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlConnectProductPreviewMutation, GqlConnectProductPreviewMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlConnectProductPreviewMutation, GqlConnectProductPreviewMutationVariables>(ConnectProductPreviewDocument, baseOptions);
      }
export type ConnectProductPreviewMutationHookResult = ReturnType<typeof useConnectProductPreviewMutation>;
export type ConnectProductPreviewMutationResult = ApolloReactCommon.MutationResult<GqlConnectProductPreviewMutation>;
export type ConnectProductPreviewMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlConnectProductPreviewMutation, GqlConnectProductPreviewMutationVariables>;
export const CreateBucketV2Document = gql`
    mutation CreateBucketV2($bucket: createBucketInput!) {
  createBucketV2(bucket: $bucket) {
    id
  }
}
    `;
export type GqlCreateBucketV2MutationFn = ApolloReactCommon.MutationFunction<GqlCreateBucketV2Mutation, GqlCreateBucketV2MutationVariables>;

/**
 * __useCreateBucketV2Mutation__
 *
 * To run a mutation, you first call `useCreateBucketV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBucketV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBucketV2Mutation, { data, loading, error }] = useCreateBucketV2Mutation({
 *   variables: {
 *      bucket: // value for 'bucket'
 *   },
 * });
 */
export function useCreateBucketV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateBucketV2Mutation, GqlCreateBucketV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateBucketV2Mutation, GqlCreateBucketV2MutationVariables>(CreateBucketV2Document, baseOptions);
      }
export type CreateBucketV2MutationHookResult = ReturnType<typeof useCreateBucketV2Mutation>;
export type CreateBucketV2MutationResult = ApolloReactCommon.MutationResult<GqlCreateBucketV2Mutation>;
export type CreateBucketV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateBucketV2Mutation, GqlCreateBucketV2MutationVariables>;
export const CreateBucketV3Document = gql`
    mutation CreateBucketV3($bucket: createBucketInputV3!) {
  createBucketV3(bucket: $bucket) {
    id
  }
}
    `;
export type GqlCreateBucketV3MutationFn = ApolloReactCommon.MutationFunction<GqlCreateBucketV3Mutation, GqlCreateBucketV3MutationVariables>;

/**
 * __useCreateBucketV3Mutation__
 *
 * To run a mutation, you first call `useCreateBucketV3Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBucketV3Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBucketV3Mutation, { data, loading, error }] = useCreateBucketV3Mutation({
 *   variables: {
 *      bucket: // value for 'bucket'
 *   },
 * });
 */
export function useCreateBucketV3Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateBucketV3Mutation, GqlCreateBucketV3MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateBucketV3Mutation, GqlCreateBucketV3MutationVariables>(CreateBucketV3Document, baseOptions);
      }
export type CreateBucketV3MutationHookResult = ReturnType<typeof useCreateBucketV3Mutation>;
export type CreateBucketV3MutationResult = ApolloReactCommon.MutationResult<GqlCreateBucketV3Mutation>;
export type CreateBucketV3MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateBucketV3Mutation, GqlCreateBucketV3MutationVariables>;
export const DisconnectBucketProductDocument = gql`
    mutation DisconnectBucketProduct($bucketId: String!, $productId: String!) {
  disconnectBucketProduct(bucketId: $bucketId, productId: $productId) {
    message
    success
  }
}
    `;
export type GqlDisconnectBucketProductMutationFn = ApolloReactCommon.MutationFunction<GqlDisconnectBucketProductMutation, GqlDisconnectBucketProductMutationVariables>;

/**
 * __useDisconnectBucketProductMutation__
 *
 * To run a mutation, you first call `useDisconnectBucketProductMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDisconnectBucketProductMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [disconnectBucketProductMutation, { data, loading, error }] = useDisconnectBucketProductMutation({
 *   variables: {
 *      bucketId: // value for 'bucketId'
 *      productId: // value for 'productId'
 *   },
 * });
 */
export function useDisconnectBucketProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDisconnectBucketProductMutation, GqlDisconnectBucketProductMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDisconnectBucketProductMutation, GqlDisconnectBucketProductMutationVariables>(DisconnectBucketProductDocument, baseOptions);
      }
export type DisconnectBucketProductMutationHookResult = ReturnType<typeof useDisconnectBucketProductMutation>;
export type DisconnectBucketProductMutationResult = ApolloReactCommon.MutationResult<GqlDisconnectBucketProductMutation>;
export type DisconnectBucketProductMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDisconnectBucketProductMutation, GqlDisconnectBucketProductMutationVariables>;
export const SkipBucketProductV2Document = gql`
    mutation SkipBucketProductV2($bucketId: String!, $productId: String!, $skipReasons: [SkipReasonEnum!]!) {
  skipBucketProductV2(
    bucketId: $bucketId
    productId: $productId
    skipReasons: $skipReasons
  ) {
    message
    success
  }
}
    `;
export type GqlSkipBucketProductV2MutationFn = ApolloReactCommon.MutationFunction<GqlSkipBucketProductV2Mutation, GqlSkipBucketProductV2MutationVariables>;

/**
 * __useSkipBucketProductV2Mutation__
 *
 * To run a mutation, you first call `useSkipBucketProductV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSkipBucketProductV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [skipBucketProductV2Mutation, { data, loading, error }] = useSkipBucketProductV2Mutation({
 *   variables: {
 *      bucketId: // value for 'bucketId'
 *      productId: // value for 'productId'
 *      skipReasons: // value for 'skipReasons'
 *   },
 * });
 */
export function useSkipBucketProductV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSkipBucketProductV2Mutation, GqlSkipBucketProductV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSkipBucketProductV2Mutation, GqlSkipBucketProductV2MutationVariables>(SkipBucketProductV2Document, baseOptions);
      }
export type SkipBucketProductV2MutationHookResult = ReturnType<typeof useSkipBucketProductV2Mutation>;
export type SkipBucketProductV2MutationResult = ApolloReactCommon.MutationResult<GqlSkipBucketProductV2Mutation>;
export type SkipBucketProductV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSkipBucketProductV2Mutation, GqlSkipBucketProductV2MutationVariables>;
export const SkipBucketProductDocument = gql`
    mutation SkipBucketProduct($bucketId: String!, $productId: String!) {
  skipBucketProduct(bucketId: $bucketId, productId: $productId) {
    message
    success
  }
}
    `;
export type GqlSkipBucketProductMutationFn = ApolloReactCommon.MutationFunction<GqlSkipBucketProductMutation, GqlSkipBucketProductMutationVariables>;

/**
 * __useSkipBucketProductMutation__
 *
 * To run a mutation, you first call `useSkipBucketProductMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSkipBucketProductMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [skipBucketProductMutation, { data, loading, error }] = useSkipBucketProductMutation({
 *   variables: {
 *      bucketId: // value for 'bucketId'
 *      productId: // value for 'productId'
 *   },
 * });
 */
export function useSkipBucketProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlSkipBucketProductMutation, GqlSkipBucketProductMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlSkipBucketProductMutation, GqlSkipBucketProductMutationVariables>(SkipBucketProductDocument, baseOptions);
      }
export type SkipBucketProductMutationHookResult = ReturnType<typeof useSkipBucketProductMutation>;
export type SkipBucketProductMutationResult = ApolloReactCommon.MutationResult<GqlSkipBucketProductMutation>;
export type SkipBucketProductMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlSkipBucketProductMutation, GqlSkipBucketProductMutationVariables>;
export const ContentStatisticsDocument = gql`
    query ContentStatistics {
  contentStatistics {
    connectedPercentage
    menuScore
  }
}
    `;

/**
 * __useContentStatisticsQuery__
 *
 * To run a query within a React component, call `useContentStatisticsQuery` and pass it any options that fit your needs.
 * When your component renders, `useContentStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useContentStatisticsQuery({
 *   variables: {
 *   },
 * });
 */
export function useContentStatisticsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlContentStatisticsQuery, GqlContentStatisticsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlContentStatisticsQuery, GqlContentStatisticsQueryVariables>(ContentStatisticsDocument, baseOptions);
      }
export function useContentStatisticsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlContentStatisticsQuery, GqlContentStatisticsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlContentStatisticsQuery, GqlContentStatisticsQueryVariables>(ContentStatisticsDocument, baseOptions);
        }
export type ContentStatisticsQueryHookResult = ReturnType<typeof useContentStatisticsQuery>;
export type ContentStatisticsLazyQueryHookResult = ReturnType<typeof useContentStatisticsLazyQuery>;
export type ContentStatisticsQueryResult = ApolloReactCommon.QueryResult<GqlContentStatisticsQuery, GqlContentStatisticsQueryVariables>;
export const GetBucketsDocument = gql`
    query GetBuckets($sort: brandsSortInput) {
  getBuckets(sort: $sort) {
    ...bucketListFragment
  }
}
    ${BucketListFragmentFragmentDoc}`;

/**
 * __useGetBucketsQuery__
 *
 * To run a query within a React component, call `useGetBucketsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBucketsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBucketsQuery({
 *   variables: {
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetBucketsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlGetBucketsQuery, GqlGetBucketsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetBucketsQuery, GqlGetBucketsQueryVariables>(GetBucketsDocument, baseOptions);
      }
export function useGetBucketsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetBucketsQuery, GqlGetBucketsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetBucketsQuery, GqlGetBucketsQueryVariables>(GetBucketsDocument, baseOptions);
        }
export type GetBucketsQueryHookResult = ReturnType<typeof useGetBucketsQuery>;
export type GetBucketsLazyQueryHookResult = ReturnType<typeof useGetBucketsLazyQuery>;
export type GetBucketsQueryResult = ApolloReactCommon.QueryResult<GqlGetBucketsQuery, GqlGetBucketsQueryVariables>;
export const GetProductDocument = gql`
    query GetProduct($productsFilter: productsFilterInput!) {
  filteredProducts(filter: $productsFilter) {
    products {
      ...adminContentBaseProductFragment
      brand {
        _id
        id
        name
      }
      matchedLibraryItems {
        _id
        name
        score
      }
      dispensary {
        id
        location {
          state
        }
        medicalDispensary
        medicalOnly
        name
        recDispensary
        storeSettings {
          isolatedMenus
        }
        timezone
      }
      libraryProduct {
        id
        name
      }
      speculativeEdits {
        ...adminContentBaseProductFragment
      }
    }
  }
}
    ${AdminContentBaseProductFragmentFragmentDoc}`;

/**
 * __useGetProductQuery__
 *
 * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProductQuery({
 *   variables: {
 *      productsFilter: // value for 'productsFilter'
 *   },
 * });
 */
export function useGetProductQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetProductQuery, GqlGetProductQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetProductQuery, GqlGetProductQueryVariables>(GetProductDocument, baseOptions);
      }
export function useGetProductLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetProductQuery, GqlGetProductQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetProductQuery, GqlGetProductQueryVariables>(GetProductDocument, baseOptions);
        }
export type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;
export type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;
export type GetProductQueryResult = ApolloReactCommon.QueryResult<GqlGetProductQuery, GqlGetProductQueryVariables>;
export const RefreshBucketDocument = gql`
    query RefreshBucket($id: String!) {
  getBucket(id: $id) {
    ...bucketListFragment
  }
}
    ${BucketListFragmentFragmentDoc}`;

/**
 * __useRefreshBucketQuery__
 *
 * To run a query within a React component, call `useRefreshBucketQuery` and pass it any options that fit your needs.
 * When your component renders, `useRefreshBucketQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRefreshBucketQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRefreshBucketQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlRefreshBucketQuery, GqlRefreshBucketQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlRefreshBucketQuery, GqlRefreshBucketQueryVariables>(RefreshBucketDocument, baseOptions);
      }
export function useRefreshBucketLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlRefreshBucketQuery, GqlRefreshBucketQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlRefreshBucketQuery, GqlRefreshBucketQueryVariables>(RefreshBucketDocument, baseOptions);
        }
export type RefreshBucketQueryHookResult = ReturnType<typeof useRefreshBucketQuery>;
export type RefreshBucketLazyQueryHookResult = ReturnType<typeof useRefreshBucketLazyQuery>;
export type RefreshBucketQueryResult = ApolloReactCommon.QueryResult<GqlRefreshBucketQuery, GqlRefreshBucketQueryVariables>;
export const CopyLibraryProductDocument = gql`
    mutation CopyLibraryProduct($id: String!, $stateLibraryIds: [String!]!) {
  copyLibraryProduct(id: $id, stateLibraryIds: $stateLibraryIds) {
    libraryProducts {
      dispensaryId
    }
    meta {
      errors {
        type
        errors
        state_library_id
      }
    }
  }
}
    `;
export type GqlCopyLibraryProductMutationFn = ApolloReactCommon.MutationFunction<GqlCopyLibraryProductMutation, GqlCopyLibraryProductMutationVariables>;

/**
 * __useCopyLibraryProductMutation__
 *
 * To run a mutation, you first call `useCopyLibraryProductMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCopyLibraryProductMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [copyLibraryProductMutation, { data, loading, error }] = useCopyLibraryProductMutation({
 *   variables: {
 *      id: // value for 'id'
 *      stateLibraryIds: // value for 'stateLibraryIds'
 *   },
 * });
 */
export function useCopyLibraryProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCopyLibraryProductMutation, GqlCopyLibraryProductMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCopyLibraryProductMutation, GqlCopyLibraryProductMutationVariables>(CopyLibraryProductDocument, baseOptions);
      }
export type CopyLibraryProductMutationHookResult = ReturnType<typeof useCopyLibraryProductMutation>;
export type CopyLibraryProductMutationResult = ApolloReactCommon.MutationResult<GqlCopyLibraryProductMutation>;
export type CopyLibraryProductMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCopyLibraryProductMutation, GqlCopyLibraryProductMutationVariables>;
export const CreateBucketForLibraryItemDocument = gql`
    mutation CreateBucketForLibraryItem($libraryItemId: ID!) {
  createBucketForLibraryItem(libraryItemId: $libraryItemId) {
    id
  }
}
    `;
export type GqlCreateBucketForLibraryItemMutationFn = ApolloReactCommon.MutationFunction<GqlCreateBucketForLibraryItemMutation, GqlCreateBucketForLibraryItemMutationVariables>;

/**
 * __useCreateBucketForLibraryItemMutation__
 *
 * To run a mutation, you first call `useCreateBucketForLibraryItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBucketForLibraryItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBucketForLibraryItemMutation, { data, loading, error }] = useCreateBucketForLibraryItemMutation({
 *   variables: {
 *      libraryItemId: // value for 'libraryItemId'
 *   },
 * });
 */
export function useCreateBucketForLibraryItemMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlCreateBucketForLibraryItemMutation, GqlCreateBucketForLibraryItemMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlCreateBucketForLibraryItemMutation, GqlCreateBucketForLibraryItemMutationVariables>(CreateBucketForLibraryItemDocument, baseOptions);
      }
export type CreateBucketForLibraryItemMutationHookResult = ReturnType<typeof useCreateBucketForLibraryItemMutation>;
export type CreateBucketForLibraryItemMutationResult = ApolloReactCommon.MutationResult<GqlCreateBucketForLibraryItemMutation>;
export type CreateBucketForLibraryItemMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlCreateBucketForLibraryItemMutation, GqlCreateBucketForLibraryItemMutationVariables>;
export const DeleteLibraryProductDocument = gql`
    mutation DeleteLibraryProduct($id: String!) {
  deleteLibraryProduct(id: $id) {
    id
  }
}
    `;
export type GqlDeleteLibraryProductMutationFn = ApolloReactCommon.MutationFunction<GqlDeleteLibraryProductMutation, GqlDeleteLibraryProductMutationVariables>;

/**
 * __useDeleteLibraryProductMutation__
 *
 * To run a mutation, you first call `useDeleteLibraryProductMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteLibraryProductMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteLibraryProductMutation, { data, loading, error }] = useDeleteLibraryProductMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteLibraryProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDeleteLibraryProductMutation, GqlDeleteLibraryProductMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDeleteLibraryProductMutation, GqlDeleteLibraryProductMutationVariables>(DeleteLibraryProductDocument, baseOptions);
      }
export type DeleteLibraryProductMutationHookResult = ReturnType<typeof useDeleteLibraryProductMutation>;
export type DeleteLibraryProductMutationResult = ApolloReactCommon.MutationResult<GqlDeleteLibraryProductMutation>;
export type DeleteLibraryProductMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDeleteLibraryProductMutation, GqlDeleteLibraryProductMutationVariables>;
export const UpdateLibraryProductDocument = gql`
    mutation UpdateLibraryProduct($id: String!, $updates: UpdatedLibraryProduct!) {
  updateLibraryProduct(id: $id, updates: $updates) {
    libraryProduct {
      dispensaryId
    }
  }
}
    `;
export type GqlUpdateLibraryProductMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateLibraryProductMutation, GqlUpdateLibraryProductMutationVariables>;

/**
 * __useUpdateLibraryProductMutation__
 *
 * To run a mutation, you first call `useUpdateLibraryProductMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateLibraryProductMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateLibraryProductMutation, { data, loading, error }] = useUpdateLibraryProductMutation({
 *   variables: {
 *      id: // value for 'id'
 *      updates: // value for 'updates'
 *   },
 * });
 */
export function useUpdateLibraryProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateLibraryProductMutation, GqlUpdateLibraryProductMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateLibraryProductMutation, GqlUpdateLibraryProductMutationVariables>(UpdateLibraryProductDocument, baseOptions);
      }
export type UpdateLibraryProductMutationHookResult = ReturnType<typeof useUpdateLibraryProductMutation>;
export type UpdateLibraryProductMutationResult = ApolloReactCommon.MutationResult<GqlUpdateLibraryProductMutation>;
export type UpdateLibraryProductMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateLibraryProductMutation, GqlUpdateLibraryProductMutationVariables>;
export const FindLibraryProductsDocument = gql`
    query FindLibraryProducts($id: String!) {
  findLibraryProducts(id: $id) {
    libraryProducts {
      dispensaryId
    }
  }
}
    `;

/**
 * __useFindLibraryProductsQuery__
 *
 * To run a query within a React component, call `useFindLibraryProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindLibraryProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindLibraryProductsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFindLibraryProductsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlFindLibraryProductsQuery, GqlFindLibraryProductsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlFindLibraryProductsQuery, GqlFindLibraryProductsQueryVariables>(FindLibraryProductsDocument, baseOptions);
      }
export function useFindLibraryProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlFindLibraryProductsQuery, GqlFindLibraryProductsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlFindLibraryProductsQuery, GqlFindLibraryProductsQueryVariables>(FindLibraryProductsDocument, baseOptions);
        }
export type FindLibraryProductsQueryHookResult = ReturnType<typeof useFindLibraryProductsQuery>;
export type FindLibraryProductsLazyQueryHookResult = ReturnType<typeof useFindLibraryProductsLazyQuery>;
export type FindLibraryProductsQueryResult = ApolloReactCommon.QueryResult<GqlFindLibraryProductsQuery, GqlFindLibraryProductsQueryVariables>;
export const GetLibraryProductDocument = gql`
    query GetLibraryProduct($id: String!) {
  getLibraryProduct(id: $id) {
    id
    brand {
      id
      name
      isGlobal
      _id
    }
    category
    cbdContent {
      unit
      range
    }
    connectedCount
    description
    descriptionHtml
    dispensaryId
    effects
    gtin
    image
    images {
      _id
      url
      active
      origin
    }
    name
    options
    prices
    productTemplate
    sku
    strainType
    stockImage
    subcategory
    productBatchId
    cannabinoids {
      cannabinoidId
      cannabinoid {
        id
        description
        name
      }
      unit
      value
      active
    }
    terpenes {
      name
      id
      terpeneId
      unit
      value
      active
    }
    thcContent {
      unit
      range
    }
  }
}
    `;

/**
 * __useGetLibraryProductQuery__
 *
 * To run a query within a React component, call `useGetLibraryProductQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLibraryProductQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLibraryProductQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetLibraryProductQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetLibraryProductQuery, GqlGetLibraryProductQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetLibraryProductQuery, GqlGetLibraryProductQueryVariables>(GetLibraryProductDocument, baseOptions);
      }
export function useGetLibraryProductLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetLibraryProductQuery, GqlGetLibraryProductQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetLibraryProductQuery, GqlGetLibraryProductQueryVariables>(GetLibraryProductDocument, baseOptions);
        }
export type GetLibraryProductQueryHookResult = ReturnType<typeof useGetLibraryProductQuery>;
export type GetLibraryProductLazyQueryHookResult = ReturnType<typeof useGetLibraryProductLazyQuery>;
export type GetLibraryProductQueryResult = ApolloReactCommon.QueryResult<GqlGetLibraryProductQuery, GqlGetLibraryProductQueryVariables>;
export const StateLibrariesIndexDocument = gql`
    query StateLibrariesIndex {
  getStateLibraries {
    id
    name
    state
  }
}
    `;

/**
 * __useStateLibrariesIndexQuery__
 *
 * To run a query within a React component, call `useStateLibrariesIndexQuery` and pass it any options that fit your needs.
 * When your component renders, `useStateLibrariesIndexQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStateLibrariesIndexQuery({
 *   variables: {
 *   },
 * });
 */
export function useStateLibrariesIndexQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlStateLibrariesIndexQuery, GqlStateLibrariesIndexQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlStateLibrariesIndexQuery, GqlStateLibrariesIndexQueryVariables>(StateLibrariesIndexDocument, baseOptions);
      }
export function useStateLibrariesIndexLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlStateLibrariesIndexQuery, GqlStateLibrariesIndexQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlStateLibrariesIndexQuery, GqlStateLibrariesIndexQueryVariables>(StateLibrariesIndexDocument, baseOptions);
        }
export type StateLibrariesIndexQueryHookResult = ReturnType<typeof useStateLibrariesIndexQuery>;
export type StateLibrariesIndexLazyQueryHookResult = ReturnType<typeof useStateLibrariesIndexLazyQuery>;
export type StateLibrariesIndexQueryResult = ApolloReactCommon.QueryResult<GqlStateLibrariesIndexQuery, GqlStateLibrariesIndexQueryVariables>;
export const LibraryProductChangeImpactV2Document = gql`
    query LibraryProductChangeImpactV2($id: String!, $updates: UpdatedLibraryProduct!) {
  libraryProductChangeImpactV2(id: $id, updates: $updates) {
    totalCount {
      count
    }
  }
}
    `;

/**
 * __useLibraryProductChangeImpactV2Query__
 *
 * To run a query within a React component, call `useLibraryProductChangeImpactV2Query` and pass it any options that fit your needs.
 * When your component renders, `useLibraryProductChangeImpactV2Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLibraryProductChangeImpactV2Query({
 *   variables: {
 *      id: // value for 'id'
 *      updates: // value for 'updates'
 *   },
 * });
 */
export function useLibraryProductChangeImpactV2Query(baseOptions: ApolloReactHooks.QueryHookOptions<GqlLibraryProductChangeImpactV2Query, GqlLibraryProductChangeImpactV2QueryVariables>) {
        return ApolloReactHooks.useQuery<GqlLibraryProductChangeImpactV2Query, GqlLibraryProductChangeImpactV2QueryVariables>(LibraryProductChangeImpactV2Document, baseOptions);
      }
export function useLibraryProductChangeImpactV2LazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlLibraryProductChangeImpactV2Query, GqlLibraryProductChangeImpactV2QueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlLibraryProductChangeImpactV2Query, GqlLibraryProductChangeImpactV2QueryVariables>(LibraryProductChangeImpactV2Document, baseOptions);
        }
export type LibraryProductChangeImpactV2QueryHookResult = ReturnType<typeof useLibraryProductChangeImpactV2Query>;
export type LibraryProductChangeImpactV2LazyQueryHookResult = ReturnType<typeof useLibraryProductChangeImpactV2LazyQuery>;
export type LibraryProductChangeImpactV2QueryResult = ApolloReactCommon.QueryResult<GqlLibraryProductChangeImpactV2Query, GqlLibraryProductChangeImpactV2QueryVariables>;
export const LibraryProductChangeImpactV3Document = gql`
    mutation LibraryProductChangeImpactV3($id: String!, $updates: UpdatedLibraryProduct!) {
  libraryProductChangeImpactV3(id: $id, updates: $updates) {
    totalCount {
      count
    }
  }
}
    `;
export type GqlLibraryProductChangeImpactV3MutationFn = ApolloReactCommon.MutationFunction<GqlLibraryProductChangeImpactV3Mutation, GqlLibraryProductChangeImpactV3MutationVariables>;

/**
 * __useLibraryProductChangeImpactV3Mutation__
 *
 * To run a mutation, you first call `useLibraryProductChangeImpactV3Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLibraryProductChangeImpactV3Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [libraryProductChangeImpactV3Mutation, { data, loading, error }] = useLibraryProductChangeImpactV3Mutation({
 *   variables: {
 *      id: // value for 'id'
 *      updates: // value for 'updates'
 *   },
 * });
 */
export function useLibraryProductChangeImpactV3Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlLibraryProductChangeImpactV3Mutation, GqlLibraryProductChangeImpactV3MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlLibraryProductChangeImpactV3Mutation, GqlLibraryProductChangeImpactV3MutationVariables>(LibraryProductChangeImpactV3Document, baseOptions);
      }
export type LibraryProductChangeImpactV3MutationHookResult = ReturnType<typeof useLibraryProductChangeImpactV3Mutation>;
export type LibraryProductChangeImpactV3MutationResult = ApolloReactCommon.MutationResult<GqlLibraryProductChangeImpactV3Mutation>;
export type LibraryProductChangeImpactV3MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlLibraryProductChangeImpactV3Mutation, GqlLibraryProductChangeImpactV3MutationVariables>;
export const LibraryProductsIndexDocument = gql`
    query LibraryProductsIndex($filters: searchLibraryProductsFilters, $pagination: paginationInput, $search: String, $sort: searchLibraryProductsSort) {
  searchLibraryProducts(
    filters: $filters
    pagination: $pagination
    search: $search
    sort: $sort
  ) {
    libraryProducts {
      brand {
        id
        isGlobal
        name
      }
      category
      connectedCount
      createdAt
      createdBy {
        firstName
        fullName
        lastName
      }
      description
      dispensaryId
      id
      menuScore
      name
      subcategory
      updatedAt
      updatedByBrand
    }
    meta {
      totalCount
    }
  }
}
    `;

/**
 * __useLibraryProductsIndexQuery__
 *
 * To run a query within a React component, call `useLibraryProductsIndexQuery` and pass it any options that fit your needs.
 * When your component renders, `useLibraryProductsIndexQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLibraryProductsIndexQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *      pagination: // value for 'pagination'
 *      search: // value for 'search'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useLibraryProductsIndexQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlLibraryProductsIndexQuery, GqlLibraryProductsIndexQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlLibraryProductsIndexQuery, GqlLibraryProductsIndexQueryVariables>(LibraryProductsIndexDocument, baseOptions);
      }
export function useLibraryProductsIndexLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlLibraryProductsIndexQuery, GqlLibraryProductsIndexQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlLibraryProductsIndexQuery, GqlLibraryProductsIndexQueryVariables>(LibraryProductsIndexDocument, baseOptions);
        }
export type LibraryProductsIndexQueryHookResult = ReturnType<typeof useLibraryProductsIndexQuery>;
export type LibraryProductsIndexLazyQueryHookResult = ReturnType<typeof useLibraryProductsIndexLazyQuery>;
export type LibraryProductsIndexQueryResult = ApolloReactCommon.QueryResult<GqlLibraryProductsIndexQuery, GqlLibraryProductsIndexQueryVariables>;
export const ApproveChangeRequestDocument = gql`
    mutation ApproveChangeRequest($id: String!) {
  changeRequestApproveProduct(id: $id) {
    id
  }
}
    `;
export type GqlApproveChangeRequestMutationFn = ApolloReactCommon.MutationFunction<GqlApproveChangeRequestMutation, GqlApproveChangeRequestMutationVariables>;

/**
 * __useApproveChangeRequestMutation__
 *
 * To run a mutation, you first call `useApproveChangeRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApproveChangeRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approveChangeRequestMutation, { data, loading, error }] = useApproveChangeRequestMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useApproveChangeRequestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlApproveChangeRequestMutation, GqlApproveChangeRequestMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlApproveChangeRequestMutation, GqlApproveChangeRequestMutationVariables>(ApproveChangeRequestDocument, baseOptions);
      }
export type ApproveChangeRequestMutationHookResult = ReturnType<typeof useApproveChangeRequestMutation>;
export type ApproveChangeRequestMutationResult = ApolloReactCommon.MutationResult<GqlApproveChangeRequestMutation>;
export type ApproveChangeRequestMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlApproveChangeRequestMutation, GqlApproveChangeRequestMutationVariables>;
export const LockChangeRequestDocument = gql`
    mutation LockChangeRequest($id: String!) {
  changeRequestLockProduct(id: $id) {
    id
  }
}
    `;
export type GqlLockChangeRequestMutationFn = ApolloReactCommon.MutationFunction<GqlLockChangeRequestMutation, GqlLockChangeRequestMutationVariables>;

/**
 * __useLockChangeRequestMutation__
 *
 * To run a mutation, you first call `useLockChangeRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLockChangeRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [lockChangeRequestMutation, { data, loading, error }] = useLockChangeRequestMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useLockChangeRequestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlLockChangeRequestMutation, GqlLockChangeRequestMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlLockChangeRequestMutation, GqlLockChangeRequestMutationVariables>(LockChangeRequestDocument, baseOptions);
      }
export type LockChangeRequestMutationHookResult = ReturnType<typeof useLockChangeRequestMutation>;
export type LockChangeRequestMutationResult = ApolloReactCommon.MutationResult<GqlLockChangeRequestMutation>;
export type LockChangeRequestMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlLockChangeRequestMutation, GqlLockChangeRequestMutationVariables>;
export const RejectContentChangeRequestDocument = gql`
    mutation RejectContentChangeRequest($id: String!, $rejectionReasons: [RejectionReasons!]!, $feedback: String!) {
  changeRequestRejectProduct(
    id: $id
    rejectionReasons: $rejectionReasons
    feedback: $feedback
  ) {
    id
  }
}
    `;
export type GqlRejectContentChangeRequestMutationFn = ApolloReactCommon.MutationFunction<GqlRejectContentChangeRequestMutation, GqlRejectContentChangeRequestMutationVariables>;

/**
 * __useRejectContentChangeRequestMutation__
 *
 * To run a mutation, you first call `useRejectContentChangeRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRejectContentChangeRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [rejectContentChangeRequestMutation, { data, loading, error }] = useRejectContentChangeRequestMutation({
 *   variables: {
 *      id: // value for 'id'
 *      rejectionReasons: // value for 'rejectionReasons'
 *      feedback: // value for 'feedback'
 *   },
 * });
 */
export function useRejectContentChangeRequestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlRejectContentChangeRequestMutation, GqlRejectContentChangeRequestMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlRejectContentChangeRequestMutation, GqlRejectContentChangeRequestMutationVariables>(RejectContentChangeRequestDocument, baseOptions);
      }
export type RejectContentChangeRequestMutationHookResult = ReturnType<typeof useRejectContentChangeRequestMutation>;
export type RejectContentChangeRequestMutationResult = ApolloReactCommon.MutationResult<GqlRejectContentChangeRequestMutation>;
export type RejectContentChangeRequestMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlRejectContentChangeRequestMutation, GqlRejectContentChangeRequestMutationVariables>;
export const UnlockChangeRequestDocument = gql`
    mutation UnlockChangeRequest($id: String!) {
  changeRequestUnlockProduct(id: $id) {
    id
    approvalStatus
  }
}
    `;
export type GqlUnlockChangeRequestMutationFn = ApolloReactCommon.MutationFunction<GqlUnlockChangeRequestMutation, GqlUnlockChangeRequestMutationVariables>;

/**
 * __useUnlockChangeRequestMutation__
 *
 * To run a mutation, you first call `useUnlockChangeRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnlockChangeRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unlockChangeRequestMutation, { data, loading, error }] = useUnlockChangeRequestMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useUnlockChangeRequestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUnlockChangeRequestMutation, GqlUnlockChangeRequestMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUnlockChangeRequestMutation, GqlUnlockChangeRequestMutationVariables>(UnlockChangeRequestDocument, baseOptions);
      }
export type UnlockChangeRequestMutationHookResult = ReturnType<typeof useUnlockChangeRequestMutation>;
export type UnlockChangeRequestMutationResult = ApolloReactCommon.MutationResult<GqlUnlockChangeRequestMutation>;
export type UnlockChangeRequestMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUnlockChangeRequestMutation, GqlUnlockChangeRequestMutationVariables>;
export const SearchProductChangeRequestsDocument = gql`
    query SearchProductChangeRequests($filters: ContentChangeRequestFilters, $pagination: paginationInput, $sort: ContentChangeRequestSort) {
  searchProductChangeRequests(
    filters: $filters
    pagination: $pagination
    sort: $sort
  ) {
    contentChangeRequests {
      id
      brand {
        id
        isGlobal
        name
      }
      createdAt
      createdBy {
        firstName
        fullName
        lastName
      }
      updatedAt
      approvedAt
      rejectedAt
      approvalStatus
      actionType
      authorId
      reviewerId
      brandId
      productId
      product {
        id
        connectedCount
      }
      complianceRegionId
      feedback
      dispensary {
        id
        location {
          state
        }
      }
      computedAttributes {
        actionType
        approvalStatus
        authorId
        brandId
        brandName
        category
        complianceRegionId
        connectedCount
        createdAt
        createdBy
        productId
        productName
        reviewerId
        score
        state
        subcategory
        updatedAt
      }
      contentAttributes {
        brandId
        menu_score
        category
        connectedCount
        description
        effects
        image
        medicalOnly
        name
        prices
        recOnly
        strainType
        subcategory
        cbdContent {
          unit
          range
        }
        thcContent {
          unit
          range
        }
      }
    }
    meta {
      totalCount
      filters {
        score {
          label
          value
        }
        approvalStatus {
          label
          value
        }
        state {
          label
          value
        }
        brand {
          label
          value
        }
      }
    }
  }
}
    `;

/**
 * __useSearchProductChangeRequestsQuery__
 *
 * To run a query within a React component, call `useSearchProductChangeRequestsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchProductChangeRequestsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchProductChangeRequestsQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *      pagination: // value for 'pagination'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useSearchProductChangeRequestsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlSearchProductChangeRequestsQuery, GqlSearchProductChangeRequestsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlSearchProductChangeRequestsQuery, GqlSearchProductChangeRequestsQueryVariables>(SearchProductChangeRequestsDocument, baseOptions);
      }
export function useSearchProductChangeRequestsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlSearchProductChangeRequestsQuery, GqlSearchProductChangeRequestsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlSearchProductChangeRequestsQuery, GqlSearchProductChangeRequestsQueryVariables>(SearchProductChangeRequestsDocument, baseOptions);
        }
export type SearchProductChangeRequestsQueryHookResult = ReturnType<typeof useSearchProductChangeRequestsQuery>;
export type SearchProductChangeRequestsLazyQueryHookResult = ReturnType<typeof useSearchProductChangeRequestsLazyQuery>;
export type SearchProductChangeRequestsQueryResult = ApolloReactCommon.QueryResult<GqlSearchProductChangeRequestsQuery, GqlSearchProductChangeRequestsQueryVariables>;
export const GetProductChangeRequestDocument = gql`
    query GetProductChangeRequest($id: String!) {
  changeRequestProduct(id: $id) {
    id
    updatedAt
    approvedAt
    contentAttributes {
      brand {
        id
        name
        isGlobal
      }
      category
      connectedCount
      description
      effects
      image
      name
      options
      prices
      strainType
      subcategory
      cbdContent {
        unit
        range
      }
      thcContent {
        unit
        range
      }
    }
  }
}
    `;

/**
 * __useGetProductChangeRequestQuery__
 *
 * To run a query within a React component, call `useGetProductChangeRequestQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProductChangeRequestQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProductChangeRequestQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetProductChangeRequestQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetProductChangeRequestQuery, GqlGetProductChangeRequestQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetProductChangeRequestQuery, GqlGetProductChangeRequestQueryVariables>(GetProductChangeRequestDocument, baseOptions);
      }
export function useGetProductChangeRequestLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetProductChangeRequestQuery, GqlGetProductChangeRequestQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetProductChangeRequestQuery, GqlGetProductChangeRequestQueryVariables>(GetProductChangeRequestDocument, baseOptions);
        }
export type GetProductChangeRequestQueryHookResult = ReturnType<typeof useGetProductChangeRequestQuery>;
export type GetProductChangeRequestLazyQueryHookResult = ReturnType<typeof useGetProductChangeRequestLazyQuery>;
export type GetProductChangeRequestQueryResult = ApolloReactCommon.QueryResult<GqlGetProductChangeRequestQuery, GqlGetProductChangeRequestQueryVariables>;
export const ProductFiltersDocument = gql`
    query ProductFilters {
  productFilters {
    dispensaryDropdownOptions {
      key
      label
      state
      status
      value
    }
    chainDropdownOptions {
      key
      label
      value
    }
    statesDropdownOptions {
      key
      label
      value
    }
  }
}
    `;

/**
 * __useProductFiltersQuery__
 *
 * To run a query within a React component, call `useProductFiltersQuery` and pass it any options that fit your needs.
 * When your component renders, `useProductFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProductFiltersQuery({
 *   variables: {
 *   },
 * });
 */
export function useProductFiltersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlProductFiltersQuery, GqlProductFiltersQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlProductFiltersQuery, GqlProductFiltersQueryVariables>(ProductFiltersDocument, baseOptions);
      }
export function useProductFiltersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlProductFiltersQuery, GqlProductFiltersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlProductFiltersQuery, GqlProductFiltersQueryVariables>(ProductFiltersDocument, baseOptions);
        }
export type ProductFiltersQueryHookResult = ReturnType<typeof useProductFiltersQuery>;
export type ProductFiltersLazyQueryHookResult = ReturnType<typeof useProductFiltersLazyQuery>;
export type ProductFiltersQueryResult = ApolloReactCommon.QueryResult<GqlProductFiltersQuery, GqlProductFiltersQueryVariables>;
export const SuperProductsDocument = gql`
    query SuperProducts($filter: superProductsInput!) {
  superProducts(filter: $filter) {
    products {
      _id
      id
      brand {
        id
        name
      }
      brandId
      brandName
      dispensary {
        id
        name
      }
      DispensaryID
      matchedLibraryItemsConfidence
      Name
      score
      strainType
      type
    }
    queryInfo {
      totalCount
    }
  }
}
    `;

/**
 * __useSuperProductsQuery__
 *
 * To run a query within a React component, call `useSuperProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSuperProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSuperProductsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useSuperProductsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlSuperProductsQuery, GqlSuperProductsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlSuperProductsQuery, GqlSuperProductsQueryVariables>(SuperProductsDocument, baseOptions);
      }
export function useSuperProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlSuperProductsQuery, GqlSuperProductsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlSuperProductsQuery, GqlSuperProductsQueryVariables>(SuperProductsDocument, baseOptions);
        }
export type SuperProductsQueryHookResult = ReturnType<typeof useSuperProductsQuery>;
export type SuperProductsLazyQueryHookResult = ReturnType<typeof useSuperProductsLazyQuery>;
export type SuperProductsQueryResult = ApolloReactCommon.QueryResult<GqlSuperProductsQuery, GqlSuperProductsQueryVariables>;
export const FilteredCouponsForSuperAdminDocument = gql`
    query FilteredCouponsForSuperAdmin($filter: couponsFilterInput, $sort: couponsSortInput, $pagination: couponsPaginationInput) {
  filteredCoupons(filter: $filter, sort: $sort, pagination: $pagination) {
    queryInfo {
      totalCount
    }
    coupons {
      _id
      active
      addedDate
      code
      dispensary
      expDate
      fixedDiscountInCents
      numUses
      percentDiscount
      reimbursed
    }
  }
}
    `;

/**
 * __useFilteredCouponsForSuperAdminQuery__
 *
 * To run a query within a React component, call `useFilteredCouponsForSuperAdminQuery` and pass it any options that fit your needs.
 * When your component renders, `useFilteredCouponsForSuperAdminQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFilteredCouponsForSuperAdminQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      sort: // value for 'sort'
 *      pagination: // value for 'pagination'
 *   },
 * });
 */
export function useFilteredCouponsForSuperAdminQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlFilteredCouponsForSuperAdminQuery, GqlFilteredCouponsForSuperAdminQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlFilteredCouponsForSuperAdminQuery, GqlFilteredCouponsForSuperAdminQueryVariables>(FilteredCouponsForSuperAdminDocument, baseOptions);
      }
export function useFilteredCouponsForSuperAdminLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlFilteredCouponsForSuperAdminQuery, GqlFilteredCouponsForSuperAdminQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlFilteredCouponsForSuperAdminQuery, GqlFilteredCouponsForSuperAdminQueryVariables>(FilteredCouponsForSuperAdminDocument, baseOptions);
        }
export type FilteredCouponsForSuperAdminQueryHookResult = ReturnType<typeof useFilteredCouponsForSuperAdminQuery>;
export type FilteredCouponsForSuperAdminLazyQueryHookResult = ReturnType<typeof useFilteredCouponsForSuperAdminLazyQuery>;
export type FilteredCouponsForSuperAdminQueryResult = ApolloReactCommon.QueryResult<GqlFilteredCouponsForSuperAdminQuery, GqlFilteredCouponsForSuperAdminQueryVariables>;
export const GetUserDocument = gql`
    query GetUser($id: String!) {
  getConsumerUser(id: $id) {
    _id
    email
    profile {
      phone
      textNotifications
      emailNotifications
      emailOptIn
    }
    customers {
      _id
      emailSubscription
      dispensaryName
    }
  }
}
    `;

/**
 * __useGetUserQuery__
 *
 * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetUserQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlGetUserQuery, GqlGetUserQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlGetUserQuery, GqlGetUserQueryVariables>(GetUserDocument, baseOptions);
      }
export function useGetUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlGetUserQuery, GqlGetUserQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlGetUserQuery, GqlGetUserQueryVariables>(GetUserDocument, baseOptions);
        }
export type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;
export type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;
export type GetUserQueryResult = ApolloReactCommon.QueryResult<GqlGetUserQuery, GqlGetUserQueryVariables>;
export const DispensaryUpdateStatusDocument = gql`
    mutation DispensaryUpdateStatus($input: dispensaryUpdateStatusInput!) {
  dispensaryUpdateStatus(input: $input) {
    success
  }
}
    `;
export type GqlDispensaryUpdateStatusMutationFn = ApolloReactCommon.MutationFunction<GqlDispensaryUpdateStatusMutation, GqlDispensaryUpdateStatusMutationVariables>;

/**
 * __useDispensaryUpdateStatusMutation__
 *
 * To run a mutation, you first call `useDispensaryUpdateStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDispensaryUpdateStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [dispensaryUpdateStatusMutation, { data, loading, error }] = useDispensaryUpdateStatusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDispensaryUpdateStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDispensaryUpdateStatusMutation, GqlDispensaryUpdateStatusMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDispensaryUpdateStatusMutation, GqlDispensaryUpdateStatusMutationVariables>(DispensaryUpdateStatusDocument, baseOptions);
      }
export type DispensaryUpdateStatusMutationHookResult = ReturnType<typeof useDispensaryUpdateStatusMutation>;
export type DispensaryUpdateStatusMutationResult = ApolloReactCommon.MutationResult<GqlDispensaryUpdateStatusMutation>;
export type DispensaryUpdateStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDispensaryUpdateStatusMutation, GqlDispensaryUpdateStatusMutationVariables>;
export const DispensaryInfoModalCreateRetailerAgentDocument = gql`
    mutation DispensaryInfoModalCreateRetailerAgent($userId: String!, $position: String!, $retailerId: String!) {
  createRetailerAgent(
    userId: $userId
    position: $position
    retailerId: $retailerId
  ) {
    id
    userId
    userName
    retailerId
    position
    dispensaryId
  }
}
    `;
export type GqlDispensaryInfoModalCreateRetailerAgentMutationFn = ApolloReactCommon.MutationFunction<GqlDispensaryInfoModalCreateRetailerAgentMutation, GqlDispensaryInfoModalCreateRetailerAgentMutationVariables>;

/**
 * __useDispensaryInfoModalCreateRetailerAgentMutation__
 *
 * To run a mutation, you first call `useDispensaryInfoModalCreateRetailerAgentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDispensaryInfoModalCreateRetailerAgentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [dispensaryInfoModalCreateRetailerAgentMutation, { data, loading, error }] = useDispensaryInfoModalCreateRetailerAgentMutation({
 *   variables: {
 *      userId: // value for 'userId'
 *      position: // value for 'position'
 *      retailerId: // value for 'retailerId'
 *   },
 * });
 */
export function useDispensaryInfoModalCreateRetailerAgentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDispensaryInfoModalCreateRetailerAgentMutation, GqlDispensaryInfoModalCreateRetailerAgentMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDispensaryInfoModalCreateRetailerAgentMutation, GqlDispensaryInfoModalCreateRetailerAgentMutationVariables>(DispensaryInfoModalCreateRetailerAgentDocument, baseOptions);
      }
export type DispensaryInfoModalCreateRetailerAgentMutationHookResult = ReturnType<typeof useDispensaryInfoModalCreateRetailerAgentMutation>;
export type DispensaryInfoModalCreateRetailerAgentMutationResult = ApolloReactCommon.MutationResult<GqlDispensaryInfoModalCreateRetailerAgentMutation>;
export type DispensaryInfoModalCreateRetailerAgentMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDispensaryInfoModalCreateRetailerAgentMutation, GqlDispensaryInfoModalCreateRetailerAgentMutationVariables>;
export const DispensaryInfoModalDestroyRetailerAgentDocument = gql`
    mutation DispensaryInfoModalDestroyRetailerAgent($id: String!) {
  destroyRetailerAgent(id: $id) {
    success
    message
  }
}
    `;
export type GqlDispensaryInfoModalDestroyRetailerAgentMutationFn = ApolloReactCommon.MutationFunction<GqlDispensaryInfoModalDestroyRetailerAgentMutation, GqlDispensaryInfoModalDestroyRetailerAgentMutationVariables>;

/**
 * __useDispensaryInfoModalDestroyRetailerAgentMutation__
 *
 * To run a mutation, you first call `useDispensaryInfoModalDestroyRetailerAgentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDispensaryInfoModalDestroyRetailerAgentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [dispensaryInfoModalDestroyRetailerAgentMutation, { data, loading, error }] = useDispensaryInfoModalDestroyRetailerAgentMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDispensaryInfoModalDestroyRetailerAgentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlDispensaryInfoModalDestroyRetailerAgentMutation, GqlDispensaryInfoModalDestroyRetailerAgentMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlDispensaryInfoModalDestroyRetailerAgentMutation, GqlDispensaryInfoModalDestroyRetailerAgentMutationVariables>(DispensaryInfoModalDestroyRetailerAgentDocument, baseOptions);
      }
export type DispensaryInfoModalDestroyRetailerAgentMutationHookResult = ReturnType<typeof useDispensaryInfoModalDestroyRetailerAgentMutation>;
export type DispensaryInfoModalDestroyRetailerAgentMutationResult = ApolloReactCommon.MutationResult<GqlDispensaryInfoModalDestroyRetailerAgentMutation>;
export type DispensaryInfoModalDestroyRetailerAgentMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlDispensaryInfoModalDestroyRetailerAgentMutation, GqlDispensaryInfoModalDestroyRetailerAgentMutationVariables>;
export const DispensaryInfoModalFilteredDispensariesDocument = gql`
    query DispensaryInfoModalFilteredDispensaries($dispensaryFilter: dispensariesFilterInput!) {
  filteredDispensaries(filter: $dispensaryFilter) {
    retailer {
      id
    }
    id
    name
    address
    firstActiveAt
    email
    notes
    phone
    deliveryInfo {
      withinBounds
      fee
      minimum
      feeVaries
      minimumVaries
    }
    feeTiers {
      fee
      feeType
      max
      min
      percentFee
    }
    deliveryMin
    hideFromCCT
    timezone
    terminals {
      lastSeenAt
    }
    effectiveHours {
      deliveryHours {
        ...hourSetFragment
      }
      pickupHours {
        ...hourSetFragment
      }
    }
    superAdmins {
      name
      role
      userId
    }
    orderTypesConfig {
      delivery {
        enabled
      }
    }
    paymentTypesAccepted {
      aeropay
      alt36
      canPay
      cash
      check
      creditCardAtDoor
      creditCardByPhone
      debit
      linx
      payOnlineChase
      payOnlineHypur
      payOnlineMerrco
      payOnlineMoneris
      paytender
    }
  }
}
    ${HourSetFragmentFragmentDoc}`;

/**
 * __useDispensaryInfoModalFilteredDispensariesQuery__
 *
 * To run a query within a React component, call `useDispensaryInfoModalFilteredDispensariesQuery` and pass it any options that fit your needs.
 * When your component renders, `useDispensaryInfoModalFilteredDispensariesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDispensaryInfoModalFilteredDispensariesQuery({
 *   variables: {
 *      dispensaryFilter: // value for 'dispensaryFilter'
 *   },
 * });
 */
export function useDispensaryInfoModalFilteredDispensariesQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlDispensaryInfoModalFilteredDispensariesQuery, GqlDispensaryInfoModalFilteredDispensariesQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlDispensaryInfoModalFilteredDispensariesQuery, GqlDispensaryInfoModalFilteredDispensariesQueryVariables>(DispensaryInfoModalFilteredDispensariesDocument, baseOptions);
      }
export function useDispensaryInfoModalFilteredDispensariesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlDispensaryInfoModalFilteredDispensariesQuery, GqlDispensaryInfoModalFilteredDispensariesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlDispensaryInfoModalFilteredDispensariesQuery, GqlDispensaryInfoModalFilteredDispensariesQueryVariables>(DispensaryInfoModalFilteredDispensariesDocument, baseOptions);
        }
export type DispensaryInfoModalFilteredDispensariesQueryHookResult = ReturnType<typeof useDispensaryInfoModalFilteredDispensariesQuery>;
export type DispensaryInfoModalFilteredDispensariesLazyQueryHookResult = ReturnType<typeof useDispensaryInfoModalFilteredDispensariesLazyQuery>;
export type DispensaryInfoModalFilteredDispensariesQueryResult = ApolloReactCommon.QueryResult<GqlDispensaryInfoModalFilteredDispensariesQuery, GqlDispensaryInfoModalFilteredDispensariesQueryVariables>;
export const DispensaryInfoModalFilteredUsersDocument = gql`
    query DispensaryInfoModalFilteredUsers($usersFilter: usersFilterInput!) {
  filteredUsers(filter: $usersFilter) {
    _id
    fullName
    firstName
    lastName
    availableRetailerAgentPositions
  }
}
    `;

/**
 * __useDispensaryInfoModalFilteredUsersQuery__
 *
 * To run a query within a React component, call `useDispensaryInfoModalFilteredUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useDispensaryInfoModalFilteredUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDispensaryInfoModalFilteredUsersQuery({
 *   variables: {
 *      usersFilter: // value for 'usersFilter'
 *   },
 * });
 */
export function useDispensaryInfoModalFilteredUsersQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlDispensaryInfoModalFilteredUsersQuery, GqlDispensaryInfoModalFilteredUsersQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlDispensaryInfoModalFilteredUsersQuery, GqlDispensaryInfoModalFilteredUsersQueryVariables>(DispensaryInfoModalFilteredUsersDocument, baseOptions);
      }
export function useDispensaryInfoModalFilteredUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlDispensaryInfoModalFilteredUsersQuery, GqlDispensaryInfoModalFilteredUsersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlDispensaryInfoModalFilteredUsersQuery, GqlDispensaryInfoModalFilteredUsersQueryVariables>(DispensaryInfoModalFilteredUsersDocument, baseOptions);
        }
export type DispensaryInfoModalFilteredUsersQueryHookResult = ReturnType<typeof useDispensaryInfoModalFilteredUsersQuery>;
export type DispensaryInfoModalFilteredUsersLazyQueryHookResult = ReturnType<typeof useDispensaryInfoModalFilteredUsersLazyQuery>;
export type DispensaryInfoModalFilteredUsersQueryResult = ApolloReactCommon.QueryResult<GqlDispensaryInfoModalFilteredUsersQuery, GqlDispensaryInfoModalFilteredUsersQueryVariables>;
export const DispensaryInfoModalRetailerAgentsDocument = gql`
    query DispensaryInfoModalRetailerAgents($filter: retailerAgentFilterInput) {
  retailerAgents(filter: $filter) {
    id
    userId
    userName
    retailerId
    position
    dispensaryId
  }
}
    `;

/**
 * __useDispensaryInfoModalRetailerAgentsQuery__
 *
 * To run a query within a React component, call `useDispensaryInfoModalRetailerAgentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useDispensaryInfoModalRetailerAgentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDispensaryInfoModalRetailerAgentsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useDispensaryInfoModalRetailerAgentsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlDispensaryInfoModalRetailerAgentsQuery, GqlDispensaryInfoModalRetailerAgentsQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlDispensaryInfoModalRetailerAgentsQuery, GqlDispensaryInfoModalRetailerAgentsQueryVariables>(DispensaryInfoModalRetailerAgentsDocument, baseOptions);
      }
export function useDispensaryInfoModalRetailerAgentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlDispensaryInfoModalRetailerAgentsQuery, GqlDispensaryInfoModalRetailerAgentsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlDispensaryInfoModalRetailerAgentsQuery, GqlDispensaryInfoModalRetailerAgentsQueryVariables>(DispensaryInfoModalRetailerAgentsDocument, baseOptions);
        }
export type DispensaryInfoModalRetailerAgentsQueryHookResult = ReturnType<typeof useDispensaryInfoModalRetailerAgentsQuery>;
export type DispensaryInfoModalRetailerAgentsLazyQueryHookResult = ReturnType<typeof useDispensaryInfoModalRetailerAgentsLazyQuery>;
export type DispensaryInfoModalRetailerAgentsQueryResult = ApolloReactCommon.QueryResult<GqlDispensaryInfoModalRetailerAgentsQuery, GqlDispensaryInfoModalRetailerAgentsQueryVariables>;
export const SuperGetOrdersDocument = gql`
    query SuperGetOrders($input: getOrdersInput!) {
  getOrders(input: $input) {
    orders {
      _id
      createdAt
      customerId
      customerName
      delivery
      deliveryInfo {
        address
        apartmentNum
        deliveryAddress
        deliveryOption
        lastSearchedAddress
        nonDeliveryAddress
      }
      dispensaryId
      dispensaryName
      dispoTimezone
      duration
      durationEstimates {
        delivery {
          highInMinutes
          lowInMinutes
        }
        pickup {
          highInMinutes
          lowInMinutes
        }
      }
      isAnonymous
      isAfterHoursOrder
      isKioskOrder
      orderId
      status
      totalCost
    }
  }
}
    `;

/**
 * __useSuperGetOrdersQuery__
 *
 * To run a query within a React component, call `useSuperGetOrdersQuery` and pass it any options that fit your needs.
 * When your component renders, `useSuperGetOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSuperGetOrdersQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSuperGetOrdersQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GqlSuperGetOrdersQuery, GqlSuperGetOrdersQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlSuperGetOrdersQuery, GqlSuperGetOrdersQueryVariables>(SuperGetOrdersDocument, baseOptions);
      }
export function useSuperGetOrdersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlSuperGetOrdersQuery, GqlSuperGetOrdersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlSuperGetOrdersQuery, GqlSuperGetOrdersQueryVariables>(SuperGetOrdersDocument, baseOptions);
        }
export type SuperGetOrdersQueryHookResult = ReturnType<typeof useSuperGetOrdersQuery>;
export type SuperGetOrdersLazyQueryHookResult = ReturnType<typeof useSuperGetOrdersLazyQuery>;
export type SuperGetOrdersQueryResult = ApolloReactCommon.QueryResult<GqlSuperGetOrdersQuery, GqlSuperGetOrdersQueryVariables>;
export const UpdateChainDispensariesImageDocument = gql`
    mutation UpdateChainDispensariesImage($dispensaryId: String!, $imageVariantKey: ImageVariantKeyEnum!) {
  updateChainDispensariesImage(
    dispensaryId: $dispensaryId
    image_variant_keys: [$imageVariantKey]
  ) {
    success
    message
  }
}
    `;
export type GqlUpdateChainDispensariesImageMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateChainDispensariesImageMutation, GqlUpdateChainDispensariesImageMutationVariables>;

/**
 * __useUpdateChainDispensariesImageMutation__
 *
 * To run a mutation, you first call `useUpdateChainDispensariesImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateChainDispensariesImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateChainDispensariesImageMutation, { data, loading, error }] = useUpdateChainDispensariesImageMutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      imageVariantKey: // value for 'imageVariantKey'
 *   },
 * });
 */
export function useUpdateChainDispensariesImageMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateChainDispensariesImageMutation, GqlUpdateChainDispensariesImageMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateChainDispensariesImageMutation, GqlUpdateChainDispensariesImageMutationVariables>(UpdateChainDispensariesImageDocument, baseOptions);
      }
export type UpdateChainDispensariesImageMutationHookResult = ReturnType<typeof useUpdateChainDispensariesImageMutation>;
export type UpdateChainDispensariesImageMutationResult = ApolloReactCommon.MutationResult<GqlUpdateChainDispensariesImageMutation>;
export type UpdateChainDispensariesImageMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateChainDispensariesImageMutation, GqlUpdateChainDispensariesImageMutationVariables>;
export const SuperAdminsTableDocument = gql`
    query SuperAdminsTable {
  filteredUsers(filter: {superadmin: true}) {
    _id
    email
    fullName
    firstName
    lastName
    permissions {
      menuReview
      superMenuReview
    }
  }
}
    `;

/**
 * __useSuperAdminsTableQuery__
 *
 * To run a query within a React component, call `useSuperAdminsTableQuery` and pass it any options that fit your needs.
 * When your component renders, `useSuperAdminsTableQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSuperAdminsTableQuery({
 *   variables: {
 *   },
 * });
 */
export function useSuperAdminsTableQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GqlSuperAdminsTableQuery, GqlSuperAdminsTableQueryVariables>) {
        return ApolloReactHooks.useQuery<GqlSuperAdminsTableQuery, GqlSuperAdminsTableQueryVariables>(SuperAdminsTableDocument, baseOptions);
      }
export function useSuperAdminsTableLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GqlSuperAdminsTableQuery, GqlSuperAdminsTableQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GqlSuperAdminsTableQuery, GqlSuperAdminsTableQueryVariables>(SuperAdminsTableDocument, baseOptions);
        }
export type SuperAdminsTableQueryHookResult = ReturnType<typeof useSuperAdminsTableQuery>;
export type SuperAdminsTableLazyQueryHookResult = ReturnType<typeof useSuperAdminsTableLazyQuery>;
export type SuperAdminsTableQueryResult = ApolloReactCommon.QueryResult<GqlSuperAdminsTableQuery, GqlSuperAdminsTableQueryVariables>;
export const ImportCustomerCsvDocument = gql`
    mutation ImportCustomerCSV($dispensaryId: String!, $CSV: String!) {
  importCustomerCSV(dispensaryId: $dispensaryId, CSV: $CSV) {
    success
    message
  }
}
    `;
export type GqlImportCustomerCsvMutationFn = ApolloReactCommon.MutationFunction<GqlImportCustomerCsvMutation, GqlImportCustomerCsvMutationVariables>;

/**
 * __useImportCustomerCsvMutation__
 *
 * To run a mutation, you first call `useImportCustomerCsvMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useImportCustomerCsvMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [importCustomerCsvMutation, { data, loading, error }] = useImportCustomerCsvMutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      CSV: // value for 'CSV'
 *   },
 * });
 */
export function useImportCustomerCsvMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlImportCustomerCsvMutation, GqlImportCustomerCsvMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlImportCustomerCsvMutation, GqlImportCustomerCsvMutationVariables>(ImportCustomerCsvDocument, baseOptions);
      }
export type ImportCustomerCsvMutationHookResult = ReturnType<typeof useImportCustomerCsvMutation>;
export type ImportCustomerCsvMutationResult = ApolloReactCommon.MutationResult<GqlImportCustomerCsvMutation>;
export type ImportCustomerCsvMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlImportCustomerCsvMutation, GqlImportCustomerCsvMutationVariables>;
export const ImportDeliveryZipCodesDocument = gql`
    mutation ImportDeliveryZipCodes($dispensaryId: String!, $csv: String!) {
  importDeliveryZipCodes(dispensaryId: $dispensaryId, csv: $csv) {
    success
    message
  }
}
    `;
export type GqlImportDeliveryZipCodesMutationFn = ApolloReactCommon.MutationFunction<GqlImportDeliveryZipCodesMutation, GqlImportDeliveryZipCodesMutationVariables>;

/**
 * __useImportDeliveryZipCodesMutation__
 *
 * To run a mutation, you first call `useImportDeliveryZipCodesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useImportDeliveryZipCodesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [importDeliveryZipCodesMutation, { data, loading, error }] = useImportDeliveryZipCodesMutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      csv: // value for 'csv'
 *   },
 * });
 */
export function useImportDeliveryZipCodesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlImportDeliveryZipCodesMutation, GqlImportDeliveryZipCodesMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlImportDeliveryZipCodesMutation, GqlImportDeliveryZipCodesMutationVariables>(ImportDeliveryZipCodesDocument, baseOptions);
      }
export type ImportDeliveryZipCodesMutationHookResult = ReturnType<typeof useImportDeliveryZipCodesMutation>;
export type ImportDeliveryZipCodesMutationResult = ApolloReactCommon.MutationResult<GqlImportDeliveryZipCodesMutation>;
export type ImportDeliveryZipCodesMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlImportDeliveryZipCodesMutation, GqlImportDeliveryZipCodesMutationVariables>;
export const UpdateCnameDocument = gql`
    mutation UpdateCname($dispensaryId: String!, $cname: String!) {
  updateCname(dispensaryId: $dispensaryId, cname: $cname) {
    success
    message
  }
}
    `;
export type GqlUpdateCnameMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateCnameMutation, GqlUpdateCnameMutationVariables>;

/**
 * __useUpdateCnameMutation__
 *
 * To run a mutation, you first call `useUpdateCnameMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCnameMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCnameMutation, { data, loading, error }] = useUpdateCnameMutation({
 *   variables: {
 *      dispensaryId: // value for 'dispensaryId'
 *      cname: // value for 'cname'
 *   },
 * });
 */
export function useUpdateCnameMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateCnameMutation, GqlUpdateCnameMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateCnameMutation, GqlUpdateCnameMutationVariables>(UpdateCnameDocument, baseOptions);
      }
export type UpdateCnameMutationHookResult = ReturnType<typeof useUpdateCnameMutation>;
export type UpdateCnameMutationResult = ApolloReactCommon.MutationResult<GqlUpdateCnameMutation>;
export type UpdateCnameMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateCnameMutation, GqlUpdateCnameMutationVariables>;
export const UpdateUserEmailDocument = gql`
    mutation UpdateUserEmail($currentEmail: String!, $newEmail: String!) {
  updateUserEmail(currentEmail: $currentEmail, newEmail: $newEmail) {
    success
    message
  }
}
    `;
export type GqlUpdateUserEmailMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateUserEmailMutation, GqlUpdateUserEmailMutationVariables>;

/**
 * __useUpdateUserEmailMutation__
 *
 * To run a mutation, you first call `useUpdateUserEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserEmailMutation, { data, loading, error }] = useUpdateUserEmailMutation({
 *   variables: {
 *      currentEmail: // value for 'currentEmail'
 *      newEmail: // value for 'newEmail'
 *   },
 * });
 */
export function useUpdateUserEmailMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateUserEmailMutation, GqlUpdateUserEmailMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateUserEmailMutation, GqlUpdateUserEmailMutationVariables>(UpdateUserEmailDocument, baseOptions);
      }
export type UpdateUserEmailMutationHookResult = ReturnType<typeof useUpdateUserEmailMutation>;
export type UpdateUserEmailMutationResult = ApolloReactCommon.MutationResult<GqlUpdateUserEmailMutation>;
export type UpdateUserEmailMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateUserEmailMutation, GqlUpdateUserEmailMutationVariables>;
export const UpdateUserPermissionsDocument = gql`
    mutation UpdateUserPermissions($email: String!, $permission: String!) {
  updateUserPermissions(email: $email, permission: $permission) {
    success
    message
  }
}
    `;
export type GqlUpdateUserPermissionsMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateUserPermissionsMutation, GqlUpdateUserPermissionsMutationVariables>;

/**
 * __useUpdateUserPermissionsMutation__
 *
 * To run a mutation, you first call `useUpdateUserPermissionsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserPermissionsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserPermissionsMutation, { data, loading, error }] = useUpdateUserPermissionsMutation({
 *   variables: {
 *      email: // value for 'email'
 *      permission: // value for 'permission'
 *   },
 * });
 */
export function useUpdateUserPermissionsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateUserPermissionsMutation, GqlUpdateUserPermissionsMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateUserPermissionsMutation, GqlUpdateUserPermissionsMutationVariables>(UpdateUserPermissionsDocument, baseOptions);
      }
export type UpdateUserPermissionsMutationHookResult = ReturnType<typeof useUpdateUserPermissionsMutation>;
export type UpdateUserPermissionsMutationResult = ApolloReactCommon.MutationResult<GqlUpdateUserPermissionsMutation>;
export type UpdateUserPermissionsMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateUserPermissionsMutation, GqlUpdateUserPermissionsMutationVariables>;
export const UpdateUserRoleV2Document = gql`
    mutation UpdateUserRoleV2($email: String!, $role: UserRoles!) {
  updateUserRoleV2(email: $email, role: $role) {
    success
    message
  }
}
    `;
export type GqlUpdateUserRoleV2MutationFn = ApolloReactCommon.MutationFunction<GqlUpdateUserRoleV2Mutation, GqlUpdateUserRoleV2MutationVariables>;

/**
 * __useUpdateUserRoleV2Mutation__
 *
 * To run a mutation, you first call `useUpdateUserRoleV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserRoleV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserRoleV2Mutation, { data, loading, error }] = useUpdateUserRoleV2Mutation({
 *   variables: {
 *      email: // value for 'email'
 *      role: // value for 'role'
 *   },
 * });
 */
export function useUpdateUserRoleV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateUserRoleV2Mutation, GqlUpdateUserRoleV2MutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateUserRoleV2Mutation, GqlUpdateUserRoleV2MutationVariables>(UpdateUserRoleV2Document, baseOptions);
      }
export type UpdateUserRoleV2MutationHookResult = ReturnType<typeof useUpdateUserRoleV2Mutation>;
export type UpdateUserRoleV2MutationResult = ApolloReactCommon.MutationResult<GqlUpdateUserRoleV2Mutation>;
export type UpdateUserRoleV2MutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateUserRoleV2Mutation, GqlUpdateUserRoleV2MutationVariables>;
export const UpdateUserRoleDocument = gql`
    mutation UpdateUserRole($email: String!, $role: String!) {
  updateUserRole(email: $email, role: $role) {
    success
    message
  }
}
    `;
export type GqlUpdateUserRoleMutationFn = ApolloReactCommon.MutationFunction<GqlUpdateUserRoleMutation, GqlUpdateUserRoleMutationVariables>;

/**
 * __useUpdateUserRoleMutation__
 *
 * To run a mutation, you first call `useUpdateUserRoleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserRoleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserRoleMutation, { data, loading, error }] = useUpdateUserRoleMutation({
 *   variables: {
 *      email: // value for 'email'
 *      role: // value for 'role'
 *   },
 * });
 */
export function useUpdateUserRoleMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GqlUpdateUserRoleMutation, GqlUpdateUserRoleMutationVariables>) {
        return ApolloReactHooks.useMutation<GqlUpdateUserRoleMutation, GqlUpdateUserRoleMutationVariables>(UpdateUserRoleDocument, baseOptions);
      }
export type UpdateUserRoleMutationHookResult = ReturnType<typeof useUpdateUserRoleMutation>;
export type UpdateUserRoleMutationResult = ApolloReactCommon.MutationResult<GqlUpdateUserRoleMutation>;
export type UpdateUserRoleMutationOptions = ApolloReactCommon.BaseMutationOptions<GqlUpdateUserRoleMutation, GqlUpdateUserRoleMutationVariables>;